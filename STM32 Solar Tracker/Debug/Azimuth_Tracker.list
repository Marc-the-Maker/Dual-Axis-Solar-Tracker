
Azimuth_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800a790  0800a790  0001a790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab3c  0800ab3c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab3c  0800ab3c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab3c  0800ab3c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab3c  0800ab3c  0001ab3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab40  0800ab40  0001ab40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ab44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          0000184c  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001a24  20001a24  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016f60  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b8c  00000000  00000000  000371ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014f8  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001095  00000000  00000000  0003b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023146  00000000  00000000  0003c2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019ebb  00000000  00000000  0005f40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d454e  00000000  00000000  000792c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a9c  00000000  00000000  0014d814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001542b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a774 	.word	0x0800a774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a774 	.word	0x0800a774

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f001 fc47 	bl	8002480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f86d 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f000 fdcf 	bl	8001798 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bfa:	f000 fdaf 	bl	800175c <MX_DMA_Init>
  MX_TIM2_Init();
 8000bfe:	f000 fb13 	bl	8001228 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c02:	f000 fa09 	bl	8001018 <MX_RTC_Init>
  MX_TIM1_Init();
 8000c06:	f000 fa61 	bl	80010cc <MX_TIM1_Init>
  MX_ADC1_Init();
 8000c0a:	f000 f8cd 	bl	8000da8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c0e:	f000 f9c5 	bl	8000f9c <MX_I2C1_Init>
  MX_TIM6_Init();
 8000c12:	f000 fbb3 	bl	800137c <MX_TIM6_Init>
  MX_TIM15_Init();
 8000c16:	f000 fbe7 	bl	80013e8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000c1a:	f000 fc7b 	bl	8001514 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000c1e:	f000 fcf3 	bl	8001608 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 8000c22:	f000 fd6b 	bl	80016fc <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8000c26:	f000 f95b 	bl	8000ee0 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000c2a:	f000 fb51 	bl	80012d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init() ;
 8000c2e:	f000 feff 	bl	8001a30 <lcd_init>
  lcd_clear();
 8000c32:	f000 fe9b 	bl	800196c <lcd_clear>
  HAL_Delay(2);
 8000c36:	2002      	movs	r0, #2
 8000c38:	f001 fc88 	bl	800254c <HAL_Delay>





  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <main+0xc8>)
 8000c40:	f001 ffde 	bl	8002c00 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint16_t*)&adc_buf_panel,ADC_BUF_PANEL_LEN);
 8000c44:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000c48:	491a      	ldr	r1, [pc, #104]	; (8000cb4 <main+0xcc>)
 8000c4a:	4819      	ldr	r0, [pc, #100]	; (8000cb0 <main+0xc8>)
 8000c4c:	f001 fefe 	bl	8002a4c <HAL_ADC_Start_DMA>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000c50:	2100      	movs	r1, #0
 8000c52:	4819      	ldr	r0, [pc, #100]	; (8000cb8 <main+0xd0>)
 8000c54:	f001 ffd4 	bl	8002c00 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc2);
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <main+0xd0>)
 8000c5a:	f001 fe41 	bl	80028e0 <HAL_ADC_Start>

// start pwm generation
//  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
//			  Error_Handler();

  HAL_TIM_Base_Start_IT(&htim6);
 8000c5e:	4817      	ldr	r0, [pc, #92]	; (8000cbc <main+0xd4>)
 8000c60:	f005 fb96 	bl	8006390 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Azi_encoder_count = 0;
  actual_Panel_Voltage = 0.0;
 8000c64:	4916      	ldr	r1, [pc, #88]	; (8000cc0 <main+0xd8>)
 8000c66:	f04f 0200 	mov.w	r2, #0
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	e9c1 2300 	strd	r2, r3, [r1]
  actual_Battery_Voltage = 0.0;
 8000c72:	4914      	ldr	r1, [pc, #80]	; (8000cc4 <main+0xdc>)
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e9c1 2300 	strd	r2, r3, [r1]

  if(HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL) != HAL_OK)
 8000c80:	213c      	movs	r1, #60	; 0x3c
 8000c82:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <main+0xe0>)
 8000c84:	f005 fdca 	bl	800681c <HAL_TIM_Encoder_Start>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <main+0xaa>
  {
	  Error_Handler();
 8000c8e:	f000 fefe 	bl	8001a8e <Error_Handler>
  }

  if(HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
 8000c92:	213c      	movs	r1, #60	; 0x3c
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <main+0xe4>)
 8000c96:	f005 fdc1 	bl	800681c <HAL_TIM_Encoder_Start>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <main+0xbc>
  {
	  Error_Handler();
 8000ca0:	f000 fef5 	bl	8001a8e <Error_Handler>
  }



	int temp_int = 1234;
 8000ca4:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8000ca8:	607b      	str	r3, [r7, #4]
//	  vert_Limit_Switch = 0;
//	  test_Dual_Axis_Tracking();
//	  test_Dual_Axis_Tracking();
	 //Inc_Cond();
//	 Inc_Cond_2();
	  boost_Set_PWM();
 8000caa:	f000 fe2b 	bl	8001904 <boost_Set_PWM>
  {
 8000cae:	e7fc      	b.n	8000caa <main+0xc2>
 8000cb0:	200001f4 	.word	0x200001f4
 8000cb4:	200005fc 	.word	0x200005fc
 8000cb8:	20000244 	.word	0x20000244
 8000cbc:	20000430 	.word	0x20000430
 8000cc0:	200005e8 	.word	0x200005e8
 8000cc4:	200005f0 	.word	0x200005f0
 8000cc8:	20000398 	.word	0x20000398
 8000ccc:	200003e4 	.word	0x200003e4

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b096      	sub	sp, #88	; 0x58
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cda:	2228      	movs	r2, #40	; 0x28
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f007 fd6c 	bl	80087bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
 8000d02:	615a      	str	r2, [r3, #20]
 8000d04:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000d06:	230b      	movs	r3, #11
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d0a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d14:	2301      	movs	r3, #1
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d18:	2310      	movs	r3, #16
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	2302      	movs	r3, #2
 8000d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fce7 	bl	8004708 <HAL_RCC_OscConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d40:	f000 fea5 	bl	8001a8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d44:	230f      	movs	r3, #15
 8000d46:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 fd0f 	bl	8005784 <HAL_RCC_ClockConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000d6c:	f000 fe8f 	bl	8001a8e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <SystemClock_Config+0xd4>)
 8000d72:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d82:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 ff30 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d96:	f000 fe7a 	bl	8001a8e <Error_Handler>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3758      	adds	r7, #88	; 0x58
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	000110a0 	.word	0x000110a0

08000da8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dca:	4b44      	ldr	r3, [pc, #272]	; (8000edc <MX_ADC1_Init+0x134>)
 8000dcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dd2:	4b42      	ldr	r3, [pc, #264]	; (8000edc <MX_ADC1_Init+0x134>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd8:	4b40      	ldr	r3, [pc, #256]	; (8000edc <MX_ADC1_Init+0x134>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dde:	4b3f      	ldr	r3, [pc, #252]	; (8000edc <MX_ADC1_Init+0x134>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de4:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <MX_ADC1_Init+0x134>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dea:	4b3c      	ldr	r3, [pc, #240]	; (8000edc <MX_ADC1_Init+0x134>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <MX_ADC1_Init+0x134>)
 8000df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000dfa:	4b38      	ldr	r3, [pc, #224]	; (8000edc <MX_ADC1_Init+0x134>)
 8000dfc:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b36      	ldr	r3, [pc, #216]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e0e:	4b33      	ldr	r3, [pc, #204]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e18:	2204      	movs	r2, #4
 8000e1a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e28:	482c      	ldr	r0, [pc, #176]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e2a:	f001 fbc7 	bl	80025bc <HAL_ADC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e34:	f000 fe2b 	bl	8001a8e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	4826      	ldr	r0, [pc, #152]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e44:	f002 fa0c 	bl	8003260 <HAL_ADCEx_MultiModeConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e4e:	f000 fe1e 	bl	8001a8e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e52:	2303      	movs	r3, #3
 8000e54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481b      	ldr	r0, [pc, #108]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e70:	f001 ff38 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000e7a:	f000 fe08 	bl	8001a8e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4814      	ldr	r0, [pc, #80]	; (8000edc <MX_ADC1_Init+0x134>)
 8000e8c:	f001 ff2a 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000e96:	f000 fdfa 	bl	8001a8e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_ADC1_Init+0x134>)
 8000ea8:	f001 ff1c 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8000eb2:	f000 fdec 	bl	8001a8e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_ADC1_Init+0x134>)
 8000ec4:	f001 ff0e 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8000ece:	f000 fdde 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200001f4 	.word	0x200001f4

08000ee0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <MX_ADC2_Init+0xb8>)
 8000efa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f3e:	2204      	movs	r2, #4
 8000f40:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f4e:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f50:	f001 fb34 	bl	80025bc <HAL_ADC_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000f5a:	f000 fd98 	bl	8001a8e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f5e:	230c      	movs	r3, #12
 8000f60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <MX_ADC2_Init+0xb4>)
 8000f7c:	f001 feb2 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000f86:	f000 fd82 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000244 	.word	0x20000244
 8000f98:	50000100 	.word	0x50000100

08000f9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	f240 220b 	movw	r2, #523	; 0x20b
 8000fac:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fda:	f002 ff69 	bl	8003eb0 <HAL_I2C_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe4:	f000 fd53 	bl	8001a8e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fec:	f003 faf4 	bl	80045d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ff6:	f000 fd4a 	bl	8001a8e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_I2C1_Init+0x74>)
 8000ffe:	f003 fb36 	bl	800466e <HAL_I2CEx_ConfigDigitalFilter>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001008:	f000 fd41 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200002d8 	.word	0x200002d8
 8001014:	40005400 	.word	0x40005400

08001018 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_RTC_Init+0xac>)
 8001032:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <MX_RTC_Init+0xb0>)
 8001034:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_RTC_Init+0xac>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_RTC_Init+0xac>)
 800103e:	227f      	movs	r2, #127	; 0x7f
 8001040:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_RTC_Init+0xac>)
 8001044:	22ff      	movs	r2, #255	; 0xff
 8001046:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_RTC_Init+0xac>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_RTC_Init+0xac>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_RTC_Init+0xac>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800105a:	481a      	ldr	r0, [pc, #104]	; (80010c4 <MX_RTC_Init+0xac>)
 800105c:	f004 fefe 	bl	8005e5c <HAL_RTC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001066:	f000 fd12 	bl	8001a8e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 800106a:	2310      	movs	r3, #16
 800106c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800106e:	2300      	movs	r3, #0
 8001070:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001072:	2300      	movs	r3, #0
 8001074:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2201      	movs	r2, #1
 8001082:	4619      	mov	r1, r3
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <MX_RTC_Init+0xac>)
 8001086:	f004 ff6c 	bl	8005f62 <HAL_RTC_SetTime>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001090:	f000 fcfd 	bl	8001a8e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001094:	2304      	movs	r3, #4
 8001096:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8001098:	2311      	movs	r3, #17
 800109a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x2;
 800109c:	2302      	movs	r3, #2
 800109e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80010a0:	2323      	movs	r3, #35	; 0x23
 80010a2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_RTC_Init+0xac>)
 80010ac:	f004 fff3 	bl	8006096 <HAL_RTC_SetDate>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80010b6:	f000 fcea 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000032c 	.word	0x2000032c
 80010c8:	40002800 	.word	0x40002800

080010cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09a      	sub	sp, #104	; 0x68
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	222c      	movs	r2, #44	; 0x2c
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f007 fb57 	bl	80087bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <MX_TIM1_Init+0x154>)
 8001110:	4a44      	ldr	r2, [pc, #272]	; (8001224 <MX_TIM1_Init+0x158>)
 8001112:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001114:	4b42      	ldr	r3, [pc, #264]	; (8001220 <MX_TIM1_Init+0x154>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <MX_TIM1_Init+0x154>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1199;
 8001120:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <MX_TIM1_Init+0x154>)
 8001122:	f240 42af 	movw	r2, #1199	; 0x4af
 8001126:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <MX_TIM1_Init+0x154>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <MX_TIM1_Init+0x154>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <MX_TIM1_Init+0x154>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800113a:	4839      	ldr	r0, [pc, #228]	; (8001220 <MX_TIM1_Init+0x154>)
 800113c:	f005 f8d0 	bl	80062e0 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001146:	f000 fca2 	bl	8001a8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800114a:	4835      	ldr	r0, [pc, #212]	; (8001220 <MX_TIM1_Init+0x154>)
 800114c:	f005 f97c 	bl	8006448 <HAL_TIM_PWM_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001156:	f000 fc9a 	bl	8001a8e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800115e:	2300      	movs	r3, #0
 8001160:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001166:	4619      	mov	r1, r3
 8001168:	482d      	ldr	r0, [pc, #180]	; (8001220 <MX_TIM1_Init+0x154>)
 800116a:	f005 fcf9 	bl	8006b60 <HAL_TIM_SlaveConfigSynchro>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001174:	f000 fc8b 	bl	8001a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001184:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001188:	4619      	mov	r1, r3
 800118a:	4825      	ldr	r0, [pc, #148]	; (8001220 <MX_TIM1_Init+0x154>)
 800118c:	f006 f980 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001196:	f000 fc7a 	bl	8001a8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <MX_TIM1_Init+0x154>)
 80011c0:	f005 fbba 	bl	8006938 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80011ca:	f000 fc60 	bl	8001a8e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 15;
 80011da:	230f      	movs	r3, #15
 80011dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM1_Init+0x154>)
 8001204:	f006 f9b2 	bl	800756c <HAL_TIMEx_ConfigBreakDeadTime>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800120e:	f000 fc3e 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM1_Init+0x154>)
 8001214:	f000 fed6 	bl	8001fc4 <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3768      	adds	r7, #104	; 0x68
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000034c 	.word	0x2000034c
 8001224:	40012c00 	.word	0x40012c00

08001228 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2224      	movs	r2, #36	; 0x24
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f007 fac0 	bl	80087bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001248:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_TIM2_Init+0xa4>)
 800125c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001260:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_TIM2_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_TIM2_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800126e:	2303      	movs	r3, #3
 8001270:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001272:	2302      	movs	r3, #2
 8001274:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001276:	2301      	movs	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800127e:	230a      	movs	r3, #10
 8001280:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001282:	2302      	movs	r3, #2
 8001284:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001286:	2301      	movs	r3, #1
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800128e:	230a      	movs	r3, #10
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_TIM2_Init+0xa4>)
 800129a:	f005 fa19 	bl	80066d0 <HAL_TIM_Encoder_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80012a4:	f000 fbf3 	bl	8001a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_TIM2_Init+0xa4>)
 80012b6:	f006 f8eb 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80012c0:	f000 fbe5 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3730      	adds	r7, #48	; 0x30
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000398 	.word	0x20000398

080012d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fa6c 	bl	80087bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_TIM3_Init+0xa4>)
 80012f0:	4a21      	ldr	r2, [pc, #132]	; (8001378 <MX_TIM3_Init+0xa8>)
 80012f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_TIM3_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_TIM3_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_TIM3_Init+0xa4>)
 8001302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001306:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_TIM3_Init+0xa4>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM3_Init+0xa4>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001314:	2303      	movs	r3, #3
 8001316:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001318:	2302      	movs	r3, #2
 800131a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001324:	230a      	movs	r3, #10
 8001326:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800132c:	2301      	movs	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001334:	230a      	movs	r3, #10
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_TIM3_Init+0xa4>)
 8001340:	f005 f9c6 	bl	80066d0 <HAL_TIM_Encoder_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800134a:	f000 fba0 	bl	8001a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_TIM3_Init+0xa4>)
 800135c:	f006 f898 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001366:	f000 fb92 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3730      	adds	r7, #48	; 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200003e4 	.word	0x200003e4
 8001378:	40000400 	.word	0x40000400

0800137c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_TIM6_Init+0x64>)
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <MX_TIM6_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_TIM6_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_TIM6_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 143;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_TIM6_Init+0x64>)
 80013a0:	228f      	movs	r2, #143	; 0x8f
 80013a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_TIM6_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_TIM6_Init+0x64>)
 80013ac:	f004 ff98 	bl	80062e0 <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80013b6:	f000 fb6a 	bl	8001a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013ba:	2320      	movs	r3, #32
 80013bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_TIM6_Init+0x64>)
 80013c8:	f006 f862 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80013d2:	f000 fb5c 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000430 	.word	0x20000430
 80013e4:	40001000 	.word	0x40001000

080013e8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b096      	sub	sp, #88	; 0x58
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	615a      	str	r2, [r3, #20]
 800140c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	222c      	movs	r2, #44	; 0x2c
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f007 f9d1 	bl	80087bc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <MX_TIM15_Init+0x124>)
 800141c:	4a3c      	ldr	r2, [pc, #240]	; (8001510 <MX_TIM15_Init+0x128>)
 800141e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <MX_TIM15_Init+0x124>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <MX_TIM15_Init+0x124>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1199;
 800142c:	4b37      	ldr	r3, [pc, #220]	; (800150c <MX_TIM15_Init+0x124>)
 800142e:	f240 42af 	movw	r2, #1199	; 0x4af
 8001432:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b35      	ldr	r3, [pc, #212]	; (800150c <MX_TIM15_Init+0x124>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <MX_TIM15_Init+0x124>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <MX_TIM15_Init+0x124>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001446:	4831      	ldr	r0, [pc, #196]	; (800150c <MX_TIM15_Init+0x124>)
 8001448:	f004 fffe 	bl	8006448 <HAL_TIM_PWM_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 fb1c 	bl	8001a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800145e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001462:	4619      	mov	r1, r3
 8001464:	4829      	ldr	r0, [pc, #164]	; (800150c <MX_TIM15_Init+0x124>)
 8001466:	f006 f813 	bl	8007490 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001470:	f000 fb0d 	bl	8001a8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001474:	2360      	movs	r3, #96	; 0x60
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147c:	2300      	movs	r3, #0
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001484:	2304      	movs	r3, #4
 8001486:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	481c      	ldr	r0, [pc, #112]	; (800150c <MX_TIM15_Init+0x124>)
 800149a:	f005 fa4d 	bl	8006938 <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80014a4:	f000 faf3 	bl	8001a8e <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014a8:	2302      	movs	r3, #2
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b4:	2204      	movs	r2, #4
 80014b6:	4619      	mov	r1, r3
 80014b8:	4814      	ldr	r0, [pc, #80]	; (800150c <MX_TIM15_Init+0x124>)
 80014ba:	f005 fa3d 	bl	8006938 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM15_Init+0xe0>
  {
    Error_Handler();
 80014c4:	f000 fae3 	bl	8001a8e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM15_Init+0x124>)
 80014f0:	f006 f83c 	bl	800756c <HAL_TIMEx_ConfigBreakDeadTime>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 80014fa:	f000 fac8 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM15_Init+0x124>)
 8001500:	f000 fd60 	bl	8001fc4 <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3758      	adds	r7, #88	; 0x58
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000047c 	.word	0x2000047c
 8001510:	40014000 	.word	0x40014000

08001514 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b092      	sub	sp, #72	; 0x48
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	222c      	movs	r2, #44	; 0x2c
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f007 f941 	bl	80087bc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <MX_TIM16_Init+0xec>)
 800153c:	4a31      	ldr	r2, [pc, #196]	; (8001604 <MX_TIM16_Init+0xf0>)
 800153e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 719;
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MX_TIM16_Init+0xec>)
 8001542:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001546:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <MX_TIM16_Init+0xec>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_TIM16_Init+0xec>)
 8001550:	2264      	movs	r2, #100	; 0x64
 8001552:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <MX_TIM16_Init+0xec>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_TIM16_Init+0xec>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <MX_TIM16_Init+0xec>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001566:	4826      	ldr	r0, [pc, #152]	; (8001600 <MX_TIM16_Init+0xec>)
 8001568:	f004 feba 	bl	80062e0 <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001572:	f000 fa8c 	bl	8001a8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001576:	4822      	ldr	r0, [pc, #136]	; (8001600 <MX_TIM16_Init+0xec>)
 8001578:	f004 ff66 	bl	8006448 <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001582:	f000 fa84 	bl	8001a8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001586:	2360      	movs	r3, #96	; 0x60
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4815      	ldr	r0, [pc, #84]	; (8001600 <MX_TIM16_Init+0xec>)
 80015ac:	f005 f9c4 	bl	8006938 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80015b6:	f000 fa6a 	bl	8001a8e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM16_Init+0xec>)
 80015e2:	f005 ffc3 	bl	800756c <HAL_TIMEx_ConfigBreakDeadTime>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80015ec:	f000 fa4f 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM16_Init+0xec>)
 80015f2:	f000 fce7 	bl	8001fc4 <HAL_TIM_MspPostInit>

}
 80015f6:	bf00      	nop
 80015f8:	3748      	adds	r7, #72	; 0x48
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200004c8 	.word	0x200004c8
 8001604:	40014400 	.word	0x40014400

08001608 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b092      	sub	sp, #72	; 0x48
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800160e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001622:	463b      	mov	r3, r7
 8001624:	222c      	movs	r2, #44	; 0x2c
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f007 f8c7 	bl	80087bc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <MX_TIM17_Init+0xec>)
 8001630:	4a31      	ldr	r2, [pc, #196]	; (80016f8 <MX_TIM17_Init+0xf0>)
 8001632:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 719;
 8001634:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <MX_TIM17_Init+0xec>)
 8001636:	f240 22cf 	movw	r2, #719	; 0x2cf
 800163a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <MX_TIM17_Init+0xec>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <MX_TIM17_Init+0xec>)
 8001644:	2264      	movs	r2, #100	; 0x64
 8001646:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <MX_TIM17_Init+0xec>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <MX_TIM17_Init+0xec>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <MX_TIM17_Init+0xec>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800165a:	4826      	ldr	r0, [pc, #152]	; (80016f4 <MX_TIM17_Init+0xec>)
 800165c:	f004 fe40 	bl	80062e0 <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001666:	f000 fa12 	bl	8001a8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800166a:	4822      	ldr	r0, [pc, #136]	; (80016f4 <MX_TIM17_Init+0xec>)
 800166c:	f004 feec 	bl	8006448 <HAL_TIM_PWM_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001676:	f000 fa0a 	bl	8001a8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167a:	2360      	movs	r3, #96	; 0x60
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001682:	2300      	movs	r3, #0
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	4815      	ldr	r0, [pc, #84]	; (80016f4 <MX_TIM17_Init+0xec>)
 80016a0:	f005 f94a 	bl	8006938 <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80016aa:	f000 f9f0 	bl	8001a8e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM17_Init+0xec>)
 80016d6:	f005 ff49 	bl	800756c <HAL_TIMEx_ConfigBreakDeadTime>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80016e0:	f000 f9d5 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM17_Init+0xec>)
 80016e6:	f000 fc6d 	bl	8001fc4 <HAL_TIM_MspPostInit>

}
 80016ea:	bf00      	nop
 80016ec:	3748      	adds	r7, #72	; 0x48
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000514 	.word	0x20000514
 80016f8:	40014800 	.word	0x40014800

080016fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_USART3_UART_Init+0x58>)
 8001702:	4a15      	ldr	r2, [pc, #84]	; (8001758 <MX_USART3_UART_Init+0x5c>)
 8001704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_USART3_UART_Init+0x58>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_USART3_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_USART3_UART_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_USART3_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_USART3_UART_Init+0x58>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_USART3_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_USART3_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_USART3_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_USART3_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_USART3_UART_Init+0x58>)
 8001740:	f005 ff8c 	bl	800765c <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800174a:	f000 f9a0 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000560 	.word	0x20000560
 8001758:	40004800 	.word	0x40004800

0800175c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_DMA_Init+0x38>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <MX_DMA_Init+0x38>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6153      	str	r3, [r2, #20]
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_DMA_Init+0x38>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	200b      	movs	r0, #11
 8001780:	f002 f83f 	bl	8003802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001784:	200b      	movs	r0, #11
 8001786:	f002 f858 	bl	800383a <HAL_NVIC_EnableIRQ>

}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b8:	6153      	str	r3, [r2, #20]
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d0:	6153      	str	r3, [r2, #20]
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	6153      	str	r3, [r2, #20]
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a11      	ldr	r2, [pc, #68]	; (8001840 <MX_GPIO_Init+0xa8>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_GPIO_Init+0xa8>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_SWITCH_Pin|LED_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 510d 	mov.w	r1, #9024	; 0x2340
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <MX_GPIO_Init+0xac>)
 8001816:	f002 fb33 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOT_SWITCH_Pin LED_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = MOT_SWITCH_Pin|LED_Pin|LED3_Pin|LED2_Pin;
 800181a:	f44f 530d 	mov.w	r3, #9024	; 0x2340
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_GPIO_Init+0xac>)
 8001834:	f002 f9b2 	bl	8003b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	48000400 	.word	0x48000400

08001848 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
		voltage_Running_Total = 0.0;
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_ADC_ConvCpltCallback+0xa4>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
		current_Running_Total = 0.0;
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
		voltage_Running_Bat_Total = 0.0;
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_ADC_ConvCpltCallback+0xac>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
		current_Running_Bat_Total = 0.0;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

		for(int i = 0; i<=2399 ; i += 4){
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	e031      	b.n	80018d2 <HAL_ADC_ConvCpltCallback+0x8a>
			voltage_Running_Total = voltage_Running_Total+ adc_buf_panel[i];
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <HAL_ADC_ConvCpltCallback+0xb4>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001876:	b29b      	uxth	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_ADC_ConvCpltCallback+0xa4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <HAL_ADC_ConvCpltCallback+0xa4>)
 8001882:	6013      	str	r3, [r2, #0]
			current_Running_Total = current_Running_Total+ adc_buf_panel[i + 1];
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3301      	adds	r3, #1
 8001888:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <HAL_ADC_ConvCpltCallback+0xb4>)
 800188a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188e:	b29b      	uxth	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800189a:	6013      	str	r3, [r2, #0]
			voltage_Running_Bat_Total = voltage_Running_Bat_Total+ adc_buf_panel[i + 2];
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3302      	adds	r3, #2
 80018a0:	4a16      	ldr	r2, [pc, #88]	; (80018fc <HAL_ADC_ConvCpltCallback+0xb4>)
 80018a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_ADC_ConvCpltCallback+0xac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <HAL_ADC_ConvCpltCallback+0xac>)
 80018b2:	6013      	str	r3, [r2, #0]
			current_Running_Bat_Total = current_Running_Bat_Total+ adc_buf_panel[i + 3];
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3303      	adds	r3, #3
 80018b8:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_ADC_ConvCpltCallback+0xb4>)
 80018ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_ADC_ConvCpltCallback+0xb0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_ADC_ConvCpltCallback+0xb0>)
 80018ca:	6013      	str	r3, [r2, #0]
		for(int i = 0; i<=2399 ; i += 4){
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3304      	adds	r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80018d8:	dbc9      	blt.n	800186e <HAL_ADC_ConvCpltCallback+0x26>
		}
		sampled = 1;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_ADC_ConvCpltCallback+0xb8>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	200018c0 	.word	0x200018c0
 80018f0:	200018bc 	.word	0x200018bc
 80018f4:	200018c4 	.word	0x200018c4
 80018f8:	200018c8 	.word	0x200018c8
 80018fc:	200005fc 	.word	0x200005fc
 8001900:	200005f8 	.word	0x200005f8

08001904 <boost_Set_PWM>:
		TIM1->CCR1 = round(scaled_duty_ratio);
	}

}

void boost_Set_PWM(){
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
//
	double scaled_duty_ratio = (50/100.0)*1199.0;
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <boost_Set_PWM+0x5c>)
 8001910:	e9c7 2300 	strd	r2, r3, [r7]
	TIM15->CCR1 = round(scaled_duty_ratio);
 8001914:	ed97 0b00 	vldr	d0, [r7]
 8001918:	f008 fee4 	bl	800a6e4 <round>
 800191c:	ec53 2b10 	vmov	r2, r3, d0
 8001920:	4c10      	ldr	r4, [pc, #64]	; (8001964 <boost_Set_PWM+0x60>)
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f93f 	bl	8000ba8 <__aeabi_d2uiz>
 800192a:	4603      	mov	r3, r0
 800192c:	6363      	str	r3, [r4, #52]	; 0x34
	TIM15->CCR2 = round(scaled_duty_ratio);
 800192e:	ed97 0b00 	vldr	d0, [r7]
 8001932:	f008 fed7 	bl	800a6e4 <round>
 8001936:	ec53 2b10 	vmov	r2, r3, d0
 800193a:	4c0a      	ldr	r4, [pc, #40]	; (8001964 <boost_Set_PWM+0x60>)
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f932 	bl	8000ba8 <__aeabi_d2uiz>
 8001944:	4603      	mov	r3, r0
 8001946:	63a3      	str	r3, [r4, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001948:	2100      	movs	r1, #0
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <boost_Set_PWM+0x64>)
 800194c:	f004 fdd4 	bl	80064f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8001950:	2104      	movs	r1, #4
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <boost_Set_PWM+0x64>)
 8001954:	f004 fdd0 	bl	80064f8 <HAL_TIM_PWM_Start>

	//HAL_Delay(500);

}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	4082bc00 	.word	0x4082bc00
 8001964:	40014000 	.word	0x40014000
 8001968:	2000047c 	.word	0x2000047c

0800196c <lcd_clear>:
	return pot_result;
}

//LCD Functions

void lcd_clear(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001970:	2001      	movs	r0, #1
 8001972:	f000 f802 	bl	800197a <lcd_send_cmd>
    //HAL_Delay(2);
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f80a 	bl	80019b0 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 800199c:	7bbb      	ldrb	r3, [r7, #14]
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f805 	bl	80019b0 <lcd_write_nibble>
//  if (cmd == 0x01 || cmd == 0x02) {
//    HAL_Delay(2);
//  }
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <lcd_write_nibble>:

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	79bb      	ldrb	r3, [r7, #6]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <lcd_write_nibble+0x78>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	b25a      	sxtb	r2, r3
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80019f0:	f107 020f 	add.w	r2, r7, #15
 80019f4:	2364      	movs	r3, #100	; 0x64
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	214e      	movs	r1, #78	; 0x4e
 80019fc:	480b      	ldr	r0, [pc, #44]	; (8001a2c <lcd_write_nibble+0x7c>)
 80019fe:	f002 fae7 	bl	8003fd0 <HAL_I2C_Master_Transmit>
//  HAL_Delay(1);
  data &= ~(1 << EN_BIT);
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001a0c:	f107 020f 	add.w	r2, r7, #15
 8001a10:	2364      	movs	r3, #100	; 0x64
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	214e      	movs	r1, #78	; 0x4e
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <lcd_write_nibble+0x7c>)
 8001a1a:	f002 fad9 	bl	8003fd0 <HAL_I2C_Master_Transmit>
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	200002d8 	.word	0x200002d8

08001a30 <lcd_init>:

void lcd_init() {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8001a34:	2032      	movs	r0, #50	; 0x32
 8001a36:	f000 fd89 	bl	800254c <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f7ff ffb7 	bl	80019b0 <lcd_write_nibble>
  HAL_Delay(5);
 8001a42:	2005      	movs	r0, #5
 8001a44:	f000 fd82 	bl	800254c <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f7ff ffb0 	bl	80019b0 <lcd_write_nibble>
  HAL_Delay(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f000 fd7b 	bl	800254c <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001a56:	2100      	movs	r1, #0
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f7ff ffa9 	bl	80019b0 <lcd_write_nibble>
  HAL_Delay(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 fd74 	bl	800254c <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8001a64:	2100      	movs	r1, #0
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7ff ffa2 	bl	80019b0 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8001a6c:	2028      	movs	r0, #40	; 0x28
 8001a6e:	f7ff ff84 	bl	800197a <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8001a72:	200c      	movs	r0, #12
 8001a74:	f7ff ff81 	bl	800197a <lcd_send_cmd>
  lcd_send_cmd(0x06);
 8001a78:	2006      	movs	r0, #6
 8001a7a:	f7ff ff7e 	bl	800197a <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff ff7b 	bl	800197a <lcd_send_cmd>
  HAL_Delay(2);
 8001a84:	2002      	movs	r0, #2
 8001a86:	f000 fd61 	bl	800254c <HAL_Delay>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a92:	b672      	cpsid	i
}
 8001a94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <Error_Handler+0x8>

08001a98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_MspInit+0x44>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_MspInit+0x44>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_MspInit+0x44>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_MspInit+0x44>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_MspInit+0x44>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_MspInit+0x44>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ace:	2007      	movs	r0, #7
 8001ad0:	f001 fe8c 	bl	80037ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b00:	d16e      	bne.n	8001be0 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b02:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <HAL_ADC_MspInit+0x16c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_ADC_MspInit+0x16c>)
 8001b0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <HAL_ADC_MspInit+0x16c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d10b      	bne.n	8001b2c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b14:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	4a4d      	ldr	r2, [pc, #308]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	6153      	str	r3, [r2, #20]
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	4a47      	ldr	r2, [pc, #284]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b36:	6153      	str	r3, [r2, #20]
 8001b38:	4b45      	ldr	r3, [pc, #276]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	4a41      	ldr	r2, [pc, #260]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b4e:	6153      	str	r3, [r2, #20]
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = CURR_BAT_Pin|VOLT_PANEL_Pin|CURR_PANEL_Pin;
 8001b5c:	230d      	movs	r3, #13
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b60:	2303      	movs	r3, #3
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b72:	f002 f813 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLT_BAT_Pin;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VOLT_BAT_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	4832      	ldr	r0, [pc, #200]	; (8001c54 <HAL_ADC_MspInit+0x174>)
 8001b8a:	f002 f807 	bl	8003b9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b8e:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001b90:	4a32      	ldr	r2, [pc, #200]	; (8001c5c <HAL_ADC_MspInit+0x17c>)
 8001b92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001bb8:	2220      	movs	r2, #32
 8001bba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bc2:	4825      	ldr	r0, [pc, #148]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001bc4:	f001 fe53 	bl	800386e <HAL_DMA_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8001bce:	f7ff ff5e 	bl	8001a8e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_ADC_MspInit+0x178>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001bde:	e031      	b.n	8001c44 <HAL_ADC_MspInit+0x164>
  else if(hadc->Instance==ADC2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_ADC_MspInit+0x180>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12c      	bne.n	8001c44 <HAL_ADC_MspInit+0x164>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_ADC_MspInit+0x16c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <HAL_ADC_MspInit+0x16c>)
 8001bf2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_ADC_MspInit+0x16c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10b      	bne.n	8001c14 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6153      	str	r3, [r2, #20]
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1e:	6153      	str	r3, [r2, #20]
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_ADC_MspInit+0x170>)
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c30:	2303      	movs	r3, #3
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <HAL_ADC_MspInit+0x174>)
 8001c40:	f001 ffac 	bl	8003b9c <HAL_GPIO_Init>
}
 8001c44:	bf00      	nop
 8001c46:	3730      	adds	r7, #48	; 0x30
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200018cc 	.word	0x200018cc
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000400 	.word	0x48000400
 8001c58:	20000294 	.word	0x20000294
 8001c5c:	40020008 	.word	0x40020008
 8001c60:	50000100 	.word	0x50000100

08001c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_I2C_MspInit+0xb8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d145      	bne.n	8001d12 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_I2C_MspInit+0xbc>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <HAL_I2C_MspInit+0xbc>)
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	6153      	str	r3, [r2, #20]
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <HAL_I2C_MspInit+0xbc>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_I2C_MspInit+0xbc>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_I2C_MspInit+0xbc>)
 8001ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca8:	6153      	str	r3, [r2, #20]
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_I2C_MspInit+0xbc>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbc:	2312      	movs	r3, #18
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd6:	f001 ff61 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cde:	2312      	movs	r3, #18
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cea:	2304      	movs	r3, #4
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <HAL_I2C_MspInit+0xc0>)
 8001cf6:	f001 ff51 	bl	8003b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_I2C_MspInit+0xbc>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_I2C_MspInit+0xbc>)
 8001d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d04:	61d3      	str	r3, [r2, #28]
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_I2C_MspInit+0xbc>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	40021000 	.word	0x40021000
 8001d24:	48000400 	.word	0x48000400

08001d28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_RTC_MspInit+0x44>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d111      	bne.n	8001d5e <HAL_RTC_MspInit+0x36>
 8001d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d3e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d48:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_RTC_MspInit+0x48>)
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40002800 	.word	0x40002800
 8001d70:	10908100 	.word	0x10908100

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a25      	ldr	r2, [pc, #148]	; (8001e18 <HAL_TIM_Base_MspInit+0xa4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10c      	bne.n	8001da0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d86:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001d8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d90:	6193      	str	r3, [r2, #24]
 8001d92:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d9e:	e034      	b.n	8001e0a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <HAL_TIM_Base_MspInit+0xac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10c      	bne.n	8001dc4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
}
 8001dc2:	e022      	b.n	8001e0a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_TIM_Base_MspInit+0xb0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10c      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd8:	6193      	str	r3, [r2, #24]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
}
 8001de6:	e010      	b.n	8001e0a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM17)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_TIM_Base_MspInit+0xb4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10b      	bne.n	8001e0a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6193      	str	r3, [r2, #24]
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_TIM_Base_MspInit+0xa8>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40012c00 	.word	0x40012c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40001000 	.word	0x40001000
 8001e24:	40014400 	.word	0x40014400
 8001e28:	40014800 	.word	0x40014800

08001e2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	; 0x38
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d145      	bne.n	8001eda <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a49      	ldr	r2, [pc, #292]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	61d3      	str	r3, [r2, #28]
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	4a43      	ldr	r2, [pc, #268]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	6153      	str	r3, [r2, #20]
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6153      	str	r3, [r2, #20]
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = VERT_ENC_A_Pin;
 8001e96:	2320      	movs	r3, #32
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VERT_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb4:	f001 fe72 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VERT_ENC_B_Pin;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VERT_ENC_B_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	482a      	ldr	r0, [pc, #168]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x150>)
 8001ed4:	f001 fe62 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ed8:	e049      	b.n	8001f6e <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM3)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a28      	ldr	r2, [pc, #160]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d144      	bne.n	8001f6e <HAL_TIM_Encoder_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a23      	ldr	r2, [pc, #140]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	61d3      	str	r3, [r2, #28]
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f06:	6153      	str	r3, [r2, #20]
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1e:	6153      	str	r3, [r2, #20]
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AZI_ENC_A_Pin;
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AZI_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	4619      	mov	r1, r3
 8001f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4a:	f001 fe27 	bl	8003b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AZI_ENC_B_Pin;
 8001f4e:	2310      	movs	r3, #16
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(AZI_ENC_B_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f66:	4619      	mov	r1, r3
 8001f68:	4804      	ldr	r0, [pc, #16]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x150>)
 8001f6a:	f001 fe17 	bl	8003b9c <HAL_GPIO_Init>
}
 8001f6e:	bf00      	nop
 8001f70:	3738      	adds	r7, #56	; 0x38
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	40000400 	.word	0x40000400

08001f84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_TIM_PWM_MspInit+0x38>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10b      	bne.n	8001fae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6193      	str	r3, [r2, #24]
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40014000 	.word	0x40014000
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08e      	sub	sp, #56	; 0x38
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_TIM_MspPostInit+0x1ac>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d13b      	bne.n	800205e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4a62      	ldr	r2, [pc, #392]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8001fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ff0:	6153      	str	r3, [r2, #20]
 8001ff2:	4b60      	ldr	r3, [pc, #384]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	4a5c      	ldr	r2, [pc, #368]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	6153      	str	r3, [r2, #20]
 800200a:	4b5a      	ldr	r3, [pc, #360]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MPPT_B_Pin;
 8002016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002028:	2304      	movs	r3, #4
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MPPT_B_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002030:	4619      	mov	r1, r3
 8002032:	4851      	ldr	r0, [pc, #324]	; (8002178 <HAL_TIM_MspPostInit+0x1b4>)
 8002034:	f001 fdb2 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MPPT_A_Pin;
 8002038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800204a:	2306      	movs	r3, #6
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MPPT_A_GPIO_Port, &GPIO_InitStruct);
 800204e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002058:	f001 fda0 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800205c:	e084      	b.n	8002168 <HAL_TIM_MspPostInit+0x1a4>
  else if(htim->Instance==TIM15)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a46      	ldr	r2, [pc, #280]	; (800217c <HAL_TIM_MspPostInit+0x1b8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d13a      	bne.n	80020de <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b42      	ldr	r3, [pc, #264]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	4a41      	ldr	r2, [pc, #260]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 800206e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002072:	6153      	str	r3, [r2, #20]
 8002074:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002080:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8002086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208a:	6153      	str	r3, [r2, #20]
 800208c:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CCCV_B_Pin;
 8002098:	2302      	movs	r3, #2
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80020a8:	2309      	movs	r3, #9
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CCCV_B_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b6:	f001 fd71 	bl	8003b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CCCV_A_Pin|CCCV_BB15_Pin;
 80020ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80020cc:	2301      	movs	r3, #1
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d4:	4619      	mov	r1, r3
 80020d6:	482a      	ldr	r0, [pc, #168]	; (8002180 <HAL_TIM_MspPostInit+0x1bc>)
 80020d8:	f001 fd60 	bl	8003b9c <HAL_GPIO_Init>
}
 80020dc:	e044      	b.n	8002168 <HAL_TIM_MspPostInit+0x1a4>
  else if(htim->Instance==TIM16)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a28      	ldr	r2, [pc, #160]	; (8002184 <HAL_TIM_MspPostInit+0x1c0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d11d      	bne.n	8002124 <HAL_TIM_MspPostInit+0x160>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	4a21      	ldr	r2, [pc, #132]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 80020ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f2:	6153      	str	r3, [r2, #20]
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_A_Pin;
 8002100:	2340      	movs	r3, #64	; 0x40
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002110:	2301      	movs	r3, #1
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_A_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211e:	f001 fd3d 	bl	8003b9c <HAL_GPIO_Init>
}
 8002122:	e021      	b.n	8002168 <HAL_TIM_MspPostInit+0x1a4>
  else if(htim->Instance==TIM17)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_TIM_MspPostInit+0x1c4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d11c      	bne.n	8002168 <HAL_TIM_MspPostInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	6153      	str	r3, [r2, #20]
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_TIM_MspPostInit+0x1b0>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_B_Pin;
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002156:	2301      	movs	r3, #1
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOTOR_B_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215e:	4619      	mov	r1, r3
 8002160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002164:	f001 fd1a 	bl	8003b9c <HAL_GPIO_Init>
}
 8002168:	bf00      	nop
 800216a:	3738      	adds	r7, #56	; 0x38
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40012c00 	.word	0x40012c00
 8002174:	40021000 	.word	0x40021000
 8002178:	48000800 	.word	0x48000800
 800217c:	40014000 	.word	0x40014000
 8002180:	48000400 	.word	0x48000400
 8002184:	40014400 	.word	0x40014400
 8002188:	40014800 	.word	0x40014800

0800218c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_UART_MspInit+0x7c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d128      	bne.n	8002200 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_UART_MspInit+0x80>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_UART_MspInit+0x80>)
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b8:	61d3      	str	r3, [r2, #28]
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_UART_MspInit+0x80>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_UART_MspInit+0x80>)
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <HAL_UART_MspInit+0x80>)
 80021cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d0:	6153      	str	r3, [r2, #20]
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_UART_MspInit+0x80>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021f0:	2307      	movs	r3, #7
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_UART_MspInit+0x84>)
 80021fc:	f001 fcce 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40004800 	.word	0x40004800
 800220c:	40021000 	.word	0x40021000
 8002210:	48000400 	.word	0x48000400

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <NMI_Handler+0x4>

0800221a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <UsageFault_Handler+0x4>

08002232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002260:	f000 f954 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <DMA1_Channel1_IRQHandler+0x10>)
 800226e:	f001 fba4 	bl	80039ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000294 	.word	0x20000294

0800227c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_kill>:

int _kill(int pid, int sig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002296:	f006 fa9d 	bl	80087d4 <__errno>
 800229a:	4603      	mov	r3, r0
 800229c:	2216      	movs	r2, #22
 800229e:	601a      	str	r2, [r3, #0]
  return -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_exit>:

void _exit (int status)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffe7 	bl	800228c <_kill>
  while (1) {}    /* Make sure we hang here */
 80022be:	e7fe      	b.n	80022be <_exit+0x12>

080022c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e00a      	b.n	80022e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022d2:	f3af 8000 	nop.w
 80022d6:	4601      	mov	r1, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf0      	blt.n	80022d2 <_read+0x12>
  }

  return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e009      	b.n	8002320 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	dbf1      	blt.n	800230c <_write+0x12>
  }
  return len;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_close>:

int _close(int file)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235a:	605a      	str	r2, [r3, #4]
  return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_isatty>:

int _isatty(int file)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f006 fa02 	bl	80087d4 <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20003000 	.word	0x20003000
 80023fc:	00000400 	.word	0x00000400
 8002400:	200018d0 	.word	0x200018d0
 8002404:	20001a28 	.word	0x20001a28

08002408 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800242c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002464 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002430:	f7ff ffea 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <LoopForever+0x6>)
  ldr r1, =_edata
 8002436:	490d      	ldr	r1, [pc, #52]	; (800246c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <LoopForever+0xe>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <LoopForever+0x16>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800245a:	f006 f9c1 	bl	80087e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800245e:	f7fe fbc3 	bl	8000be8 <main>

08002462 <LoopForever>:

LoopForever:
    b LoopForever
 8002462:	e7fe      	b.n	8002462 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002464:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002470:	0800ab44 	.word	0x0800ab44
  ldr r2, =_sbss
 8002474:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002478:	20001a24 	.word	0x20001a24

0800247c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC1_2_IRQHandler>
	...

08002480 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_Init+0x28>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_Init+0x28>)
 800248a:	f043 0310 	orr.w	r3, r3, #16
 800248e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002490:	2003      	movs	r0, #3
 8002492:	f001 f9ab 	bl	80037ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002496:	2000      	movs	r0, #0
 8002498:	f000 f808 	bl	80024ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800249c:	f7ff fafc 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40022000 	.word	0x40022000

080024ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0x54>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x58>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 f9c3 	bl	8003856 <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00e      	b.n	80024f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b0f      	cmp	r3, #15
 80024de:	d80a      	bhi.n	80024f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e0:	2200      	movs	r2, #0
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e8:	f001 f98b 	bl	8003802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <HAL_InitTick+0x5c>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000004 	.word	0x20000004
 8002504:	2000000c 	.word	0x2000000c
 8002508:	20000008 	.word	0x20000008

0800250c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x20>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x24>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_IncTick+0x24>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2000000c 	.word	0x2000000c
 8002530:	200018d4 	.word	0x200018d4

08002534 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;  
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200018d4 	.word	0x200018d4

0800254c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff ffee 	bl	8002534 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002564:	d005      	beq.n	8002572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_Delay+0x44>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002572:	bf00      	nop
 8002574:	f7ff ffde 	bl	8002534 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8f7      	bhi.n	8002574 <HAL_Delay+0x28>
  {
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000000c 	.word	0x2000000c

08002594 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b09a      	sub	sp, #104	; 0x68
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e172      	b.n	80028c2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d176      	bne.n	80026dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d152      	bne.n	800269c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fa65 	bl	8001ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d13b      	bne.n	800269c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 ffab 	bl	8003580 <ADC_Disable>
 800262a:	4603      	mov	r3, r0
 800262c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d12f      	bne.n	800269c <HAL_ADC_Init+0xe0>
 800263c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002640:	2b00      	cmp	r3, #0
 8002642:	d12b      	bne.n	800269c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	f043 0202 	orr.w	r2, r3, #2
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002666:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002676:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002678:	4b94      	ldr	r3, [pc, #592]	; (80028cc <HAL_ADC_Init+0x310>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a94      	ldr	r2, [pc, #592]	; (80028d0 <HAL_ADC_Init+0x314>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9a      	lsrs	r2, r3, #18
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800268e:	e002      	b.n	8002696 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	3b01      	subs	r3, #1
 8002694:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b8:	d110      	bne.n	80026dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f023 0312 	bic.w	r3, r3, #18
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 80df 	bne.w	80028a8 <HAL_ADC_Init+0x2ec>
 80026ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 80da 	bne.w	80028a8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 80d2 	bne.w	80028a8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800270c:	f043 0202 	orr.w	r2, r3, #2
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_ADC_Init+0x318>)
 8002716:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002720:	d102      	bne.n	8002728 <HAL_ADC_Init+0x16c>
 8002722:	4b6d      	ldr	r3, [pc, #436]	; (80028d8 <HAL_ADC_Init+0x31c>)
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e002      	b.n	800272e <HAL_ADC_Init+0x172>
 8002728:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800272c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d108      	bne.n	800274e <HAL_ADC_Init+0x192>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_ADC_Init+0x192>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_ADC_Init+0x194>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11c      	bne.n	800278e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002754:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002756:	2b00      	cmp	r3, #0
 8002758:	d010      	beq.n	800277c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_ADC_Init+0x1ba>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADC_Init+0x1ba>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_ADC_Init+0x1bc>
 8002776:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002778:	2b00      	cmp	r3, #0
 800277a:	d108      	bne.n	800278e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800277c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	431a      	orrs	r2, r3
 800278a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7e5b      	ldrb	r3, [r3, #25]
 8002792:	035b      	lsls	r3, r3, #13
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002798:	2a01      	cmp	r2, #1
 800279a:	d002      	beq.n	80027a2 <HAL_ADC_Init+0x1e6>
 800279c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027a0:	e000      	b.n	80027a4 <HAL_ADC_Init+0x1e8>
 80027a2:	2200      	movs	r2, #0
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027b4:	4313      	orrs	r3, r2
 80027b6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d11b      	bne.n	80027fa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7e5b      	ldrb	r3, [r3, #25]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	3b01      	subs	r3, #1
 80027d0:	045a      	lsls	r2, r3, #17
 80027d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	663b      	str	r3, [r7, #96]	; 0x60
 80027dc:	e00d      	b.n	80027fa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80027e6:	f043 0220 	orr.w	r2, r3, #32
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d007      	beq.n	8002812 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	4313      	orrs	r3, r2
 800280c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800280e:	4313      	orrs	r3, r2
 8002810:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b00      	cmp	r3, #0
 800281e:	d114      	bne.n	800284a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800282e:	f023 0302 	bic.w	r3, r3, #2
 8002832:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7e1b      	ldrb	r3, [r3, #24]
 8002838:	039a      	lsls	r2, r3, #14
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4313      	orrs	r3, r2
 8002844:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002846:	4313      	orrs	r3, r2
 8002848:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_ADC_Init+0x320>)
 8002852:	4013      	ands	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800285a:	430b      	orrs	r3, r1
 800285c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d10c      	bne.n	8002880 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f023 010f 	bic.w	r1, r3, #15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
 800287e:	e007      	b.n	8002890 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020f 	bic.w	r2, r2, #15
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
 80028a6:	e00a      	b.n	80028be <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f023 0312 	bic.w	r3, r3, #18
 80028b0:	f043 0210 	orr.w	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80028be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3768      	adds	r7, #104	; 0x68
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000004 	.word	0x20000004
 80028d0:	431bde83 	.word	0x431bde83
 80028d4:	50000300 	.word	0x50000300
 80028d8:	50000100 	.word	0x50000100
 80028dc:	fff0c007 	.word	0xfff0c007

080028e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 809c 	bne.w	8002a34 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_ADC_Start+0x2a>
 8002906:	2302      	movs	r3, #2
 8002908:	e097      	b.n	8002a3a <HAL_ADC_Start+0x15a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fdd0 	bl	80034b8 <ADC_Enable>
 8002918:	4603      	mov	r3, r0
 800291a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f040 8083 	bne.w	8002a2a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002938:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <HAL_ADC_Start+0x164>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_ADC_Start+0x6e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800294c:	d115      	bne.n	800297a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d027      	beq.n	80029b8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002970:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002978:	e01e      	b.n	80029b8 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800298e:	d004      	beq.n	800299a <HAL_ADC_Start+0xba>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a2c      	ldr	r2, [pc, #176]	; (8002a48 <HAL_ADC_Start+0x168>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10e      	bne.n	80029b8 <HAL_ADC_Start+0xd8>
 800299a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c4:	d106      	bne.n	80029d4 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f023 0206 	bic.w	r2, r3, #6
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
 80029d2:	e002      	b.n	80029da <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	221c      	movs	r2, #28
 80029e8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_ADC_Start+0x164>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d010      	beq.n	8002a18 <HAL_ADC_Start+0x138>
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_ADC_Start+0x164>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d00a      	beq.n	8002a18 <HAL_ADC_Start+0x138>
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_ADC_Start+0x164>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2b09      	cmp	r3, #9
 8002a0c:	d004      	beq.n	8002a18 <HAL_ADC_Start+0x138>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a16:	d10f      	bne.n	8002a38 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0204 	orr.w	r2, r2, #4
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	e006      	b.n	8002a38 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a32:	e001      	b.n	8002a38 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	50000300 	.word	0x50000300
 8002a48:	50000100 	.word	0x50000100

08002a4c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 80b9 	bne.w	8002bde <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_Start_DMA+0x2e>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0b4      	b.n	8002be4 <HAL_ADC_Start_DMA+0x198>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002a82:	4b5a      	ldr	r3, [pc, #360]	; (8002bec <HAL_ADC_Start_DMA+0x1a0>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 80a0 	bne.w	8002bd0 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fd11 	bl	80034b8 <ADC_Enable>
 8002a96:	4603      	mov	r3, r0
 8002a98:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 8092 	bne.w	8002bc6 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ab6:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <HAL_ADC_Start_DMA+0x1a0>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <HAL_ADC_Start_DMA+0x80>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aca:	d115      	bne.n	8002af8 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d027      	beq.n	8002b36 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002af6:	e01e      	b.n	8002b36 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b0c:	d004      	beq.n	8002b18 <HAL_ADC_Start_DMA+0xcc>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <HAL_ADC_Start_DMA+0x1a4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10e      	bne.n	8002b36 <HAL_ADC_Start_DMA+0xea>
 8002b18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b42:	d106      	bne.n	8002b52 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f023 0206 	bic.w	r2, r3, #6
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	4a23      	ldr	r2, [pc, #140]	; (8002bf4 <HAL_ADC_Start_DMA+0x1a8>)
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <HAL_ADC_Start_DMA+0x1ac>)
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_ADC_Start_DMA+0x1b0>)
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	221c      	movs	r2, #28
 8002b7e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0210 	orr.w	r2, r2, #16
 8002b8e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3340      	adds	r3, #64	; 0x40
 8002baa:	4619      	mov	r1, r3
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f000 fea4 	bl	80038fc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0204 	orr.w	r2, r2, #4
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	e00d      	b.n	8002be2 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bce:	e008      	b.n	8002be2 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bdc:	e001      	b.n	8002be2 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	50000300 	.word	0x50000300
 8002bf0:	50000100 	.word	0x50000100
 8002bf4:	080033ed 	.word	0x080033ed
 8002bf8:	08003467 	.word	0x08003467
 8002bfc:	08003483 	.word	0x08003483

08002c00 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_ADCEx_Calibration_Start+0x1c>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e05f      	b.n	8002cdc <HAL_ADCEx_Calibration_Start+0xdc>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fcab 	bl	8003580 <ADC_Disable>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d14e      	bne.n	8002cd2 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002c48:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c5e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c6e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002c70:	f7ff fc60 	bl	8002534 <HAL_GetTick>
 8002c74:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002c76:	e01c      	b.n	8002cb2 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c78:	f7ff fc5c 	bl	8002534 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b0a      	cmp	r3, #10
 8002c84:	d915      	bls.n	8002cb2 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c94:	d10d      	bne.n	8002cb2 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f023 0312 	bic.w	r3, r3, #18
 8002c9e:	f043 0210 	orr.w	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e014      	b.n	8002cdc <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc0:	d0da      	beq.n	8002c78 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b09b      	sub	sp, #108	; 0x6c
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x22>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e2a1      	b.n	800324a <HAL_ADC_ConfigChannel+0x566>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 8285 	bne.w	8003228 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d81c      	bhi.n	8002d60 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	461a      	mov	r2, r3
 8002d3a:	231f      	movs	r3, #31
 8002d3c:	4093      	lsls	r3, r2
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	4019      	ands	r1, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa00 f203 	lsl.w	r2, r0, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d5e:	e063      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b09      	cmp	r3, #9
 8002d66:	d81e      	bhi.n	8002da6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	3b1e      	subs	r3, #30
 8002d7c:	221f      	movs	r2, #31
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	4019      	ands	r1, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	3b1e      	subs	r3, #30
 8002d98:	fa00 f203 	lsl.w	r2, r0, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
 8002da4:	e040      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b0e      	cmp	r3, #14
 8002dac:	d81e      	bhi.n	8002dec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	3b3c      	subs	r3, #60	; 0x3c
 8002dc2:	221f      	movs	r2, #31
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4019      	ands	r1, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	3b3c      	subs	r3, #60	; 0x3c
 8002dde:	fa00 f203 	lsl.w	r2, r0, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	639a      	str	r2, [r3, #56]	; 0x38
 8002dea:	e01d      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	3b5a      	subs	r3, #90	; 0x5a
 8002e00:	221f      	movs	r2, #31
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4019      	ands	r1, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	3b5a      	subs	r3, #90	; 0x5a
 8002e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 80e5 	bne.w	8003002 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b09      	cmp	r3, #9
 8002e3e:	d91c      	bls.n	8002e7a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6999      	ldr	r1, [r3, #24]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b1e      	subs	r3, #30
 8002e52:	2207      	movs	r2, #7
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	4019      	ands	r1, r3
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6898      	ldr	r0, [r3, #8]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b1e      	subs	r3, #30
 8002e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	619a      	str	r2, [r3, #24]
 8002e78:	e019      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6959      	ldr	r1, [r3, #20]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4019      	ands	r1, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6898      	ldr	r0, [r3, #8]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	08db      	lsrs	r3, r3, #3
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d84f      	bhi.n	8002f70 <HAL_ADC_ConfigChannel+0x28c>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <HAL_ADC_ConfigChannel+0x1f4>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002f0b 	.word	0x08002f0b
 8002ee0:	08002f2d 	.word	0x08002f2d
 8002ee4:	08002f4f 	.word	0x08002f4f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eee:	4b9c      	ldr	r3, [pc, #624]	; (8003160 <HAL_ADC_ConfigChannel+0x47c>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	0691      	lsls	r1, r2, #26
 8002ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002efa:	430a      	orrs	r2, r1
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f06:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f08:	e07b      	b.n	8003002 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f10:	4b93      	ldr	r3, [pc, #588]	; (8003160 <HAL_ADC_ConfigChannel+0x47c>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	0691      	lsls	r1, r2, #26
 8002f1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f28:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f2a:	e06a      	b.n	8003002 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f32:	4b8b      	ldr	r3, [pc, #556]	; (8003160 <HAL_ADC_ConfigChannel+0x47c>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	0691      	lsls	r1, r2, #26
 8002f3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f4a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f4c:	e059      	b.n	8003002 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f54:	4b82      	ldr	r3, [pc, #520]	; (8003160 <HAL_ADC_ConfigChannel+0x47c>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	0691      	lsls	r1, r2, #26
 8002f5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f60:	430a      	orrs	r2, r1
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f6c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f6e:	e048      	b.n	8003002 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	069b      	lsls	r3, r3, #26
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d107      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f92:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	069b      	lsls	r3, r3, #26
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fb6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	069b      	lsls	r3, r3, #26
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d107      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fda:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	069b      	lsls	r3, r3, #26
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ffe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003000:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d108      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x33e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x33e>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_ADC_ConfigChannel+0x340>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	f040 810a 	bne.w	800323e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d00f      	beq.n	8003052 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43da      	mvns	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	400a      	ands	r2, r1
 800304c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003050:	e049      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2201      	movs	r2, #1
 8003060:	409a      	lsls	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d91c      	bls.n	80030ae <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6999      	ldr	r1, [r3, #24]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	3b1b      	subs	r3, #27
 8003086:	2207      	movs	r2, #7
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	4019      	ands	r1, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6898      	ldr	r0, [r3, #8]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	3b1b      	subs	r3, #27
 80030a0:	fa00 f203 	lsl.w	r2, r0, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	619a      	str	r2, [r3, #24]
 80030ac:	e01b      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6959      	ldr	r1, [r3, #20]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	2207      	movs	r2, #7
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	4019      	ands	r1, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6898      	ldr	r0, [r3, #8]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	fa00 f203 	lsl.w	r2, r0, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e6:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_ADC_ConfigChannel+0x480>)
 80030e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d105      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003102:	2b11      	cmp	r3, #17
 8003104:	d105      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003116:	2b12      	cmp	r3, #18
 8003118:	f040 8091 	bne.w	800323e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800311c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 808a 	bne.w	800323e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003132:	d102      	bne.n	800313a <HAL_ADC_ConfigChannel+0x456>
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_ADC_ConfigChannel+0x484>)
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e002      	b.n	8003140 <HAL_ADC_ConfigChannel+0x45c>
 800313a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800313e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d10e      	bne.n	800316c <HAL_ADC_ConfigChannel+0x488>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_ADC_ConfigChannel+0x488>
 800315c:	2301      	movs	r3, #1
 800315e:	e006      	b.n	800316e <HAL_ADC_ConfigChannel+0x48a>
 8003160:	83fff000 	.word	0x83fff000
 8003164:	50000300 	.word	0x50000300
 8003168:	50000100 	.word	0x50000100
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d150      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003172:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003174:	2b00      	cmp	r3, #0
 8003176:	d010      	beq.n	800319a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d107      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x4b0>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x4b0>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_ADC_ConfigChannel+0x4b2>
 8003194:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d13c      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b10      	cmp	r3, #16
 80031a0:	d11d      	bne.n	80031de <HAL_ADC_ConfigChannel+0x4fa>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031aa:	d118      	bne.n	80031de <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <HAL_ADC_ConfigChannel+0x574>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a27      	ldr	r2, [pc, #156]	; (800325c <HAL_ADC_ConfigChannel+0x578>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0c9a      	lsrs	r2, r3, #18
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031ce:	e002      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f9      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031dc:	e02e      	b.n	800323c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b11      	cmp	r3, #17
 80031e4:	d10b      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x51a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ee:	d106      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80031f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031fc:	e01e      	b.n	800323c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b12      	cmp	r3, #18
 8003204:	d11a      	bne.n	800323c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800320e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003210:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003212:	e013      	b.n	800323c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003226:	e00a      	b.n	800323e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800323a:	e000      	b.n	800323e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800323c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003246:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800324a:	4618      	mov	r0, r3
 800324c:	376c      	adds	r7, #108	; 0x6c
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000004 	.word	0x20000004
 800325c:	431bde83 	.word	0x431bde83

08003260 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003260:	b480      	push	{r7}
 8003262:	b099      	sub	sp, #100	; 0x64
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003278:	d102      	bne.n	8003280 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800327a:	4b5a      	ldr	r3, [pc, #360]	; (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	e002      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8003280:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003284:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0a2      	b.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800329a:	2302      	movs	r3, #2
 800329c:	e09b      	b.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d17f      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d179      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032c0:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80032c2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d040      	beq.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032de:	035b      	lsls	r3, r3, #13
 80032e0:	430b      	orrs	r3, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d108      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d15c      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800332a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800332c:	2b00      	cmp	r3, #0
 800332e:	d14b      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003338:	f023 030f 	bic.w	r3, r3, #15
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	6811      	ldr	r1, [r2, #0]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	6892      	ldr	r2, [r2, #8]
 8003344:	430a      	orrs	r2, r1
 8003346:	431a      	orrs	r2, r3
 8003348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800334c:	e03c      	b.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800334e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003358:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d108      	bne.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d123      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d107      	bne.n	800339c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800339c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d112      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80033a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033aa:	f023 030f 	bic.w	r3, r3, #15
 80033ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033b0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033b2:	e009      	b.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033c6:	e000      	b.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033c8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80033d6:	4618      	mov	r0, r3
 80033d8:	3764      	adds	r7, #100	; 0x64
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	50000100 	.word	0x50000100
 80033e8:	50000300 	.word	0x50000300

080033ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	d126      	bne.n	8003454 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800341c:	2b00      	cmp	r3, #0
 800341e:	d115      	bne.n	800344c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003424:	2b00      	cmp	r3, #0
 8003426:	d111      	bne.n	800344c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7fe f9fb 	bl	8001848 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003452:	e004      	b.n	800345e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7ff f88d 	bl	8002594 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7ff f87d 	bl	80025a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d108      	bne.n	80034e4 <ADC_Enable+0x2c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <ADC_Enable+0x2c>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <ADC_Enable+0x2e>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d143      	bne.n	8003572 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	4b22      	ldr	r3, [pc, #136]	; (800357c <ADC_Enable+0xc4>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0210 	orr.w	r2, r3, #16
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f043 0201 	orr.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e02f      	b.n	8003574 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003524:	f7ff f806 	bl	8002534 <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800352a:	e01b      	b.n	8003564 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800352c:	f7ff f802 	bl	8002534 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d914      	bls.n	8003564 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d00d      	beq.n	8003564 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e007      	b.n	8003574 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d1dc      	bne.n	800352c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	8000003f 	.word	0x8000003f

08003580 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d108      	bne.n	80035ac <ADC_Disable+0x2c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <ADC_Disable+0x2c>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <ADC_Disable+0x2e>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d047      	beq.n	8003642 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 030d 	and.w	r3, r3, #13
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d10f      	bne.n	80035e0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0202 	orr.w	r2, r2, #2
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2203      	movs	r2, #3
 80035d6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80035d8:	f7fe ffac 	bl	8002534 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035de:	e029      	b.n	8003634 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f043 0210 	orr.w	r2, r3, #16
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e023      	b.n	8003644 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035fc:	f7fe ff9a 	bl	8002534 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d914      	bls.n	8003634 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10d      	bne.n	8003634 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f043 0210 	orr.w	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d0dc      	beq.n	80035fc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003668:	4013      	ands	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367e:	4a04      	ldr	r2, [pc, #16]	; (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	60d3      	str	r3, [r2, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <__NVIC_GetPriorityGrouping+0x18>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 0307 	and.w	r3, r3, #7
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	db0b      	blt.n	80036da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	4907      	ldr	r1, [pc, #28]	; (80036e8 <__NVIC_EnableIRQ+0x38>)
 80036ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2001      	movs	r0, #1
 80036d2:	fa00 f202 	lsl.w	r2, r0, r2
 80036d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000e100 	.word	0xe000e100

080036ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db0a      	blt.n	8003716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	490c      	ldr	r1, [pc, #48]	; (8003738 <__NVIC_SetPriority+0x4c>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	440b      	add	r3, r1
 8003710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003714:	e00a      	b.n	800372c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <__NVIC_SetPriority+0x50>)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3b04      	subs	r3, #4
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	440b      	add	r3, r1
 800372a:	761a      	strb	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f1c3 0307 	rsb	r3, r3, #7
 800375a:	2b04      	cmp	r3, #4
 800375c:	bf28      	it	cs
 800375e:	2304      	movcs	r3, #4
 8003760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3304      	adds	r3, #4
 8003766:	2b06      	cmp	r3, #6
 8003768:	d902      	bls.n	8003770 <NVIC_EncodePriority+0x30>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3b03      	subs	r3, #3
 800376e:	e000      	b.n	8003772 <NVIC_EncodePriority+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	401a      	ands	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43d9      	mvns	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	4313      	orrs	r3, r2
         );
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b8:	d301      	bcc.n	80037be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ba:	2301      	movs	r3, #1
 80037bc:	e00f      	b.n	80037de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037be:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <SysTick_Config+0x40>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c6:	210f      	movs	r1, #15
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037cc:	f7ff ff8e 	bl	80036ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <SysTick_Config+0x40>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <SysTick_Config+0x40>)
 80037d8:	2207      	movs	r2, #7
 80037da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	e000e010 	.word	0xe000e010

080037ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff29 	bl	800364c <__NVIC_SetPriorityGrouping>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003814:	f7ff ff3e 	bl	8003694 <__NVIC_GetPriorityGrouping>
 8003818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f7ff ff8e 	bl	8003740 <NVIC_EncodePriority>
 8003824:	4602      	mov	r2, r0
 8003826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff5d 	bl	80036ec <__NVIC_SetPriority>
}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff31 	bl	80036b0 <__NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffa2 	bl	80037a8 <SysTick_Config>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e037      	b.n	80038f4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800389a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800389e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80038a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f940 	bl	8003b5c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}  
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_DMA_Start_IT+0x20>
 8003918:	2302      	movs	r3, #2
 800391a:	e04a      	b.n	80039b2 <HAL_DMA_Start_IT+0xb6>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800392a:	2b01      	cmp	r3, #1
 800392c:	d13a      	bne.n	80039a4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f8d4 	bl	8003b00 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 020e 	orr.w	r2, r2, #14
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e00f      	b.n	8003992 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 020a 	orr.w	r2, r2, #10
 8003980:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0204 	bic.w	r2, r2, #4
 8003990:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e005      	b.n	80039b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
 80039ae:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2204      	movs	r2, #4
 80039d8:	409a      	lsls	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d024      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x72>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01f      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d107      	bne.n	8003a0a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0204 	bic.w	r2, r2, #4
 8003a08:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	2104      	movs	r1, #4
 8003a14:	fa01 f202 	lsl.w	r2, r1, r2
 8003a18:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d06a      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003a2a:	e065      	b.n	8003af8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	2202      	movs	r2, #2
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02c      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdc>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d027      	beq.n	8003a96 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 020a 	bic.w	r2, r2, #10
 8003a62:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	2102      	movs	r1, #2
 8003a76:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d035      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003a94:	e030      	b.n	8003af8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d028      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x13e>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d023      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020e 	bic.w	r2, r2, #14
 8003abe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ace:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4798      	blx	r3
    }
  }
}  
 8003af6:	e7ff      	b.n	8003af8 <HAL_DMA_IRQHandler+0x13e>
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d108      	bne.n	8003b40 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b3e:	e007      	b.n	8003b50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <DMA_CalcBaseAndBitshift+0x34>)
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <DMA_CalcBaseAndBitshift+0x38>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	009a      	lsls	r2, r3, #2
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <DMA_CalcBaseAndBitshift+0x3c>)
 8003b80:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	bffdfff8 	.word	0xbffdfff8
 8003b94:	cccccccd 	.word	0xcccccccd
 8003b98:	40020000 	.word	0x40020000

08003b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003baa:	e14e      	b.n	8003e4a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8140 	beq.w	8003e44 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d005      	beq.n	8003bdc <HAL_GPIO_Init+0x40>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d130      	bne.n	8003c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c12:	2201      	movs	r2, #1
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0201 	and.w	r2, r3, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d017      	beq.n	8003c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d123      	bne.n	8003cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	08da      	lsrs	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3208      	adds	r2, #8
 8003c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	08da      	lsrs	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3208      	adds	r2, #8
 8003cc8:	6939      	ldr	r1, [r7, #16]
 8003cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0203 	and.w	r2, r3, #3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 809a 	beq.w	8003e44 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d10:	4b55      	ldr	r3, [pc, #340]	; (8003e68 <HAL_GPIO_Init+0x2cc>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	4a54      	ldr	r2, [pc, #336]	; (8003e68 <HAL_GPIO_Init+0x2cc>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6193      	str	r3, [r2, #24]
 8003d1c:	4b52      	ldr	r3, [pc, #328]	; (8003e68 <HAL_GPIO_Init+0x2cc>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d28:	4a50      	ldr	r2, [pc, #320]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	089b      	lsrs	r3, r3, #2
 8003d2e:	3302      	adds	r3, #2
 8003d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	220f      	movs	r2, #15
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d52:	d013      	beq.n	8003d7c <HAL_GPIO_Init+0x1e0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a46      	ldr	r2, [pc, #280]	; (8003e70 <HAL_GPIO_Init+0x2d4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00d      	beq.n	8003d78 <HAL_GPIO_Init+0x1dc>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a45      	ldr	r2, [pc, #276]	; (8003e74 <HAL_GPIO_Init+0x2d8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <HAL_GPIO_Init+0x1d8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a44      	ldr	r2, [pc, #272]	; (8003e78 <HAL_GPIO_Init+0x2dc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <HAL_GPIO_Init+0x1d4>
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e006      	b.n	8003d7e <HAL_GPIO_Init+0x1e2>
 8003d70:	2305      	movs	r3, #5
 8003d72:	e004      	b.n	8003d7e <HAL_GPIO_Init+0x1e2>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e002      	b.n	8003d7e <HAL_GPIO_Init+0x1e2>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <HAL_GPIO_Init+0x1e2>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	f002 0203 	and.w	r2, r2, #3
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	4093      	lsls	r3, r2
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d8e:	4937      	ldr	r1, [pc, #220]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	3302      	adds	r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d9c:	4b37      	ldr	r3, [pc, #220]	; (8003e7c <HAL_GPIO_Init+0x2e0>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dc0:	4a2e      	ldr	r2, [pc, #184]	; (8003e7c <HAL_GPIO_Init+0x2e0>)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_GPIO_Init+0x2e0>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dea:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <HAL_GPIO_Init+0x2e0>)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003df0:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_GPIO_Init+0x2e0>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_GPIO_Init+0x2e0>)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e1a:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <HAL_GPIO_Init+0x2e0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e3e:	4a0f      	ldr	r2, [pc, #60]	; (8003e7c <HAL_GPIO_Init+0x2e0>)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3301      	adds	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f47f aea9 	bne.w	8003bac <HAL_GPIO_Init+0x10>
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	48000400 	.word	0x48000400
 8003e74:	48000800 	.word	0x48000800
 8003e78:	48000c00 	.word	0x48000c00
 8003e7c:	40010400 	.word	0x40010400

08003e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e9c:	e002      	b.n	8003ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e081      	b.n	8003fc6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd fec4 	bl	8001c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2224      	movs	r2, #36	; 0x24
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	e006      	b.n	8003f38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d104      	bne.n	8003f4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69d9      	ldr	r1, [r3, #28]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	460b      	mov	r3, r1
 8003fde:	817b      	strh	r3, [r7, #10]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	f040 80da 	bne.w	80041a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2C_Master_Transmit+0x30>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0d3      	b.n	80041a8 <HAL_I2C_Master_Transmit+0x1d8>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004008:	f7fe fa94 	bl	8002534 <HAL_GetTick>
 800400c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	2319      	movs	r3, #25
 8004014:	2201      	movs	r2, #1
 8004016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f8f0 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0be      	b.n	80041a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2221      	movs	r2, #33	; 0x21
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2210      	movs	r2, #16
 8004036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	893a      	ldrh	r2, [r7, #8]
 800404a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	2bff      	cmp	r3, #255	; 0xff
 800405a:	d90e      	bls.n	800407a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	22ff      	movs	r2, #255	; 0xff
 8004060:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	b2da      	uxtb	r2, r3
 8004068:	8979      	ldrh	r1, [r7, #10]
 800406a:	4b51      	ldr	r3, [pc, #324]	; (80041b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fa7e 	bl	8004574 <I2C_TransferConfig>
 8004078:	e06c      	b.n	8004154 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	b2da      	uxtb	r2, r3
 800408a:	8979      	ldrh	r1, [r7, #10]
 800408c:	4b48      	ldr	r3, [pc, #288]	; (80041b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fa6d 	bl	8004574 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800409a:	e05b      	b.n	8004154 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	6a39      	ldr	r1, [r7, #32]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f8fc 	bl	800429e <I2C_WaitOnTXISFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e07b      	b.n	80041a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d034      	beq.n	8004154 <HAL_I2C_Master_Transmit+0x184>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d130      	bne.n	8004154 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2200      	movs	r2, #0
 80040fa:	2180      	movs	r1, #128	; 0x80
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f87f 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e04d      	b.n	80041a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2bff      	cmp	r3, #255	; 0xff
 8004114:	d90e      	bls.n	8004134 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	b2da      	uxtb	r2, r3
 8004122:	8979      	ldrh	r1, [r7, #10]
 8004124:	2300      	movs	r3, #0
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fa21 	bl	8004574 <I2C_TransferConfig>
 8004132:	e00f      	b.n	8004154 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	b2da      	uxtb	r2, r3
 8004144:	8979      	ldrh	r1, [r7, #10]
 8004146:	2300      	movs	r3, #0
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fa10 	bl	8004574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d19e      	bne.n	800409c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	6a39      	ldr	r1, [r7, #32]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f8e2 	bl	800432c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e01a      	b.n	80041a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2220      	movs	r2, #32
 8004178:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8004186:	400b      	ands	r3, r1
 8004188:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	80002000 	.word	0x80002000
 80041b4:	fe00e800 	.word	0xfe00e800

080041b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d103      	bne.n	80041d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2200      	movs	r2, #0
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d007      	beq.n	80041f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	619a      	str	r2, [r3, #24]
  }
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004210:	e031      	b.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004218:	d02d      	beq.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421a:	f7fe f98b 	bl	8002534 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d122      	bne.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	429a      	cmp	r2, r3
 800424c:	d113      	bne.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e00f      	b.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	429a      	cmp	r2, r3
 8004292:	d0be      	beq.n	8004212 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042aa:	e033      	b.n	8004314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f87f 	bl	80043b4 <I2C_IsErrorOccurred>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e031      	b.n	8004324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c6:	d025      	beq.n	8004314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c8:	f7fe f934 	bl	8002534 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11a      	bne.n	8004314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d013      	beq.n	8004314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e007      	b.n	8004324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b02      	cmp	r3, #2
 8004320:	d1c4      	bne.n	80042ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004338:	e02f      	b.n	800439a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f838 	bl	80043b4 <I2C_IsErrorOccurred>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e02d      	b.n	80043aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434e:	f7fe f8f1 	bl	8002534 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11a      	bne.n	800439a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b20      	cmp	r3, #32
 8004370:	d013      	beq.n	800439a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e007      	b.n	80043aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d1c8      	bne.n	800433a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08a      	sub	sp, #40	; 0x28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d068      	beq.n	80044b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2210      	movs	r2, #16
 80043e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043e8:	e049      	b.n	800447e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f0:	d045      	beq.n	800447e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fe f89f 	bl	8002534 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <I2C_IsErrorOccurred+0x54>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d13a      	bne.n	800447e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004412:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800441a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442a:	d121      	bne.n	8004470 <I2C_IsErrorOccurred+0xbc>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004432:	d01d      	beq.n	8004470 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	2b20      	cmp	r3, #32
 8004438:	d01a      	beq.n	8004470 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004448:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800444a:	f7fe f873 	bl	8002534 <HAL_GetTick>
 800444e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004450:	e00e      	b.n	8004470 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004452:	f7fe f86f 	bl	8002534 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b19      	cmp	r3, #25
 800445e:	d907      	bls.n	8004470 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	f043 0320 	orr.w	r3, r3, #32
 8004466:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800446e:	e006      	b.n	800447e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b20      	cmp	r3, #32
 800447c:	d1e9      	bne.n	8004452 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b20      	cmp	r3, #32
 800448a:	d003      	beq.n	8004494 <I2C_IsErrorOccurred+0xe0>
 800448c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0aa      	beq.n	80043ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2220      	movs	r2, #32
 80044a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f043 0304 	orr.w	r3, r3, #4
 80044aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f043 0308 	orr.w	r3, r3, #8
 80044ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01c      	beq.n	8004562 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7ff fe45 	bl	80041b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <I2C_IsErrorOccurred+0x1bc>)
 800453a:	400b      	ands	r3, r1
 800453c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004566:	4618      	mov	r0, r3
 8004568:	3728      	adds	r7, #40	; 0x28
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	fe00e800 	.word	0xfe00e800

08004574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	817b      	strh	r3, [r7, #10]
 8004582:	4613      	mov	r3, r2
 8004584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004586:	897b      	ldrh	r3, [r7, #10]
 8004588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800458c:	7a7b      	ldrb	r3, [r7, #9]
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004594:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	4313      	orrs	r3, r2
 800459e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	0d5b      	lsrs	r3, r3, #21
 80045ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <I2C_TransferConfig+0x60>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	43db      	mvns	r3, r3
 80045b8:	ea02 0103 	and.w	r1, r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	03ff63ff 	.word	0x03ff63ff

080045d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d138      	bne.n	8004660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e032      	b.n	8004662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	; 0x24
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800462a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6819      	ldr	r1, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e000      	b.n	8004662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b20      	cmp	r3, #32
 8004682:	d139      	bne.n	80046f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800468e:	2302      	movs	r3, #2
 8004690:	e033      	b.n	80046fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2224      	movs	r2, #36	; 0x24
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800470e:	af00      	add	r7, sp, #0
 8004710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004714:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004718:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800471a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f001 b823 	b.w	8005774 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 817d 	beq.w	8004a3e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004744:	4bbc      	ldr	r3, [pc, #752]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b04      	cmp	r3, #4
 800474e:	d00c      	beq.n	800476a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004750:	4bb9      	ldr	r3, [pc, #740]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b08      	cmp	r3, #8
 800475a:	d15c      	bne.n	8004816 <HAL_RCC_OscConfig+0x10e>
 800475c:	4bb6      	ldr	r3, [pc, #728]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d155      	bne.n	8004816 <HAL_RCC_OscConfig+0x10e>
 800476a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800476e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800477e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d102      	bne.n	800479c <HAL_RCC_OscConfig+0x94>
 8004796:	4ba8      	ldr	r3, [pc, #672]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	e015      	b.n	80047c8 <HAL_RCC_OscConfig+0xc0>
 800479c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80047b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80047b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80047c4:	4b9c      	ldr	r3, [pc, #624]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80047d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80047d4:	fa92 f2a2 	rbit	r2, r2
 80047d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80047dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80047e0:	fab2 f282 	clz	r2, r2
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	f042 0220 	orr.w	r2, r2, #32
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	f002 021f 	and.w	r2, r2, #31
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f202 	lsl.w	r2, r1, r2
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 811f 	beq.w	8004a3c <HAL_RCC_OscConfig+0x334>
 80047fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f040 8116 	bne.w	8004a3c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f000 bfaf 	b.w	8005774 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0x12e>
 8004828:	4b83      	ldr	r3, [pc, #524]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a82      	ldr	r2, [pc, #520]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e036      	b.n	80048a4 <HAL_RCC_OscConfig+0x19c>
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x158>
 8004846:	4b7c      	ldr	r3, [pc, #496]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7b      	ldr	r2, [pc, #492]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 800484c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b79      	ldr	r3, [pc, #484]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a78      	ldr	r2, [pc, #480]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e021      	b.n	80048a4 <HAL_RCC_OscConfig+0x19c>
 8004860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004864:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x184>
 8004872:	4b71      	ldr	r3, [pc, #452]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a70      	ldr	r2, [pc, #448]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b6e      	ldr	r3, [pc, #440]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6d      	ldr	r2, [pc, #436]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0x19c>
 800488c:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a69      	ldr	r2, [pc, #420]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 8004892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b67      	ldr	r3, [pc, #412]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a66      	ldr	r2, [pc, #408]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 800489e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048a4:	4b64      	ldr	r3, [pc, #400]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	f023 020f 	bic.w	r2, r3, #15
 80048ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	495f      	ldr	r1, [pc, #380]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d059      	beq.n	8004982 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fd fe31 	bl	8002534 <HAL_GetTick>
 80048d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fd fe2c 	bl	8002534 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b64      	cmp	r3, #100	; 0x64
 80048e6:	d902      	bls.n	80048ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	f000 bf43 	b.w	8005774 <HAL_RCC_OscConfig+0x106c>
 80048ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004902:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <HAL_RCC_OscConfig+0x218>
 800491a:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	e015      	b.n	800494c <HAL_RCC_OscConfig+0x244>
 8004920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004924:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004938:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800493c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004948:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004950:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004954:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004958:	fa92 f2a2 	rbit	r2, r2
 800495c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004960:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004964:	fab2 f282 	clz	r2, r2
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	f042 0220 	orr.w	r2, r2, #32
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	f002 021f 	and.w	r2, r2, #31
 8004974:	2101      	movs	r1, #1
 8004976:	fa01 f202 	lsl.w	r2, r1, r2
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0ab      	beq.n	80048d8 <HAL_RCC_OscConfig+0x1d0>
 8004980:	e05d      	b.n	8004a3e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004982:	f7fd fdd7 	bl	8002534 <HAL_GetTick>
 8004986:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800498c:	f7fd fdd2 	bl	8002534 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b64      	cmp	r3, #100	; 0x64
 800499a:	d902      	bls.n	80049a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	f000 bee9 	b.w	8005774 <HAL_RCC_OscConfig+0x106c>
 80049a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80049b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d102      	bne.n	80049d4 <HAL_RCC_OscConfig+0x2cc>
 80049ce:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	e015      	b.n	8004a00 <HAL_RCC_OscConfig+0x2f8>
 80049d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80049e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80049f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80049fc:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <HAL_RCC_OscConfig+0x330>)
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a04:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004a08:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a0c:	fa92 f2a2 	rbit	r2, r2
 8004a10:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004a14:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a18:	fab2 f282 	clz	r2, r2
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	f042 0220 	orr.w	r2, r2, #32
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	f002 021f 	and.w	r2, r2, #31
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1ab      	bne.n	800498c <HAL_RCC_OscConfig+0x284>
 8004a34:	e003      	b.n	8004a3e <HAL_RCC_OscConfig+0x336>
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 817d 	beq.w	8004d4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a54:	4ba6      	ldr	r3, [pc, #664]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 030c 	and.w	r3, r3, #12
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a60:	4ba3      	ldr	r3, [pc, #652]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d172      	bne.n	8004b52 <HAL_RCC_OscConfig+0x44a>
 8004a6c:	4ba0      	ldr	r3, [pc, #640]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d16c      	bne.n	8004b52 <HAL_RCC_OscConfig+0x44a>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004a8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d102      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x3a0>
 8004aa2:	4b93      	ldr	r3, [pc, #588]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	e013      	b.n	8004ad0 <HAL_RCC_OscConfig+0x3c8>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004ab2:	fa93 f3a3 	rbit	r3, r3
 8004ab6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004aba:	2302      	movs	r3, #2
 8004abc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ac0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ac4:	fa93 f3a3 	rbit	r3, r3
 8004ac8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004acc:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004ad6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004ada:	fa92 f2a2 	rbit	r2, r2
 8004ade:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004ae2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004ae6:	fab2 f282 	clz	r2, r2
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	f042 0220 	orr.w	r2, r2, #32
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	f002 021f 	and.w	r2, r2, #31
 8004af6:	2101      	movs	r1, #1
 8004af8:	fa01 f202 	lsl.w	r2, r1, r2
 8004afc:	4013      	ands	r3, r2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <HAL_RCC_OscConfig+0x410>
 8004b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d002      	beq.n	8004b18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f000 be2e 	b.w	8005774 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b18:	4b75      	ldr	r3, [pc, #468]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	21f8      	movs	r1, #248	; 0xf8
 8004b2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b36:	fa91 f1a1 	rbit	r1, r1
 8004b3a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004b3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b42:	fab1 f181 	clz	r1, r1
 8004b46:	b2c9      	uxtb	r1, r1
 8004b48:	408b      	lsls	r3, r1
 8004b4a:	4969      	ldr	r1, [pc, #420]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b50:	e0fd      	b.n	8004d4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8088 	beq.w	8004c74 <HAL_RCC_OscConfig+0x56c>
 8004b64:	2301      	movs	r3, #1
 8004b66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004b76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7fd fcd0 	bl	8002534 <HAL_GetTick>
 8004b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b98:	e00a      	b.n	8004bb0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b9a:	f7fd fccb 	bl	8002534 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d902      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	f000 bde2 	b.w	8005774 <HAL_RCC_OscConfig+0x106c>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004bba:	fa93 f3a3 	rbit	r3, r3
 8004bbe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004bc2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc6:	fab3 f383 	clz	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d102      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4d8>
 8004bda:	4b45      	ldr	r3, [pc, #276]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	e013      	b.n	8004c08 <HAL_RCC_OscConfig+0x500>
 8004be0:	2302      	movs	r3, #2
 8004be2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004bf8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c04:	4b3a      	ldr	r3, [pc, #232]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004c0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c12:	fa92 f2a2 	rbit	r2, r2
 8004c16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004c1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c1e:	fab2 f282 	clz	r2, r2
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	f042 0220 	orr.w	r2, r2, #32
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	f002 021f 	and.w	r2, r2, #31
 8004c2e:	2101      	movs	r1, #1
 8004c30:	fa01 f202 	lsl.w	r2, r1, r2
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0af      	beq.n	8004b9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	21f8      	movs	r1, #248	; 0xf8
 8004c50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c58:	fa91 f1a1 	rbit	r1, r1
 8004c5c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004c60:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c64:	fab1 f181 	clz	r1, r1
 8004c68:	b2c9      	uxtb	r1, r1
 8004c6a:	408b      	lsls	r3, r1
 8004c6c:	4920      	ldr	r1, [pc, #128]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
 8004c72:	e06c      	b.n	8004d4e <HAL_RCC_OscConfig+0x646>
 8004c74:	2301      	movs	r3, #1
 8004c76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c7e:	fa93 f3a3 	rbit	r3, r3
 8004c82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004c86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fc48 	bl	8002534 <HAL_GetTick>
 8004ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004caa:	f7fd fc43 	bl	8002534 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d902      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	f000 bd5a 	b.w	8005774 <HAL_RCC_OscConfig+0x106c>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d104      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x5ec>
 8004cea:	4b01      	ldr	r3, [pc, #4]	; (8004cf0 <HAL_RCC_OscConfig+0x5e8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	e015      	b.n	8004d1c <HAL_RCC_OscConfig+0x614>
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cfe:	fa93 f3a3 	rbit	r3, r3
 8004d02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d06:	2302      	movs	r3, #2
 8004d08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d18:	4bc8      	ldr	r3, [pc, #800]	; (800503c <HAL_RCC_OscConfig+0x934>)
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004d22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d26:	fa92 f2a2 	rbit	r2, r2
 8004d2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004d2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d32:	fab2 f282 	clz	r2, r2
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	f042 0220 	orr.w	r2, r2, #32
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	f002 021f 	and.w	r2, r2, #31
 8004d42:	2101      	movs	r1, #1
 8004d44:	fa01 f202 	lsl.w	r2, r1, r2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1ad      	bne.n	8004caa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 8110 	beq.w	8004f84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d079      	beq.n	8004e68 <HAL_RCC_OscConfig+0x760>
 8004d74:	2301      	movs	r3, #1
 8004d76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	4bab      	ldr	r3, [pc, #684]	; (8005040 <HAL_RCC_OscConfig+0x938>)
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9e:	f7fd fbc9 	bl	8002534 <HAL_GetTick>
 8004da2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da8:	f7fd fbc4 	bl	8002534 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d902      	bls.n	8004dbe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	f000 bcdb 	b.w	8005774 <HAL_RCC_OscConfig+0x106c>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dc8:	fa93 f3a3 	rbit	r3, r3
 8004dcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004dd8:	2202      	movs	r2, #2
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	fa93 f2a3 	rbit	r2, r3
 8004dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	fa93 f2a3 	rbit	r2, r3
 8004e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e18:	4b88      	ldr	r3, [pc, #544]	; (800503c <HAL_RCC_OscConfig+0x934>)
 8004e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e24:	2102      	movs	r1, #2
 8004e26:	6019      	str	r1, [r3, #0]
 8004e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	fa93 f1a3 	rbit	r1, r3
 8004e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e3e:	6019      	str	r1, [r3, #0]
  return result;
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	fab3 f383 	clz	r3, r3
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0a0      	beq.n	8004da8 <HAL_RCC_OscConfig+0x6a0>
 8004e66:	e08d      	b.n	8004f84 <HAL_RCC_OscConfig+0x87c>
 8004e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	fa93 f2a3 	rbit	r2, r3
 8004e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e8a:	601a      	str	r2, [r3, #0]
  return result;
 8004e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e96:	fab3 f383 	clz	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4b68      	ldr	r3, [pc, #416]	; (8005040 <HAL_RCC_OscConfig+0x938>)
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eaa:	f7fd fb43 	bl	8002534 <HAL_GetTick>
 8004eae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb4:	f7fd fb3e 	bl	8002534 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d902      	bls.n	8004eca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	f000 bc55 	b.w	8005774 <HAL_RCC_OscConfig+0x106c>
 8004eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ece:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	fa93 f2a3 	rbit	r2, r3
 8004ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	fa93 f2a3 	rbit	r2, r3
 8004f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	fa93 f2a3 	rbit	r2, r3
 8004f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004f34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f36:	4b41      	ldr	r3, [pc, #260]	; (800503c <HAL_RCC_OscConfig+0x934>)
 8004f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f42:	2102      	movs	r1, #2
 8004f44:	6019      	str	r1, [r3, #0]
 8004f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	fa93 f1a3 	rbit	r1, r3
 8004f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f5c:	6019      	str	r1, [r3, #0]
  return result;
 8004f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	fab3 f383 	clz	r3, r3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d197      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 81a1 	beq.w	80052dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa0:	4b26      	ldr	r3, [pc, #152]	; (800503c <HAL_RCC_OscConfig+0x934>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d116      	bne.n	8004fda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	4b23      	ldr	r3, [pc, #140]	; (800503c <HAL_RCC_OscConfig+0x934>)
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	4a22      	ldr	r2, [pc, #136]	; (800503c <HAL_RCC_OscConfig+0x934>)
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	61d3      	str	r3, [r2, #28]
 8004fb8:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_RCC_OscConfig+0x934>)
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004fd2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fda:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <HAL_RCC_OscConfig+0x93c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d11a      	bne.n	800501c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fe6:	4b17      	ldr	r3, [pc, #92]	; (8005044 <HAL_RCC_OscConfig+0x93c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a16      	ldr	r2, [pc, #88]	; (8005044 <HAL_RCC_OscConfig+0x93c>)
 8004fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff2:	f7fd fa9f 	bl	8002534 <HAL_GetTick>
 8004ff6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffa:	e009      	b.n	8005010 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffc:	f7fd fa9a 	bl	8002534 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b64      	cmp	r3, #100	; 0x64
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e3b1      	b.n	8005774 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <HAL_RCC_OscConfig+0x93c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0ef      	beq.n	8004ffc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005020:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10d      	bne.n	8005048 <HAL_RCC_OscConfig+0x940>
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <HAL_RCC_OscConfig+0x934>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	4a02      	ldr	r2, [pc, #8]	; (800503c <HAL_RCC_OscConfig+0x934>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6213      	str	r3, [r2, #32]
 8005038:	e03c      	b.n	80050b4 <HAL_RCC_OscConfig+0x9ac>
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	10908120 	.word	0x10908120
 8005044:	40007000 	.word	0x40007000
 8005048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10c      	bne.n	8005072 <HAL_RCC_OscConfig+0x96a>
 8005058:	4bc1      	ldr	r3, [pc, #772]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	4ac0      	ldr	r2, [pc, #768]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	6213      	str	r3, [r2, #32]
 8005064:	4bbe      	ldr	r3, [pc, #760]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	4abd      	ldr	r2, [pc, #756]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	6213      	str	r3, [r2, #32]
 8005070:	e020      	b.n	80050b4 <HAL_RCC_OscConfig+0x9ac>
 8005072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b05      	cmp	r3, #5
 8005080:	d10c      	bne.n	800509c <HAL_RCC_OscConfig+0x994>
 8005082:	4bb7      	ldr	r3, [pc, #732]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	4ab6      	ldr	r2, [pc, #728]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 8005088:	f043 0304 	orr.w	r3, r3, #4
 800508c:	6213      	str	r3, [r2, #32]
 800508e:	4bb4      	ldr	r3, [pc, #720]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	4ab3      	ldr	r2, [pc, #716]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	6213      	str	r3, [r2, #32]
 800509a:	e00b      	b.n	80050b4 <HAL_RCC_OscConfig+0x9ac>
 800509c:	4bb0      	ldr	r3, [pc, #704]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	4aaf      	ldr	r2, [pc, #700]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6213      	str	r3, [r2, #32]
 80050a8:	4bad      	ldr	r3, [pc, #692]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	4aac      	ldr	r2, [pc, #688]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 80050ae:	f023 0304 	bic.w	r3, r3, #4
 80050b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8081 	beq.w	80051c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c6:	f7fd fa35 	bl	8002534 <HAL_GetTick>
 80050ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ce:	e00b      	b.n	80050e8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d0:	f7fd fa30 	bl	8002534 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e345      	b.n	8005774 <HAL_RCC_OscConfig+0x106c>
 80050e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80050f0:	2202      	movs	r2, #2
 80050f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	fa93 f2a3 	rbit	r2, r3
 8005102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005106:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005110:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005114:	2202      	movs	r2, #2
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	fa93 f2a3 	rbit	r2, r3
 8005126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800512e:	601a      	str	r2, [r3, #0]
  return result;
 8005130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005134:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005138:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f043 0302 	orr.w	r3, r3, #2
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d102      	bne.n	8005154 <HAL_RCC_OscConfig+0xa4c>
 800514e:	4b84      	ldr	r3, [pc, #528]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	e013      	b.n	800517c <HAL_RCC_OscConfig+0xa74>
 8005154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005158:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800515c:	2202      	movs	r2, #2
 800515e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005164:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	fa93 f2a3 	rbit	r2, r3
 800516e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005172:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	4b79      	ldr	r3, [pc, #484]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005180:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005184:	2102      	movs	r1, #2
 8005186:	6011      	str	r1, [r2, #0]
 8005188:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800518c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	fa92 f1a2 	rbit	r1, r2
 8005196:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800519a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800519e:	6011      	str	r1, [r2, #0]
  return result;
 80051a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	fab2 f282 	clz	r2, r2
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	f002 021f 	and.w	r2, r2, #31
 80051ba:	2101      	movs	r1, #1
 80051bc:	fa01 f202 	lsl.w	r2, r1, r2
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d084      	beq.n	80050d0 <HAL_RCC_OscConfig+0x9c8>
 80051c6:	e07f      	b.n	80052c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c8:	f7fd f9b4 	bl	8002534 <HAL_GetTick>
 80051cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d0:	e00b      	b.n	80051ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fd f9af 	bl	8002534 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e2c4      	b.n	8005774 <HAL_RCC_OscConfig+0x106c>
 80051ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80051f2:	2202      	movs	r2, #2
 80051f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	fa93 f2a3 	rbit	r2, r3
 8005204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005208:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005212:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005216:	2202      	movs	r2, #2
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	fa93 f2a3 	rbit	r2, r3
 8005228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800522c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005230:	601a      	str	r2, [r3, #0]
  return result;
 8005232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005236:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800523a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	b2db      	uxtb	r3, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f043 0302 	orr.w	r3, r3, #2
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d102      	bne.n	8005256 <HAL_RCC_OscConfig+0xb4e>
 8005250:	4b43      	ldr	r3, [pc, #268]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	e013      	b.n	800527e <HAL_RCC_OscConfig+0xb76>
 8005256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800525e:	2202      	movs	r2, #2
 8005260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005266:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	fa93 f2a3 	rbit	r2, r3
 8005270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005274:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	4b39      	ldr	r3, [pc, #228]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005282:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005286:	2102      	movs	r1, #2
 8005288:	6011      	str	r1, [r2, #0]
 800528a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800528e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	fa92 f1a2 	rbit	r1, r2
 8005298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800529c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052a0:	6011      	str	r1, [r2, #0]
  return result;
 80052a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	fab2 f282 	clz	r2, r2
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	f002 021f 	and.w	r2, r2, #31
 80052bc:	2101      	movs	r1, #1
 80052be:	fa01 f202 	lsl.w	r2, r1, r2
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d184      	bne.n	80051d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d105      	bne.n	80052dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	4a22      	ldr	r2, [pc, #136]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 80052d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8242 	beq.w	8005772 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ee:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <HAL_RCC_OscConfig+0xc58>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	f000 8213 	beq.w	8005722 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005300:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	2b02      	cmp	r3, #2
 800530a:	f040 8162 	bne.w	80055d2 <HAL_RCC_OscConfig+0xeca>
 800530e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005312:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005316:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800531a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005320:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	fa93 f2a3 	rbit	r2, r3
 800532a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005332:	601a      	str	r2, [r3, #0]
  return result;
 8005334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005338:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800533c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533e:	fab3 f383 	clz	r3, r3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005348:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	461a      	mov	r2, r3
 8005350:	2300      	movs	r3, #0
 8005352:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005354:	f7fd f8ee 	bl	8002534 <HAL_GetTick>
 8005358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800535c:	e00c      	b.n	8005378 <HAL_RCC_OscConfig+0xc70>
 800535e:	bf00      	nop
 8005360:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005364:	f7fd f8e6 	bl	8002534 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e1fd      	b.n	8005774 <HAL_RCC_OscConfig+0x106c>
 8005378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005380:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	fa93 f2a3 	rbit	r2, r3
 8005394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005398:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800539c:	601a      	str	r2, [r3, #0]
  return result;
 800539e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80053a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053a8:	fab3 f383 	clz	r3, r3
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d102      	bne.n	80053c2 <HAL_RCC_OscConfig+0xcba>
 80053bc:	4bb0      	ldr	r3, [pc, #704]	; (8005680 <HAL_RCC_OscConfig+0xf78>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	e027      	b.n	8005412 <HAL_RCC_OscConfig+0xd0a>
 80053c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	fa93 f2a3 	rbit	r2, r3
 80053de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80053f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	fa93 f2a3 	rbit	r2, r3
 8005404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005408:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	4b9c      	ldr	r3, [pc, #624]	; (8005680 <HAL_RCC_OscConfig+0xf78>)
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005416:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800541a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800541e:	6011      	str	r1, [r2, #0]
 8005420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005424:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	fa92 f1a2 	rbit	r1, r2
 800542e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005432:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005436:	6011      	str	r1, [r2, #0]
  return result;
 8005438:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800543c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	fab2 f282 	clz	r2, r2
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	f042 0220 	orr.w	r2, r2, #32
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	f002 021f 	and.w	r2, r2, #31
 8005452:	2101      	movs	r1, #1
 8005454:	fa01 f202 	lsl.w	r2, r1, r2
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d182      	bne.n	8005364 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800545e:	4b88      	ldr	r3, [pc, #544]	; (8005680 <HAL_RCC_OscConfig+0xf78>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800546a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	430b      	orrs	r3, r1
 8005480:	497f      	ldr	r1, [pc, #508]	; (8005680 <HAL_RCC_OscConfig+0xf78>)
 8005482:	4313      	orrs	r3, r2
 8005484:	604b      	str	r3, [r1, #4]
 8005486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800548e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005498:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	fa93 f2a3 	rbit	r2, r3
 80054a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054aa:	601a      	str	r2, [r3, #0]
  return result;
 80054ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	461a      	mov	r2, r3
 80054c8:	2301      	movs	r3, #1
 80054ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054cc:	f7fd f832 	bl	8002534 <HAL_GetTick>
 80054d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054d4:	e009      	b.n	80054ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fd f82d 	bl	8002534 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e144      	b.n	8005774 <HAL_RCC_OscConfig+0x106c>
 80054ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80054f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	fa93 f2a3 	rbit	r2, r3
 8005506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800550e:	601a      	str	r2, [r3, #0]
  return result;
 8005510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005514:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005518:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f043 0301 	orr.w	r3, r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	d102      	bne.n	8005534 <HAL_RCC_OscConfig+0xe2c>
 800552e:	4b54      	ldr	r3, [pc, #336]	; (8005680 <HAL_RCC_OscConfig+0xf78>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	e027      	b.n	8005584 <HAL_RCC_OscConfig+0xe7c>
 8005534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005538:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800553c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005546:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	fa93 f2a3 	rbit	r2, r3
 8005550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005554:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	fa93 f2a3 	rbit	r2, r3
 8005576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800557a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	4b3f      	ldr	r3, [pc, #252]	; (8005680 <HAL_RCC_OscConfig+0xf78>)
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005588:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800558c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005590:	6011      	str	r1, [r2, #0]
 8005592:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005596:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	fa92 f1a2 	rbit	r1, r2
 80055a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055a8:	6011      	str	r1, [r2, #0]
  return result;
 80055aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	fab2 f282 	clz	r2, r2
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	f042 0220 	orr.w	r2, r2, #32
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	f002 021f 	and.w	r2, r2, #31
 80055c4:	2101      	movs	r1, #1
 80055c6:	fa01 f202 	lsl.w	r2, r1, r2
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d082      	beq.n	80054d6 <HAL_RCC_OscConfig+0xdce>
 80055d0:	e0cf      	b.n	8005772 <HAL_RCC_OscConfig+0x106a>
 80055d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80055da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	fa93 f2a3 	rbit	r2, r3
 80055ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80055f6:	601a      	str	r2, [r3, #0]
  return result;
 80055f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005600:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005602:	fab3 f383 	clz	r3, r3
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800560c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	461a      	mov	r2, r3
 8005614:	2300      	movs	r3, #0
 8005616:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fc ff8c 	bl	8002534 <HAL_GetTick>
 800561c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005620:	e009      	b.n	8005636 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005622:	f7fc ff87 	bl	8002534 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e09e      	b.n	8005774 <HAL_RCC_OscConfig+0x106c>
 8005636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800563e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005648:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	fa93 f2a3 	rbit	r2, r3
 8005652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005656:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800565a:	601a      	str	r2, [r3, #0]
  return result;
 800565c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005660:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005664:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005666:	fab3 f383 	clz	r3, r3
 800566a:	b2db      	uxtb	r3, r3
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b01      	cmp	r3, #1
 8005678:	d104      	bne.n	8005684 <HAL_RCC_OscConfig+0xf7c>
 800567a:	4b01      	ldr	r3, [pc, #4]	; (8005680 <HAL_RCC_OscConfig+0xf78>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	e029      	b.n	80056d4 <HAL_RCC_OscConfig+0xfcc>
 8005680:	40021000 	.word	0x40021000
 8005684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005688:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800568c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005696:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	fa93 f2a3 	rbit	r2, r3
 80056a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80056b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	fa93 f2a3 	rbit	r2, r3
 80056c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <HAL_RCC_OscConfig+0x1078>)
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80056dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056e0:	6011      	str	r1, [r2, #0]
 80056e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	fa92 f1a2 	rbit	r1, r2
 80056f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80056f8:	6011      	str	r1, [r2, #0]
  return result;
 80056fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	fab2 f282 	clz	r2, r2
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	f042 0220 	orr.w	r2, r2, #32
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	f002 021f 	and.w	r2, r2, #31
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f202 	lsl.w	r2, r1, r2
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d180      	bne.n	8005622 <HAL_RCC_OscConfig+0xf1a>
 8005720:	e027      	b.n	8005772 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e01e      	b.n	8005774 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005736:	4b12      	ldr	r3, [pc, #72]	; (8005780 <HAL_RCC_OscConfig+0x1078>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800573e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005742:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	429a      	cmp	r2, r3
 8005754:	d10b      	bne.n	800576e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005756:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800575a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800575e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005762:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800576a:	429a      	cmp	r2, r3
 800576c:	d001      	beq.n	8005772 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000

08005784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b09e      	sub	sp, #120	; 0x78
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e162      	b.n	8005a62 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b90      	ldr	r3, [pc, #576]	; (80059e0 <HAL_RCC_ClockConfig+0x25c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d910      	bls.n	80057cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b8d      	ldr	r3, [pc, #564]	; (80059e0 <HAL_RCC_ClockConfig+0x25c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 0207 	bic.w	r2, r3, #7
 80057b2:	498b      	ldr	r1, [pc, #556]	; (80059e0 <HAL_RCC_ClockConfig+0x25c>)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b89      	ldr	r3, [pc, #548]	; (80059e0 <HAL_RCC_ClockConfig+0x25c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e14a      	b.n	8005a62 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d008      	beq.n	80057ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b82      	ldr	r3, [pc, #520]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	497f      	ldr	r1, [pc, #508]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80dc 	beq.w	80059b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d13c      	bne.n	800587a <HAL_RCC_ClockConfig+0xf6>
 8005800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005804:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005808:	fa93 f3a3 	rbit	r3, r3
 800580c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800580e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005810:	fab3 f383 	clz	r3, r3
 8005814:	b2db      	uxtb	r3, r3
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	d102      	bne.n	800582a <HAL_RCC_ClockConfig+0xa6>
 8005824:	4b6f      	ldr	r3, [pc, #444]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	e00f      	b.n	800584a <HAL_RCC_ClockConfig+0xc6>
 800582a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800582e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005832:	fa93 f3a3 	rbit	r3, r3
 8005836:	667b      	str	r3, [r7, #100]	; 0x64
 8005838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800583c:	663b      	str	r3, [r7, #96]	; 0x60
 800583e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005840:	fa93 f3a3 	rbit	r3, r3
 8005844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005846:	4b67      	ldr	r3, [pc, #412]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800584e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005852:	fa92 f2a2 	rbit	r2, r2
 8005856:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005858:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800585a:	fab2 f282 	clz	r2, r2
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	f042 0220 	orr.w	r2, r2, #32
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	f002 021f 	and.w	r2, r2, #31
 800586a:	2101      	movs	r1, #1
 800586c:	fa01 f202 	lsl.w	r2, r1, r2
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d17b      	bne.n	800596e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e0f3      	b.n	8005a62 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d13c      	bne.n	80058fc <HAL_RCC_ClockConfig+0x178>
 8005882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005886:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588a:	fa93 f3a3 	rbit	r3, r3
 800588e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005892:	fab3 f383 	clz	r3, r3
 8005896:	b2db      	uxtb	r3, r3
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d102      	bne.n	80058ac <HAL_RCC_ClockConfig+0x128>
 80058a6:	4b4f      	ldr	r3, [pc, #316]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	e00f      	b.n	80058cc <HAL_RCC_ClockConfig+0x148>
 80058ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b4:	fa93 f3a3 	rbit	r3, r3
 80058b8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058be:	643b      	str	r3, [r7, #64]	; 0x40
 80058c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c2:	fa93 f3a3 	rbit	r3, r3
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c8:	4b46      	ldr	r3, [pc, #280]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80058d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d4:	fa92 f2a2 	rbit	r2, r2
 80058d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80058da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058dc:	fab2 f282 	clz	r2, r2
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	f042 0220 	orr.w	r2, r2, #32
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	f002 021f 	and.w	r2, r2, #31
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f202 	lsl.w	r2, r1, r2
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d13a      	bne.n	800596e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0b2      	b.n	8005a62 <HAL_RCC_ClockConfig+0x2de>
 80058fc:	2302      	movs	r3, #2
 80058fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	fa93 f3a3 	rbit	r3, r3
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590a:	fab3 f383 	clz	r3, r3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f043 0301 	orr.w	r3, r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b01      	cmp	r3, #1
 800591c:	d102      	bne.n	8005924 <HAL_RCC_ClockConfig+0x1a0>
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	e00d      	b.n	8005940 <HAL_RCC_ClockConfig+0x1bc>
 8005924:	2302      	movs	r3, #2
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	fa93 f3a3 	rbit	r3, r3
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
 8005930:	2302      	movs	r3, #2
 8005932:	623b      	str	r3, [r7, #32]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	fa93 f3a3 	rbit	r3, r3
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	4b29      	ldr	r3, [pc, #164]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2202      	movs	r2, #2
 8005942:	61ba      	str	r2, [r7, #24]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	fa92 f2a2 	rbit	r2, r2
 800594a:	617a      	str	r2, [r7, #20]
  return result;
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	fab2 f282 	clz	r2, r2
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	f042 0220 	orr.w	r2, r2, #32
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	f002 021f 	and.w	r2, r2, #31
 800595e:	2101      	movs	r1, #1
 8005960:	fa01 f202 	lsl.w	r2, r1, r2
 8005964:	4013      	ands	r3, r2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e079      	b.n	8005a62 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	491a      	ldr	r1, [pc, #104]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005980:	f7fc fdd8 	bl	8002534 <HAL_GetTick>
 8005984:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fc fdd4 	bl	8002534 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	; 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e061      	b.n	8005a62 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <HAL_RCC_ClockConfig+0x260>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b0:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <HAL_RCC_ClockConfig+0x25c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d214      	bcs.n	80059e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <HAL_RCC_ClockConfig+0x25c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 0207 	bic.w	r2, r3, #7
 80059c6:	4906      	ldr	r1, [pc, #24]	; (80059e0 <HAL_RCC_ClockConfig+0x25c>)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <HAL_RCC_ClockConfig+0x25c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d005      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e040      	b.n	8005a62 <HAL_RCC_ClockConfig+0x2de>
 80059e0:	40022000 	.word	0x40022000
 80059e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f4:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <HAL_RCC_ClockConfig+0x2e8>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	491a      	ldr	r1, [pc, #104]	; (8005a6c <HAL_RCC_ClockConfig+0x2e8>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a12:	4b16      	ldr	r3, [pc, #88]	; (8005a6c <HAL_RCC_ClockConfig+0x2e8>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4912      	ldr	r1, [pc, #72]	; (8005a6c <HAL_RCC_ClockConfig+0x2e8>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a26:	f000 f829 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8005a2a:	4601      	mov	r1, r0
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <HAL_RCC_ClockConfig+0x2e8>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a34:	22f0      	movs	r2, #240	; 0xf0
 8005a36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	fa92 f2a2 	rbit	r2, r2
 8005a3e:	60fa      	str	r2, [r7, #12]
  return result;
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	fab2 f282 	clz	r2, r2
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	40d3      	lsrs	r3, r2
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <HAL_RCC_ClockConfig+0x2ec>)
 8005a4c:	5cd3      	ldrb	r3, [r2, r3]
 8005a4e:	fa21 f303 	lsr.w	r3, r1, r3
 8005a52:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <HAL_RCC_ClockConfig+0x2f0>)
 8005a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <HAL_RCC_ClockConfig+0x2f4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fc fd26 	bl	80024ac <HAL_InitTick>
  
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3778      	adds	r7, #120	; 0x78
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	0800a790 	.word	0x0800a790
 8005a74:	20000004 	.word	0x20000004
 8005a78:	20000008 	.word	0x20000008

08005a7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b08b      	sub	sp, #44	; 0x2c
 8005a80:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005a96:	4b29      	ldr	r3, [pc, #164]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d002      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x30>
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x36>
 8005aaa:	e03c      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005aac:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005aae:	623b      	str	r3, [r7, #32]
      break;
 8005ab0:	e03c      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ab8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005abc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	fa92 f2a2 	rbit	r2, r2
 8005ac4:	607a      	str	r2, [r7, #4]
  return result;
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	fab2 f282 	clz	r2, r2
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	40d3      	lsrs	r3, r2
 8005ad0:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ad2:	5cd3      	ldrb	r3, [r2, r3]
 8005ad4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005ad6:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	220f      	movs	r2, #15
 8005ae0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	fa92 f2a2 	rbit	r2, r2
 8005ae8:	60fa      	str	r2, [r7, #12]
  return result;
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	fab2 f282 	clz	r2, r2
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	40d3      	lsrs	r3, r2
 8005af4:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005af6:	5cd3      	ldrb	r3, [r2, r3]
 8005af8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b04:	4a0e      	ldr	r2, [pc, #56]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
 8005b14:	e004      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4a0c      	ldr	r2, [pc, #48]	; (8005b4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	623b      	str	r3, [r7, #32]
      break;
 8005b24:	e002      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b28:	623b      	str	r3, [r7, #32]
      break;
 8005b2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	372c      	adds	r7, #44	; 0x2c
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	007a1200 	.word	0x007a1200
 8005b44:	0800a7a8 	.word	0x0800a7a8
 8005b48:	0800a7b8 	.word	0x0800a7b8
 8005b4c:	003d0900 	.word	0x003d0900

08005b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b56:	681b      	ldr	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000004 	.word	0x20000004

08005b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005b6e:	f7ff ffef 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005b72:	4601      	mov	r1, r0
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	fa92 f2a2 	rbit	r2, r2
 8005b88:	603a      	str	r2, [r7, #0]
  return result;
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	fab2 f282 	clz	r2, r2
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	40d3      	lsrs	r3, r2
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	0800a7a0 	.word	0x0800a7a0

08005bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005bb2:	f7ff ffcd 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005bb6:	4601      	mov	r1, r0
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005bc0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005bc4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	fa92 f2a2 	rbit	r2, r2
 8005bcc:	603a      	str	r2, [r7, #0]
  return result;
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	fab2 f282 	clz	r2, r2
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	40d3      	lsrs	r3, r2
 8005bd8:	4a04      	ldr	r2, [pc, #16]	; (8005bec <HAL_RCC_GetPCLK2Freq+0x40>)
 8005bda:	5cd3      	ldrb	r3, [r2, r3]
 8005bdc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40021000 	.word	0x40021000
 8005bec:	0800a7a0 	.word	0x0800a7a0

08005bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b092      	sub	sp, #72	; 0x48
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 80cd 	beq.w	8005dae <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c14:	4b8e      	ldr	r3, [pc, #568]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10e      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c20:	4b8b      	ldr	r3, [pc, #556]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	4a8a      	ldr	r2, [pc, #552]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	61d3      	str	r3, [r2, #28]
 8005c2c:	4b88      	ldr	r3, [pc, #544]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3e:	4b85      	ldr	r3, [pc, #532]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d118      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c4a:	4b82      	ldr	r3, [pc, #520]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a81      	ldr	r2, [pc, #516]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c56:	f7fc fc6d 	bl	8002534 <HAL_GetTick>
 8005c5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5c:	e008      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5e:	f7fc fc69 	bl	8002534 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b64      	cmp	r3, #100	; 0x64
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0ea      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c70:	4b78      	ldr	r3, [pc, #480]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c7c:	4b74      	ldr	r3, [pc, #464]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d07d      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d076      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c9a:	4b6d      	ldr	r3, [pc, #436]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ca8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	fa93 f3a3 	rbit	r3, r3
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cb4:	fab3 f383 	clz	r3, r3
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4b66      	ldr	r3, [pc, #408]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	fa93 f3a3 	rbit	r3, r3
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cd8:	fab3 f383 	clz	r3, r3
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4b5d      	ldr	r3, [pc, #372]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	2300      	movs	r3, #0
 8005cea:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cec:	4a58      	ldr	r2, [pc, #352]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d045      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfc:	f7fc fc1a 	bl	8002534 <HAL_GetTick>
 8005d00:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7fc fc16 	bl	8002534 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e095      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	fa93 f3a3 	rbit	r3, r3
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
 8005d26:	2302      	movs	r3, #2
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	fa93 f3a3 	rbit	r3, r3
 8005d30:	61fb      	str	r3, [r7, #28]
  return result;
 8005d32:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d34:	fab3 f383 	clz	r3, r3
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d102      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005d48:	4b41      	ldr	r3, [pc, #260]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	e007      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	fa93 f3a3 	rbit	r3, r3
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	4b3d      	ldr	r3, [pc, #244]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2202      	movs	r2, #2
 8005d60:	613a      	str	r2, [r7, #16]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	fa92 f2a2 	rbit	r2, r2
 8005d68:	60fa      	str	r2, [r7, #12]
  return result;
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	fab2 f282 	clz	r2, r2
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	f002 021f 	and.w	r2, r2, #31
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d82:	4013      	ands	r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0bd      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005d88:	4b31      	ldr	r3, [pc, #196]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	492e      	ldr	r1, [pc, #184]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d105      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da2:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dac:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dba:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	4922      	ldr	r1, [pc, #136]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dd8:	4b1d      	ldr	r3, [pc, #116]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	f023 0210 	bic.w	r2, r3, #16
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	491a      	ldr	r1, [pc, #104]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005df6:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	4913      	ldr	r1, [pc, #76]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	490b      	ldr	r1, [pc, #44]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d008      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	4904      	ldr	r1, [pc, #16]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3748      	adds	r7, #72	; 0x48
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40007000 	.word	0x40007000
 8005e58:	10908100 	.word	0x10908100

08005e5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e073      	b.n	8005f5a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7f5b      	ldrb	r3, [r3, #29]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d105      	bne.n	8005e88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fb ff50 	bl	8001d28 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b10      	cmp	r3, #16
 8005e9a:	d055      	beq.n	8005f48 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	22ca      	movs	r2, #202	; 0xca
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2253      	movs	r2, #83	; 0x53
 8005eaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f99d 	bl	80061ec <RTC_EnterInitMode>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d12c      	bne.n	8005f16 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ece:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6899      	ldr	r1, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68d2      	ldr	r2, [r2, #12]
 8005ef6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6919      	ldr	r1, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	041a      	lsls	r2, r3, #16
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f9a4 	bl	800625a <RTC_ExitInitMode>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d110      	bne.n	8005f3e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f2a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	22ff      	movs	r2, #255	; 0xff
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24
 8005f46:	e001      	b.n	8005f4c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f62:	b590      	push	{r4, r7, lr}
 8005f64:	b087      	sub	sp, #28
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	7f1b      	ldrb	r3, [r3, #28]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_RTC_SetTime+0x1c>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e087      	b.n	800608e <HAL_RTC_SetTime+0x12c>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2202      	movs	r2, #2
 8005f88:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d126      	bne.n	8005fde <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d102      	bne.n	8005fa4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 f97b 	bl	80062a4 <RTC_ByteToBcd2>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 f974 	bl	80062a4 <RTC_ByteToBcd2>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fc0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	789b      	ldrb	r3, [r3, #2]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f96c 	bl	80062a4 <RTC_ByteToBcd2>
 8005fcc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fce:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	78db      	ldrb	r3, [r3, #3]
 8005fd6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e018      	b.n	8006010 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ffe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006004:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	78db      	ldrb	r3, [r3, #3]
 800600a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	22ca      	movs	r2, #202	; 0xca
 8006016:	625a      	str	r2, [r3, #36]	; 0x24
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2253      	movs	r2, #83	; 0x53
 800601e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f8e3 	bl	80061ec <RTC_EnterInitMode>
 8006026:	4603      	mov	r3, r0
 8006028:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800602a:	7cfb      	ldrb	r3, [r7, #19]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d120      	bne.n	8006072 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800603a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800603e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800604e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6899      	ldr	r1, [r3, #8]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	431a      	orrs	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f8f6 	bl	800625a <RTC_ExitInitMode>
 800606e:	4603      	mov	r3, r0
 8006070:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006072:	7cfb      	ldrb	r3, [r7, #19]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	22ff      	movs	r2, #255	; 0xff
 8006084:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]

  return status;
 800608c:	7cfb      	ldrb	r3, [r7, #19]
}
 800608e:	4618      	mov	r0, r3
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	bd90      	pop	{r4, r7, pc}

08006096 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006096:	b590      	push	{r4, r7, lr}
 8006098:	b087      	sub	sp, #28
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	7f1b      	ldrb	r3, [r3, #28]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_RTC_SetDate+0x1c>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e071      	b.n	8006196 <HAL_RTC_SetDate+0x100>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2202      	movs	r2, #2
 80060bc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10e      	bne.n	80060e2 <HAL_RTC_SetDate+0x4c>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	f023 0310 	bic.w	r3, r3, #16
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	330a      	adds	r3, #10
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d11c      	bne.n	8006122 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	78db      	ldrb	r3, [r3, #3]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 f8d9 	bl	80062a4 <RTC_ByteToBcd2>
 80060f2:	4603      	mov	r3, r0
 80060f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f8d2 	bl	80062a4 <RTC_ByteToBcd2>
 8006100:	4603      	mov	r3, r0
 8006102:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006104:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	789b      	ldrb	r3, [r3, #2]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f8ca 	bl	80062a4 <RTC_ByteToBcd2>
 8006110:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006112:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e00e      	b.n	8006140 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	78db      	ldrb	r3, [r3, #3]
 8006126:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	785b      	ldrb	r3, [r3, #1]
 800612c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800612e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006134:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800613c:	4313      	orrs	r3, r2
 800613e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	22ca      	movs	r2, #202	; 0xca
 8006146:	625a      	str	r2, [r3, #36]	; 0x24
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2253      	movs	r2, #83	; 0x53
 800614e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f84b 	bl	80061ec <RTC_EnterInitMode>
 8006156:	4603      	mov	r3, r0
 8006158:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800615a:	7cfb      	ldrb	r3, [r7, #19]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10c      	bne.n	800617a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800616a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800616e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f872 	bl	800625a <RTC_ExitInitMode>
 8006176:	4603      	mov	r3, r0
 8006178:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800617a:	7cfb      	ldrb	r3, [r7, #19]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	22ff      	movs	r2, #255	; 0xff
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]

  return status;
 8006194:	7cfb      	ldrb	r3, [r7, #19]
}
 8006196:	4618      	mov	r0, r3
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	bd90      	pop	{r4, r7, pc}
	...

080061a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0d      	ldr	r2, [pc, #52]	; (80061e8 <HAL_RTC_WaitForSynchro+0x48>)
 80061b2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061b4:	f7fc f9be 	bl	8002534 <HAL_GetTick>
 80061b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061ba:	e009      	b.n	80061d0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061bc:	f7fc f9ba 	bl	8002534 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061ca:	d901      	bls.n	80061d0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e007      	b.n	80061e0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0ee      	beq.n	80061bc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	00017f5f 	.word	0x00017f5f

080061ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d122      	bne.n	8006250 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006218:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800621a:	f7fc f98b 	bl	8002534 <HAL_GetTick>
 800621e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006220:	e00c      	b.n	800623c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006222:	f7fc f987 	bl	8002534 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006230:	d904      	bls.n	800623c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2204      	movs	r2, #4
 8006236:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <RTC_EnterInitMode+0x64>
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d1e8      	bne.n	8006222 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006274:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff ff8b 	bl	80061a0 <HAL_RTC_WaitForSynchro>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2204      	movs	r2, #4
 8006294:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80062b2:	e005      	b.n	80062c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	3b0a      	subs	r3, #10
 80062be:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	2b09      	cmp	r3, #9
 80062c4:	d8f6      	bhi.n	80062b4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	b2db      	uxtb	r3, r3
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e049      	b.n	8006386 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb fd34 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3304      	adds	r3, #4
 800631c:	4619      	mov	r1, r3
 800631e:	4610      	mov	r0, r2
 8006320:	f000 fc60 	bl	8006be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d001      	beq.n	80063a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e040      	b.n	800642a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1c      	ldr	r2, [pc, #112]	; (8006438 <HAL_TIM_Base_Start_IT+0xa8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00e      	beq.n	80063e8 <HAL_TIM_Base_Start_IT+0x58>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d2:	d009      	beq.n	80063e8 <HAL_TIM_Base_Start_IT+0x58>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a18      	ldr	r2, [pc, #96]	; (800643c <HAL_TIM_Base_Start_IT+0xac>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_TIM_Base_Start_IT+0x58>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a17      	ldr	r2, [pc, #92]	; (8006440 <HAL_TIM_Base_Start_IT+0xb0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d115      	bne.n	8006414 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	4b15      	ldr	r3, [pc, #84]	; (8006444 <HAL_TIM_Base_Start_IT+0xb4>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b06      	cmp	r3, #6
 80063f8:	d015      	beq.n	8006426 <HAL_TIM_Base_Start_IT+0x96>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d011      	beq.n	8006426 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006412:	e008      	b.n	8006426 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e000      	b.n	8006428 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006426:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40000400 	.word	0x40000400
 8006440:	40014000 	.word	0x40014000
 8006444:	00010007 	.word	0x00010007

08006448 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e049      	b.n	80064ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fb fd88 	bl	8001f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f000 fbac 	bl	8006be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d109      	bne.n	800651c <HAL_TIM_PWM_Start+0x24>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	e03c      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b04      	cmp	r3, #4
 8006520:	d109      	bne.n	8006536 <HAL_TIM_PWM_Start+0x3e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b01      	cmp	r3, #1
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	e02f      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d109      	bne.n	8006550 <HAL_TIM_PWM_Start+0x58>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	bf14      	ite	ne
 8006548:	2301      	movne	r3, #1
 800654a:	2300      	moveq	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	e022      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b0c      	cmp	r3, #12
 8006554:	d109      	bne.n	800656a <HAL_TIM_PWM_Start+0x72>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	bf14      	ite	ne
 8006562:	2301      	movne	r3, #1
 8006564:	2300      	moveq	r3, #0
 8006566:	b2db      	uxtb	r3, r3
 8006568:	e015      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b10      	cmp	r3, #16
 800656e:	d109      	bne.n	8006584 <HAL_TIM_PWM_Start+0x8c>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	e008      	b.n	8006596 <HAL_TIM_PWM_Start+0x9e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	bf14      	ite	ne
 8006590:	2301      	movne	r3, #1
 8006592:	2300      	moveq	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e088      	b.n	80066b0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_PWM_Start+0xb6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ac:	e023      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Start+0xc6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065bc:	e01b      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Start+0xd6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065cc:	e013      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	d104      	bne.n	80065de <HAL_TIM_PWM_Start+0xe6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065dc:	e00b      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_PWM_Start+0xf6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ec:	e003      	b.n	80065f6 <HAL_TIM_PWM_Start+0xfe>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2201      	movs	r2, #1
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 ff20 	bl	8007444 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a2b      	ldr	r2, [pc, #172]	; (80066b8 <HAL_TIM_PWM_Start+0x1c0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00e      	beq.n	800662c <HAL_TIM_PWM_Start+0x134>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <HAL_TIM_PWM_Start+0x1c4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_TIM_PWM_Start+0x134>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a28      	ldr	r2, [pc, #160]	; (80066c0 <HAL_TIM_PWM_Start+0x1c8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_TIM_PWM_Start+0x134>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a27      	ldr	r2, [pc, #156]	; (80066c4 <HAL_TIM_PWM_Start+0x1cc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d101      	bne.n	8006630 <HAL_TIM_PWM_Start+0x138>
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <HAL_TIM_PWM_Start+0x13a>
 8006630:	2300      	movs	r3, #0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006644:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1b      	ldr	r2, [pc, #108]	; (80066b8 <HAL_TIM_PWM_Start+0x1c0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00e      	beq.n	800666e <HAL_TIM_PWM_Start+0x176>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006658:	d009      	beq.n	800666e <HAL_TIM_PWM_Start+0x176>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <HAL_TIM_PWM_Start+0x1d0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d004      	beq.n	800666e <HAL_TIM_PWM_Start+0x176>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a14      	ldr	r2, [pc, #80]	; (80066bc <HAL_TIM_PWM_Start+0x1c4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d115      	bne.n	800669a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <HAL_TIM_PWM_Start+0x1d4>)
 8006676:	4013      	ands	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b06      	cmp	r3, #6
 800667e:	d015      	beq.n	80066ac <HAL_TIM_PWM_Start+0x1b4>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006686:	d011      	beq.n	80066ac <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	e008      	b.n	80066ac <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0201 	orr.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	e000      	b.n	80066ae <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40014400 	.word	0x40014400
 80066c4:	40014800 	.word	0x40014800
 80066c8:	40000400 	.word	0x40000400
 80066cc:	00010007 	.word	0x00010007

080066d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e097      	b.n	8006814 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7fb fb97 	bl	8001e2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2202      	movs	r2, #2
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006714:	f023 0307 	bic.w	r3, r3, #7
 8006718:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3304      	adds	r3, #4
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f000 fa5d 	bl	8006be4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	4313      	orrs	r3, r2
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006770:	f023 030c 	bic.w	r3, r3, #12
 8006774:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800677c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	4313      	orrs	r3, r2
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	011a      	lsls	r2, r3, #4
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	031b      	lsls	r3, r3, #12
 80067a0:	4313      	orrs	r3, r2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	4313      	orrs	r3, r2
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800682c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006834:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800683c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006844:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d110      	bne.n	800686e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d102      	bne.n	8006858 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006852:	7b7b      	ldrb	r3, [r7, #13]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d001      	beq.n	800685c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e069      	b.n	8006930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800686c:	e031      	b.n	80068d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b04      	cmp	r3, #4
 8006872:	d110      	bne.n	8006896 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d102      	bne.n	8006880 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800687a:	7b3b      	ldrb	r3, [r7, #12]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d001      	beq.n	8006884 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e055      	b.n	8006930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006894:	e01d      	b.n	80068d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d108      	bne.n	80068ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d105      	bne.n	80068ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068a2:	7b7b      	ldrb	r3, [r7, #13]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d102      	bne.n	80068ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068a8:	7b3b      	ldrb	r3, [r7, #12]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d001      	beq.n	80068b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e03e      	b.n	8006930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2202      	movs	r2, #2
 80068be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_TIM_Encoder_Start+0xc4>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d008      	beq.n	80068f0 <HAL_TIM_Encoder_Start+0xd4>
 80068de:	e00f      	b.n	8006900 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2201      	movs	r2, #1
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fdab 	bl	8007444 <TIM_CCxChannelCmd>
      break;
 80068ee:	e016      	b.n	800691e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	2104      	movs	r1, #4
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fda3 	bl	8007444 <TIM_CCxChannelCmd>
      break;
 80068fe:	e00e      	b.n	800691e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2201      	movs	r2, #1
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fd9b 	bl	8007444 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2201      	movs	r2, #1
 8006914:	2104      	movs	r1, #4
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fd94 	bl	8007444 <TIM_CCxChannelCmd>
      break;
 800691c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006952:	2302      	movs	r3, #2
 8006954:	e0ff      	b.n	8006b56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b14      	cmp	r3, #20
 8006962:	f200 80f0 	bhi.w	8006b46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	080069c1 	.word	0x080069c1
 8006970:	08006b47 	.word	0x08006b47
 8006974:	08006b47 	.word	0x08006b47
 8006978:	08006b47 	.word	0x08006b47
 800697c:	08006a01 	.word	0x08006a01
 8006980:	08006b47 	.word	0x08006b47
 8006984:	08006b47 	.word	0x08006b47
 8006988:	08006b47 	.word	0x08006b47
 800698c:	08006a43 	.word	0x08006a43
 8006990:	08006b47 	.word	0x08006b47
 8006994:	08006b47 	.word	0x08006b47
 8006998:	08006b47 	.word	0x08006b47
 800699c:	08006a83 	.word	0x08006a83
 80069a0:	08006b47 	.word	0x08006b47
 80069a4:	08006b47 	.word	0x08006b47
 80069a8:	08006b47 	.word	0x08006b47
 80069ac:	08006ac5 	.word	0x08006ac5
 80069b0:	08006b47 	.word	0x08006b47
 80069b4:	08006b47 	.word	0x08006b47
 80069b8:	08006b47 	.word	0x08006b47
 80069bc:	08006b05 	.word	0x08006b05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 f984 	bl	8006cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0208 	orr.w	r2, r2, #8
 80069da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0204 	bic.w	r2, r2, #4
 80069ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6999      	ldr	r1, [r3, #24]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	691a      	ldr	r2, [r3, #16]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	619a      	str	r2, [r3, #24]
      break;
 80069fe:	e0a5      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 f9ea 	bl	8006de0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6999      	ldr	r1, [r3, #24]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	021a      	lsls	r2, r3, #8
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	619a      	str	r2, [r3, #24]
      break;
 8006a40:	e084      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fa49 	bl	8006ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0208 	orr.w	r2, r2, #8
 8006a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0204 	bic.w	r2, r2, #4
 8006a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69d9      	ldr	r1, [r3, #28]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	61da      	str	r2, [r3, #28]
      break;
 8006a80:	e064      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 faa7 	bl	8006fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69d9      	ldr	r1, [r3, #28]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	021a      	lsls	r2, r3, #8
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	61da      	str	r2, [r3, #28]
      break;
 8006ac2:	e043      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 faea 	bl	80070a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0208 	orr.w	r2, r2, #8
 8006ade:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0204 	bic.w	r2, r2, #4
 8006aee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b02:	e023      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fb28 	bl	8007160 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	021a      	lsls	r2, r3, #8
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b44:	e002      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop

08006b60 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e031      	b.n	8006bdc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fb48 	bl	8007220 <TIM_SlaveTimer_SetConfig>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e018      	b.n	8006bdc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bc8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a32      	ldr	r2, [pc, #200]	; (8006cc0 <TIM_Base_SetConfig+0xdc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d007      	beq.n	8006c0c <TIM_Base_SetConfig+0x28>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0x28>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a2f      	ldr	r2, [pc, #188]	; (8006cc4 <TIM_Base_SetConfig+0xe0>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d108      	bne.n	8006c1e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a27      	ldr	r2, [pc, #156]	; (8006cc0 <TIM_Base_SetConfig+0xdc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <TIM_Base_SetConfig+0x6a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2c:	d00f      	beq.n	8006c4e <TIM_Base_SetConfig+0x6a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a24      	ldr	r2, [pc, #144]	; (8006cc4 <TIM_Base_SetConfig+0xe0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00b      	beq.n	8006c4e <TIM_Base_SetConfig+0x6a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a23      	ldr	r2, [pc, #140]	; (8006cc8 <TIM_Base_SetConfig+0xe4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d007      	beq.n	8006c4e <TIM_Base_SetConfig+0x6a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a22      	ldr	r2, [pc, #136]	; (8006ccc <TIM_Base_SetConfig+0xe8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_Base_SetConfig+0x6a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a21      	ldr	r2, [pc, #132]	; (8006cd0 <TIM_Base_SetConfig+0xec>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d108      	bne.n	8006c60 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a0e      	ldr	r2, [pc, #56]	; (8006cc0 <TIM_Base_SetConfig+0xdc>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00b      	beq.n	8006ca4 <TIM_Base_SetConfig+0xc0>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a0e      	ldr	r2, [pc, #56]	; (8006cc8 <TIM_Base_SetConfig+0xe4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_Base_SetConfig+0xc0>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <TIM_Base_SetConfig+0xe8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_Base_SetConfig+0xc0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a0c      	ldr	r2, [pc, #48]	; (8006cd0 <TIM_Base_SetConfig+0xec>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d103      	bne.n	8006cac <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	615a      	str	r2, [r3, #20]
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800

08006cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0201 	bic.w	r2, r3, #1
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0303 	bic.w	r3, r3, #3
 8006d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 0302 	bic.w	r3, r3, #2
 8006d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a28      	ldr	r2, [pc, #160]	; (8006dd0 <TIM_OC1_SetConfig+0xfc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <TIM_OC1_SetConfig+0x78>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a27      	ldr	r2, [pc, #156]	; (8006dd4 <TIM_OC1_SetConfig+0x100>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_OC1_SetConfig+0x78>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a26      	ldr	r2, [pc, #152]	; (8006dd8 <TIM_OC1_SetConfig+0x104>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC1_SetConfig+0x78>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <TIM_OC1_SetConfig+0x108>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10c      	bne.n	8006d66 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0308 	bic.w	r3, r3, #8
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 0304 	bic.w	r3, r3, #4
 8006d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a19      	ldr	r2, [pc, #100]	; (8006dd0 <TIM_OC1_SetConfig+0xfc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <TIM_OC1_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a18      	ldr	r2, [pc, #96]	; (8006dd4 <TIM_OC1_SetConfig+0x100>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_OC1_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <TIM_OC1_SetConfig+0x104>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_OC1_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <TIM_OC1_SetConfig+0x108>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d111      	bne.n	8006daa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	621a      	str	r2, [r3, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800

08006de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f023 0210 	bic.w	r2, r3, #16
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f023 0320 	bic.w	r3, r3, #32
 8006e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a24      	ldr	r2, [pc, #144]	; (8006ed0 <TIM_OC2_SetConfig+0xf0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d10d      	bne.n	8006e60 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1b      	ldr	r2, [pc, #108]	; (8006ed0 <TIM_OC2_SetConfig+0xf0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00b      	beq.n	8006e80 <TIM_OC2_SetConfig+0xa0>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a1a      	ldr	r2, [pc, #104]	; (8006ed4 <TIM_OC2_SetConfig+0xf4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <TIM_OC2_SetConfig+0xa0>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a19      	ldr	r2, [pc, #100]	; (8006ed8 <TIM_OC2_SetConfig+0xf8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_OC2_SetConfig+0xa0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a18      	ldr	r2, [pc, #96]	; (8006edc <TIM_OC2_SetConfig+0xfc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d113      	bne.n	8006ea8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e86:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e8e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	40014000 	.word	0x40014000
 8006ed8:	40014400 	.word	0x40014400
 8006edc:	40014800 	.word	0x40014800

08006ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <TIM_OC3_SetConfig+0xec>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d10d      	bne.n	8006f5e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	021b      	lsls	r3, r3, #8
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f5c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1a      	ldr	r2, [pc, #104]	; (8006fcc <TIM_OC3_SetConfig+0xec>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <TIM_OC3_SetConfig+0x9e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <TIM_OC3_SetConfig+0xf0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d007      	beq.n	8006f7e <TIM_OC3_SetConfig+0x9e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a18      	ldr	r2, [pc, #96]	; (8006fd4 <TIM_OC3_SetConfig+0xf4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_OC3_SetConfig+0x9e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a17      	ldr	r2, [pc, #92]	; (8006fd8 <TIM_OC3_SetConfig+0xf8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d113      	bne.n	8006fa6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	621a      	str	r2, [r3, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	40012c00 	.word	0x40012c00
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800

08006fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800700a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	021b      	lsls	r3, r3, #8
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800702a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	031b      	lsls	r3, r3, #12
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a16      	ldr	r2, [pc, #88]	; (8007094 <TIM_OC4_SetConfig+0xb8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00b      	beq.n	8007058 <TIM_OC4_SetConfig+0x7c>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a15      	ldr	r2, [pc, #84]	; (8007098 <TIM_OC4_SetConfig+0xbc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d007      	beq.n	8007058 <TIM_OC4_SetConfig+0x7c>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a14      	ldr	r2, [pc, #80]	; (800709c <TIM_OC4_SetConfig+0xc0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <TIM_OC4_SetConfig+0x7c>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <TIM_OC4_SetConfig+0xc4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d109      	bne.n	800706c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800705e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	019b      	lsls	r3, r3, #6
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	621a      	str	r2, [r3, #32]
}
 8007086:	bf00      	nop
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40012c00 	.word	0x40012c00
 8007098:	40014000 	.word	0x40014000
 800709c:	40014400 	.word	0x40014400
 80070a0:	40014800 	.word	0x40014800

080070a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a15      	ldr	r2, [pc, #84]	; (8007150 <TIM_OC5_SetConfig+0xac>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00b      	beq.n	8007116 <TIM_OC5_SetConfig+0x72>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a14      	ldr	r2, [pc, #80]	; (8007154 <TIM_OC5_SetConfig+0xb0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d007      	beq.n	8007116 <TIM_OC5_SetConfig+0x72>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a13      	ldr	r2, [pc, #76]	; (8007158 <TIM_OC5_SetConfig+0xb4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d003      	beq.n	8007116 <TIM_OC5_SetConfig+0x72>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a12      	ldr	r2, [pc, #72]	; (800715c <TIM_OC5_SetConfig+0xb8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d109      	bne.n	800712a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	621a      	str	r2, [r3, #32]
}
 8007144:	bf00      	nop
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	40012c00 	.word	0x40012c00
 8007154:	40014000 	.word	0x40014000
 8007158:	40014400 	.word	0x40014400
 800715c:	40014800 	.word	0x40014800

08007160 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800718e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	051b      	lsls	r3, r3, #20
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a16      	ldr	r2, [pc, #88]	; (8007210 <TIM_OC6_SetConfig+0xb0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00b      	beq.n	80071d4 <TIM_OC6_SetConfig+0x74>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a15      	ldr	r2, [pc, #84]	; (8007214 <TIM_OC6_SetConfig+0xb4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <TIM_OC6_SetConfig+0x74>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a14      	ldr	r2, [pc, #80]	; (8007218 <TIM_OC6_SetConfig+0xb8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_OC6_SetConfig+0x74>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a13      	ldr	r2, [pc, #76]	; (800721c <TIM_OC6_SetConfig+0xbc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d109      	bne.n	80071e8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	029b      	lsls	r3, r3, #10
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40012c00 	.word	0x40012c00
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400
 800721c:	40014800 	.word	0x40014800

08007220 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724e:	f023 0307 	bic.w	r3, r3, #7
 8007252:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b70      	cmp	r3, #112	; 0x70
 800726c:	d01a      	beq.n	80072a4 <TIM_SlaveTimer_SetConfig+0x84>
 800726e:	2b70      	cmp	r3, #112	; 0x70
 8007270:	d860      	bhi.n	8007334 <TIM_SlaveTimer_SetConfig+0x114>
 8007272:	2b60      	cmp	r3, #96	; 0x60
 8007274:	d054      	beq.n	8007320 <TIM_SlaveTimer_SetConfig+0x100>
 8007276:	2b60      	cmp	r3, #96	; 0x60
 8007278:	d85c      	bhi.n	8007334 <TIM_SlaveTimer_SetConfig+0x114>
 800727a:	2b50      	cmp	r3, #80	; 0x50
 800727c:	d046      	beq.n	800730c <TIM_SlaveTimer_SetConfig+0xec>
 800727e:	2b50      	cmp	r3, #80	; 0x50
 8007280:	d858      	bhi.n	8007334 <TIM_SlaveTimer_SetConfig+0x114>
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d019      	beq.n	80072ba <TIM_SlaveTimer_SetConfig+0x9a>
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d854      	bhi.n	8007334 <TIM_SlaveTimer_SetConfig+0x114>
 800728a:	2b30      	cmp	r3, #48	; 0x30
 800728c:	d055      	beq.n	800733a <TIM_SlaveTimer_SetConfig+0x11a>
 800728e:	2b30      	cmp	r3, #48	; 0x30
 8007290:	d850      	bhi.n	8007334 <TIM_SlaveTimer_SetConfig+0x114>
 8007292:	2b20      	cmp	r3, #32
 8007294:	d051      	beq.n	800733a <TIM_SlaveTimer_SetConfig+0x11a>
 8007296:	2b20      	cmp	r3, #32
 8007298:	d84c      	bhi.n	8007334 <TIM_SlaveTimer_SetConfig+0x114>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d04d      	beq.n	800733a <TIM_SlaveTimer_SetConfig+0x11a>
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d04b      	beq.n	800733a <TIM_SlaveTimer_SetConfig+0x11a>
 80072a2:	e047      	b.n	8007334 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80072b4:	f000 f8a6 	bl	8007404 <TIM_ETR_SetConfig>
      break;
 80072b8:	e040      	b.n	800733c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b05      	cmp	r3, #5
 80072c0:	d101      	bne.n	80072c6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e03b      	b.n	800733e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a1a      	ldr	r2, [r3, #32]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0201 	bic.w	r2, r2, #1
 80072dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	621a      	str	r2, [r3, #32]
      break;
 800730a:	e017      	b.n	800733c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007318:	461a      	mov	r2, r3
 800731a:	f000 f814 	bl	8007346 <TIM_TI1_ConfigInputStage>
      break;
 800731e:	e00d      	b.n	800733c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800732c:	461a      	mov	r2, r3
 800732e:	f000 f839 	bl	80073a4 <TIM_TI2_ConfigInputStage>
      break;
 8007332:	e003      	b.n	800733c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	75fb      	strb	r3, [r7, #23]
      break;
 8007338:	e000      	b.n	800733c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800733a:	bf00      	nop
  }

  return status;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007346:	b480      	push	{r7}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	f023 0201 	bic.w	r2, r3, #1
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f023 030a 	bic.w	r3, r3, #10
 8007382:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	621a      	str	r2, [r3, #32]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	f023 0210 	bic.w	r2, r3, #16
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	031b      	lsls	r3, r3, #12
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	621a      	str	r2, [r3, #32]
}
 80073f8:	bf00      	nop
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800741e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	021a      	lsls	r2, r3, #8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	431a      	orrs	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	4313      	orrs	r3, r2
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	4313      	orrs	r3, r2
 8007430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	609a      	str	r2, [r3, #8]
}
 8007438:	bf00      	nop
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	2201      	movs	r2, #1
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1a      	ldr	r2, [r3, #32]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	43db      	mvns	r3, r3
 8007466:	401a      	ands	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1a      	ldr	r2, [r3, #32]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 031f 	and.w	r3, r3, #31
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	fa01 f303 	lsl.w	r3, r1, r3
 800747c:	431a      	orrs	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	621a      	str	r2, [r3, #32]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
	...

08007490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e054      	b.n	8007552 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a24      	ldr	r2, [pc, #144]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d108      	bne.n	80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a17      	ldr	r2, [pc, #92]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00e      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007510:	d009      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a13      	ldr	r2, [pc, #76]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d004      	beq.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a11      	ldr	r2, [pc, #68]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d10c      	bne.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800752c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	4313      	orrs	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40012c00 	.word	0x40012c00
 8007564:	40000400 	.word	0x40000400
 8007568:	40014000 	.word	0x40014000

0800756c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007584:	2302      	movs	r3, #2
 8007586:	e060      	b.n	800764a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	041b      	lsls	r3, r3, #16
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a14      	ldr	r2, [pc, #80]	; (8007658 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d115      	bne.n	8007638 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	051b      	lsls	r3, r3, #20
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40012c00 	.word	0x40012c00

0800765c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e040      	b.n	80076f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7fa fd84 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2224      	movs	r2, #36	; 0x24
 8007688:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0201 	bic.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f82c 	bl	80076f8 <UART_SetConfig>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e022      	b.n	80076f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f956 	bl	8007964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f9dd 	bl	8007aa8 <UART_CheckIdleState>
 80076ee:	4603      	mov	r3, r0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b8a      	ldr	r3, [pc, #552]	; (800794c <UART_SetConfig+0x254>)
 8007724:	4013      	ands	r3, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6812      	ldr	r2, [r2, #0]
 800772a:	6979      	ldr	r1, [r7, #20]
 800772c:	430b      	orrs	r3, r1
 800772e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	430a      	orrs	r2, r1
 8007768:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a78      	ldr	r2, [pc, #480]	; (8007950 <UART_SetConfig+0x258>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d120      	bne.n	80077b6 <UART_SetConfig+0xbe>
 8007774:	4b77      	ldr	r3, [pc, #476]	; (8007954 <UART_SetConfig+0x25c>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	f003 0303 	and.w	r3, r3, #3
 800777c:	2b03      	cmp	r3, #3
 800777e:	d817      	bhi.n	80077b0 <UART_SetConfig+0xb8>
 8007780:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x90>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	08007799 	.word	0x08007799
 800778c:	080077a5 	.word	0x080077a5
 8007790:	080077ab 	.word	0x080077ab
 8007794:	0800779f 	.word	0x0800779f
 8007798:	2300      	movs	r3, #0
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	e01d      	b.n	80077da <UART_SetConfig+0xe2>
 800779e:	2302      	movs	r3, #2
 80077a0:	77fb      	strb	r3, [r7, #31]
 80077a2:	e01a      	b.n	80077da <UART_SetConfig+0xe2>
 80077a4:	2304      	movs	r3, #4
 80077a6:	77fb      	strb	r3, [r7, #31]
 80077a8:	e017      	b.n	80077da <UART_SetConfig+0xe2>
 80077aa:	2308      	movs	r3, #8
 80077ac:	77fb      	strb	r3, [r7, #31]
 80077ae:	e014      	b.n	80077da <UART_SetConfig+0xe2>
 80077b0:	2310      	movs	r3, #16
 80077b2:	77fb      	strb	r3, [r7, #31]
 80077b4:	e011      	b.n	80077da <UART_SetConfig+0xe2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a67      	ldr	r2, [pc, #412]	; (8007958 <UART_SetConfig+0x260>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d102      	bne.n	80077c6 <UART_SetConfig+0xce>
 80077c0:	2300      	movs	r3, #0
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	e009      	b.n	80077da <UART_SetConfig+0xe2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a64      	ldr	r2, [pc, #400]	; (800795c <UART_SetConfig+0x264>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d102      	bne.n	80077d6 <UART_SetConfig+0xde>
 80077d0:	2300      	movs	r3, #0
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e001      	b.n	80077da <UART_SetConfig+0xe2>
 80077d6:	2310      	movs	r3, #16
 80077d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e2:	d15a      	bne.n	800789a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80077e4:	7ffb      	ldrb	r3, [r7, #31]
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d827      	bhi.n	800783a <UART_SetConfig+0x142>
 80077ea:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <UART_SetConfig+0xf8>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	08007815 	.word	0x08007815
 80077f4:	0800781d 	.word	0x0800781d
 80077f8:	08007825 	.word	0x08007825
 80077fc:	0800783b 	.word	0x0800783b
 8007800:	0800782b 	.word	0x0800782b
 8007804:	0800783b 	.word	0x0800783b
 8007808:	0800783b 	.word	0x0800783b
 800780c:	0800783b 	.word	0x0800783b
 8007810:	08007833 	.word	0x08007833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007814:	f7fe f9a8 	bl	8005b68 <HAL_RCC_GetPCLK1Freq>
 8007818:	61b8      	str	r0, [r7, #24]
        break;
 800781a:	e013      	b.n	8007844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800781c:	f7fe f9c6 	bl	8005bac <HAL_RCC_GetPCLK2Freq>
 8007820:	61b8      	str	r0, [r7, #24]
        break;
 8007822:	e00f      	b.n	8007844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007824:	4b4e      	ldr	r3, [pc, #312]	; (8007960 <UART_SetConfig+0x268>)
 8007826:	61bb      	str	r3, [r7, #24]
        break;
 8007828:	e00c      	b.n	8007844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800782a:	f7fe f927 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 800782e:	61b8      	str	r0, [r7, #24]
        break;
 8007830:	e008      	b.n	8007844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007836:	61bb      	str	r3, [r7, #24]
        break;
 8007838:	e004      	b.n	8007844 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	77bb      	strb	r3, [r7, #30]
        break;
 8007842:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d074      	beq.n	8007934 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	005a      	lsls	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	441a      	add	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	fbb2 f3f3 	udiv	r3, r2, r3
 800785e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b0f      	cmp	r3, #15
 8007864:	d916      	bls.n	8007894 <UART_SetConfig+0x19c>
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786c:	d212      	bcs.n	8007894 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f023 030f 	bic.w	r3, r3, #15
 8007876:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	b29b      	uxth	r3, r3
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	b29a      	uxth	r2, r3
 8007884:	89fb      	ldrh	r3, [r7, #14]
 8007886:	4313      	orrs	r3, r2
 8007888:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	89fa      	ldrh	r2, [r7, #14]
 8007890:	60da      	str	r2, [r3, #12]
 8007892:	e04f      	b.n	8007934 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	77bb      	strb	r3, [r7, #30]
 8007898:	e04c      	b.n	8007934 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800789a:	7ffb      	ldrb	r3, [r7, #31]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d828      	bhi.n	80078f2 <UART_SetConfig+0x1fa>
 80078a0:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <UART_SetConfig+0x1b0>)
 80078a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a6:	bf00      	nop
 80078a8:	080078cd 	.word	0x080078cd
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	080078f3 	.word	0x080078f3
 80078b8:	080078e3 	.word	0x080078e3
 80078bc:	080078f3 	.word	0x080078f3
 80078c0:	080078f3 	.word	0x080078f3
 80078c4:	080078f3 	.word	0x080078f3
 80078c8:	080078eb 	.word	0x080078eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078cc:	f7fe f94c 	bl	8005b68 <HAL_RCC_GetPCLK1Freq>
 80078d0:	61b8      	str	r0, [r7, #24]
        break;
 80078d2:	e013      	b.n	80078fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078d4:	f7fe f96a 	bl	8005bac <HAL_RCC_GetPCLK2Freq>
 80078d8:	61b8      	str	r0, [r7, #24]
        break;
 80078da:	e00f      	b.n	80078fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078dc:	4b20      	ldr	r3, [pc, #128]	; (8007960 <UART_SetConfig+0x268>)
 80078de:	61bb      	str	r3, [r7, #24]
        break;
 80078e0:	e00c      	b.n	80078fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078e2:	f7fe f8cb 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 80078e6:	61b8      	str	r0, [r7, #24]
        break;
 80078e8:	e008      	b.n	80078fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ee:	61bb      	str	r3, [r7, #24]
        break;
 80078f0:	e004      	b.n	80078fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	77bb      	strb	r3, [r7, #30]
        break;
 80078fa:	bf00      	nop
    }

    if (pclk != 0U)
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d018      	beq.n	8007934 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	085a      	lsrs	r2, r3, #1
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	441a      	add	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b0f      	cmp	r3, #15
 800791a:	d909      	bls.n	8007930 <UART_SetConfig+0x238>
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007922:	d205      	bcs.n	8007930 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	b29a      	uxth	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60da      	str	r2, [r3, #12]
 800792e:	e001      	b.n	8007934 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007940:	7fbb      	ldrb	r3, [r7, #30]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	efff69f3 	.word	0xefff69f3
 8007950:	40013800 	.word	0x40013800
 8007954:	40021000 	.word	0x40021000
 8007958:	40004400 	.word	0x40004400
 800795c:	40004800 	.word	0x40004800
 8007960:	007a1200 	.word	0x007a1200

08007964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01a      	beq.n	8007a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a62:	d10a      	bne.n	8007a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	605a      	str	r2, [r3, #4]
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b098      	sub	sp, #96	; 0x60
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ab8:	f7fa fd3c 	bl	8002534 <HAL_GetTick>
 8007abc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d12e      	bne.n	8007b2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f88c 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d021      	beq.n	8007b2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afa:	653b      	str	r3, [r7, #80]	; 0x50
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b04:	647b      	str	r3, [r7, #68]	; 0x44
 8007b06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e6      	bne.n	8007ae6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e062      	b.n	8007bf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d149      	bne.n	8007bcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b40:	2200      	movs	r2, #0
 8007b42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f856 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d03c      	beq.n	8007bcc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b70:	633b      	str	r3, [r7, #48]	; 0x30
 8007b72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e6      	bne.n	8007b52 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0301 	bic.w	r3, r3, #1
 8007b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba4:	61fa      	str	r2, [r7, #28]
 8007ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	69b9      	ldr	r1, [r7, #24]
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e5      	bne.n	8007b84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e011      	b.n	8007bf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3758      	adds	r7, #88	; 0x58
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c08:	e049      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c10:	d045      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c12:	f7fa fc8f 	bl	8002534 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d302      	bcc.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e048      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d031      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d110      	bne.n	8007c6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f838 	bl	8007cc6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e029      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c78:	d111      	bne.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f81e 	bl	8007cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e00f      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d0a6      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b095      	sub	sp, #84	; 0x54
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cec:	643b      	str	r3, [r7, #64]	; 0x40
 8007cee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e5      	bne.n	8007d00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d118      	bne.n	8007d6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f023 0310 	bic.w	r3, r3, #16
 8007d50:	647b      	str	r3, [r7, #68]	; 0x44
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d5a:	61bb      	str	r3, [r7, #24]
 8007d5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6979      	ldr	r1, [r7, #20]
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	613b      	str	r3, [r7, #16]
   return(result);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e6      	bne.n	8007d3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d82:	bf00      	nop
 8007d84:	3754      	adds	r7, #84	; 0x54
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <__cvt>:
 8007d8e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d92:	ec55 4b10 	vmov	r4, r5, d0
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	460e      	mov	r6, r1
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	bfbb      	ittet	lt
 8007da0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007da4:	461d      	movlt	r5, r3
 8007da6:	2300      	movge	r3, #0
 8007da8:	232d      	movlt	r3, #45	; 0x2d
 8007daa:	700b      	strb	r3, [r1, #0]
 8007dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007db2:	4691      	mov	r9, r2
 8007db4:	f023 0820 	bic.w	r8, r3, #32
 8007db8:	bfbc      	itt	lt
 8007dba:	4622      	movlt	r2, r4
 8007dbc:	4614      	movlt	r4, r2
 8007dbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dc2:	d005      	beq.n	8007dd0 <__cvt+0x42>
 8007dc4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dc8:	d100      	bne.n	8007dcc <__cvt+0x3e>
 8007dca:	3601      	adds	r6, #1
 8007dcc:	2102      	movs	r1, #2
 8007dce:	e000      	b.n	8007dd2 <__cvt+0x44>
 8007dd0:	2103      	movs	r1, #3
 8007dd2:	ab03      	add	r3, sp, #12
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	ab02      	add	r3, sp, #8
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	ec45 4b10 	vmov	d0, r4, r5
 8007dde:	4653      	mov	r3, sl
 8007de0:	4632      	mov	r2, r6
 8007de2:	f000 fdad 	bl	8008940 <_dtoa_r>
 8007de6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dea:	4607      	mov	r7, r0
 8007dec:	d102      	bne.n	8007df4 <__cvt+0x66>
 8007dee:	f019 0f01 	tst.w	r9, #1
 8007df2:	d022      	beq.n	8007e3a <__cvt+0xac>
 8007df4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007df8:	eb07 0906 	add.w	r9, r7, r6
 8007dfc:	d110      	bne.n	8007e20 <__cvt+0x92>
 8007dfe:	783b      	ldrb	r3, [r7, #0]
 8007e00:	2b30      	cmp	r3, #48	; 0x30
 8007e02:	d10a      	bne.n	8007e1a <__cvt+0x8c>
 8007e04:	2200      	movs	r2, #0
 8007e06:	2300      	movs	r3, #0
 8007e08:	4620      	mov	r0, r4
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	f7f8 fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e10:	b918      	cbnz	r0, 8007e1a <__cvt+0x8c>
 8007e12:	f1c6 0601 	rsb	r6, r6, #1
 8007e16:	f8ca 6000 	str.w	r6, [sl]
 8007e1a:	f8da 3000 	ldr.w	r3, [sl]
 8007e1e:	4499      	add	r9, r3
 8007e20:	2200      	movs	r2, #0
 8007e22:	2300      	movs	r3, #0
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	f7f8 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e2c:	b108      	cbz	r0, 8007e32 <__cvt+0xa4>
 8007e2e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e32:	2230      	movs	r2, #48	; 0x30
 8007e34:	9b03      	ldr	r3, [sp, #12]
 8007e36:	454b      	cmp	r3, r9
 8007e38:	d307      	bcc.n	8007e4a <__cvt+0xbc>
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e3e:	1bdb      	subs	r3, r3, r7
 8007e40:	4638      	mov	r0, r7
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	b004      	add	sp, #16
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	1c59      	adds	r1, r3, #1
 8007e4c:	9103      	str	r1, [sp, #12]
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	e7f0      	b.n	8007e34 <__cvt+0xa6>

08007e52 <__exponent>:
 8007e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e54:	4603      	mov	r3, r0
 8007e56:	2900      	cmp	r1, #0
 8007e58:	bfb8      	it	lt
 8007e5a:	4249      	neglt	r1, r1
 8007e5c:	f803 2b02 	strb.w	r2, [r3], #2
 8007e60:	bfb4      	ite	lt
 8007e62:	222d      	movlt	r2, #45	; 0x2d
 8007e64:	222b      	movge	r2, #43	; 0x2b
 8007e66:	2909      	cmp	r1, #9
 8007e68:	7042      	strb	r2, [r0, #1]
 8007e6a:	dd2a      	ble.n	8007ec2 <__exponent+0x70>
 8007e6c:	f10d 0207 	add.w	r2, sp, #7
 8007e70:	4617      	mov	r7, r2
 8007e72:	260a      	movs	r6, #10
 8007e74:	4694      	mov	ip, r2
 8007e76:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e7a:	fb06 1415 	mls	r4, r6, r5, r1
 8007e7e:	3430      	adds	r4, #48	; 0x30
 8007e80:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e84:	460c      	mov	r4, r1
 8007e86:	2c63      	cmp	r4, #99	; 0x63
 8007e88:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	dcf1      	bgt.n	8007e74 <__exponent+0x22>
 8007e90:	3130      	adds	r1, #48	; 0x30
 8007e92:	f1ac 0402 	sub.w	r4, ip, #2
 8007e96:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e9a:	1c41      	adds	r1, r0, #1
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	42ba      	cmp	r2, r7
 8007ea0:	d30a      	bcc.n	8007eb8 <__exponent+0x66>
 8007ea2:	f10d 0209 	add.w	r2, sp, #9
 8007ea6:	eba2 020c 	sub.w	r2, r2, ip
 8007eaa:	42bc      	cmp	r4, r7
 8007eac:	bf88      	it	hi
 8007eae:	2200      	movhi	r2, #0
 8007eb0:	4413      	add	r3, r2
 8007eb2:	1a18      	subs	r0, r3, r0
 8007eb4:	b003      	add	sp, #12
 8007eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ebc:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ec0:	e7ed      	b.n	8007e9e <__exponent+0x4c>
 8007ec2:	2330      	movs	r3, #48	; 0x30
 8007ec4:	3130      	adds	r1, #48	; 0x30
 8007ec6:	7083      	strb	r3, [r0, #2]
 8007ec8:	70c1      	strb	r1, [r0, #3]
 8007eca:	1d03      	adds	r3, r0, #4
 8007ecc:	e7f1      	b.n	8007eb2 <__exponent+0x60>
	...

08007ed0 <_printf_float>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	ed2d 8b02 	vpush	{d8}
 8007ed8:	b08d      	sub	sp, #52	; 0x34
 8007eda:	460c      	mov	r4, r1
 8007edc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ee0:	4616      	mov	r6, r2
 8007ee2:	461f      	mov	r7, r3
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	f000 fc71 	bl	80087cc <_localeconv_r>
 8007eea:	f8d0 a000 	ldr.w	sl, [r0]
 8007eee:	4650      	mov	r0, sl
 8007ef0:	f7f8 f9be 	bl	8000270 <strlen>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	f8d8 3000 	ldr.w	r3, [r8]
 8007f00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f04:	3307      	adds	r3, #7
 8007f06:	f023 0307 	bic.w	r3, r3, #7
 8007f0a:	f103 0208 	add.w	r2, r3, #8
 8007f0e:	f8c8 2000 	str.w	r2, [r8]
 8007f12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f1a:	9307      	str	r3, [sp, #28]
 8007f1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f20:	ee08 0a10 	vmov	s16, r0
 8007f24:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f2c:	4b9e      	ldr	r3, [pc, #632]	; (80081a8 <_printf_float+0x2d8>)
 8007f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f32:	f7f8 fdfb 	bl	8000b2c <__aeabi_dcmpun>
 8007f36:	bb88      	cbnz	r0, 8007f9c <_printf_float+0xcc>
 8007f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f3c:	4b9a      	ldr	r3, [pc, #616]	; (80081a8 <_printf_float+0x2d8>)
 8007f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f42:	f7f8 fdd5 	bl	8000af0 <__aeabi_dcmple>
 8007f46:	bb48      	cbnz	r0, 8007f9c <_printf_float+0xcc>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	4649      	mov	r1, r9
 8007f50:	f7f8 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8007f54:	b110      	cbz	r0, 8007f5c <_printf_float+0x8c>
 8007f56:	232d      	movs	r3, #45	; 0x2d
 8007f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f5c:	4a93      	ldr	r2, [pc, #588]	; (80081ac <_printf_float+0x2dc>)
 8007f5e:	4b94      	ldr	r3, [pc, #592]	; (80081b0 <_printf_float+0x2e0>)
 8007f60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f64:	bf94      	ite	ls
 8007f66:	4690      	movls	r8, r2
 8007f68:	4698      	movhi	r8, r3
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	6123      	str	r3, [r4, #16]
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	f023 0304 	bic.w	r3, r3, #4
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	f04f 0900 	mov.w	r9, #0
 8007f7a:	9700      	str	r7, [sp, #0]
 8007f7c:	4633      	mov	r3, r6
 8007f7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f9da 	bl	800833c <_printf_common>
 8007f88:	3001      	adds	r0, #1
 8007f8a:	f040 8090 	bne.w	80080ae <_printf_float+0x1de>
 8007f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f92:	b00d      	add	sp, #52	; 0x34
 8007f94:	ecbd 8b02 	vpop	{d8}
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	f7f8 fdc2 	bl	8000b2c <__aeabi_dcmpun>
 8007fa8:	b140      	cbz	r0, 8007fbc <_printf_float+0xec>
 8007faa:	464b      	mov	r3, r9
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bfbc      	itt	lt
 8007fb0:	232d      	movlt	r3, #45	; 0x2d
 8007fb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fb6:	4a7f      	ldr	r2, [pc, #508]	; (80081b4 <_printf_float+0x2e4>)
 8007fb8:	4b7f      	ldr	r3, [pc, #508]	; (80081b8 <_printf_float+0x2e8>)
 8007fba:	e7d1      	b.n	8007f60 <_printf_float+0x90>
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fc2:	9206      	str	r2, [sp, #24]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	d13f      	bne.n	8008048 <_printf_float+0x178>
 8007fc8:	2306      	movs	r3, #6
 8007fca:	6063      	str	r3, [r4, #4]
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	6861      	ldr	r1, [r4, #4]
 8007fd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	ab0a      	add	r3, sp, #40	; 0x28
 8007fda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fde:	ab09      	add	r3, sp, #36	; 0x24
 8007fe0:	ec49 8b10 	vmov	d0, r8, r9
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	6022      	str	r2, [r4, #0]
 8007fe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fec:	4628      	mov	r0, r5
 8007fee:	f7ff fece 	bl	8007d8e <__cvt>
 8007ff2:	9b06      	ldr	r3, [sp, #24]
 8007ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ff6:	2b47      	cmp	r3, #71	; 0x47
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	d108      	bne.n	800800e <_printf_float+0x13e>
 8007ffc:	1cc8      	adds	r0, r1, #3
 8007ffe:	db02      	blt.n	8008006 <_printf_float+0x136>
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	4299      	cmp	r1, r3
 8008004:	dd41      	ble.n	800808a <_printf_float+0x1ba>
 8008006:	f1ab 0302 	sub.w	r3, fp, #2
 800800a:	fa5f fb83 	uxtb.w	fp, r3
 800800e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008012:	d820      	bhi.n	8008056 <_printf_float+0x186>
 8008014:	3901      	subs	r1, #1
 8008016:	465a      	mov	r2, fp
 8008018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800801c:	9109      	str	r1, [sp, #36]	; 0x24
 800801e:	f7ff ff18 	bl	8007e52 <__exponent>
 8008022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008024:	1813      	adds	r3, r2, r0
 8008026:	2a01      	cmp	r2, #1
 8008028:	4681      	mov	r9, r0
 800802a:	6123      	str	r3, [r4, #16]
 800802c:	dc02      	bgt.n	8008034 <_printf_float+0x164>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	07d2      	lsls	r2, r2, #31
 8008032:	d501      	bpl.n	8008038 <_printf_float+0x168>
 8008034:	3301      	adds	r3, #1
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800803c:	2b00      	cmp	r3, #0
 800803e:	d09c      	beq.n	8007f7a <_printf_float+0xaa>
 8008040:	232d      	movs	r3, #45	; 0x2d
 8008042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008046:	e798      	b.n	8007f7a <_printf_float+0xaa>
 8008048:	9a06      	ldr	r2, [sp, #24]
 800804a:	2a47      	cmp	r2, #71	; 0x47
 800804c:	d1be      	bne.n	8007fcc <_printf_float+0xfc>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1bc      	bne.n	8007fcc <_printf_float+0xfc>
 8008052:	2301      	movs	r3, #1
 8008054:	e7b9      	b.n	8007fca <_printf_float+0xfa>
 8008056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800805a:	d118      	bne.n	800808e <_printf_float+0x1be>
 800805c:	2900      	cmp	r1, #0
 800805e:	6863      	ldr	r3, [r4, #4]
 8008060:	dd0b      	ble.n	800807a <_printf_float+0x1aa>
 8008062:	6121      	str	r1, [r4, #16]
 8008064:	b913      	cbnz	r3, 800806c <_printf_float+0x19c>
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	07d0      	lsls	r0, r2, #31
 800806a:	d502      	bpl.n	8008072 <_printf_float+0x1a2>
 800806c:	3301      	adds	r3, #1
 800806e:	440b      	add	r3, r1
 8008070:	6123      	str	r3, [r4, #16]
 8008072:	65a1      	str	r1, [r4, #88]	; 0x58
 8008074:	f04f 0900 	mov.w	r9, #0
 8008078:	e7de      	b.n	8008038 <_printf_float+0x168>
 800807a:	b913      	cbnz	r3, 8008082 <_printf_float+0x1b2>
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	07d2      	lsls	r2, r2, #31
 8008080:	d501      	bpl.n	8008086 <_printf_float+0x1b6>
 8008082:	3302      	adds	r3, #2
 8008084:	e7f4      	b.n	8008070 <_printf_float+0x1a0>
 8008086:	2301      	movs	r3, #1
 8008088:	e7f2      	b.n	8008070 <_printf_float+0x1a0>
 800808a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800808e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008090:	4299      	cmp	r1, r3
 8008092:	db05      	blt.n	80080a0 <_printf_float+0x1d0>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	6121      	str	r1, [r4, #16]
 8008098:	07d8      	lsls	r0, r3, #31
 800809a:	d5ea      	bpl.n	8008072 <_printf_float+0x1a2>
 800809c:	1c4b      	adds	r3, r1, #1
 800809e:	e7e7      	b.n	8008070 <_printf_float+0x1a0>
 80080a0:	2900      	cmp	r1, #0
 80080a2:	bfd4      	ite	le
 80080a4:	f1c1 0202 	rsble	r2, r1, #2
 80080a8:	2201      	movgt	r2, #1
 80080aa:	4413      	add	r3, r2
 80080ac:	e7e0      	b.n	8008070 <_printf_float+0x1a0>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	055a      	lsls	r2, r3, #21
 80080b2:	d407      	bmi.n	80080c4 <_printf_float+0x1f4>
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	4642      	mov	r2, r8
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	d12c      	bne.n	800811c <_printf_float+0x24c>
 80080c2:	e764      	b.n	8007f8e <_printf_float+0xbe>
 80080c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080c8:	f240 80e0 	bls.w	800828c <_printf_float+0x3bc>
 80080cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080d0:	2200      	movs	r2, #0
 80080d2:	2300      	movs	r3, #0
 80080d4:	f7f8 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d034      	beq.n	8008146 <_printf_float+0x276>
 80080dc:	4a37      	ldr	r2, [pc, #220]	; (80081bc <_printf_float+0x2ec>)
 80080de:	2301      	movs	r3, #1
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af51 	beq.w	8007f8e <_printf_float+0xbe>
 80080ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080f0:	429a      	cmp	r2, r3
 80080f2:	db02      	blt.n	80080fa <_printf_float+0x22a>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	07d8      	lsls	r0, r3, #31
 80080f8:	d510      	bpl.n	800811c <_printf_float+0x24c>
 80080fa:	ee18 3a10 	vmov	r3, s16
 80080fe:	4652      	mov	r2, sl
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	f43f af41 	beq.w	8007f8e <_printf_float+0xbe>
 800810c:	f04f 0800 	mov.w	r8, #0
 8008110:	f104 091a 	add.w	r9, r4, #26
 8008114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008116:	3b01      	subs	r3, #1
 8008118:	4543      	cmp	r3, r8
 800811a:	dc09      	bgt.n	8008130 <_printf_float+0x260>
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	079b      	lsls	r3, r3, #30
 8008120:	f100 8107 	bmi.w	8008332 <_printf_float+0x462>
 8008124:	68e0      	ldr	r0, [r4, #12]
 8008126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008128:	4298      	cmp	r0, r3
 800812a:	bfb8      	it	lt
 800812c:	4618      	movlt	r0, r3
 800812e:	e730      	b.n	8007f92 <_printf_float+0xc2>
 8008130:	2301      	movs	r3, #1
 8008132:	464a      	mov	r2, r9
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f af27 	beq.w	8007f8e <_printf_float+0xbe>
 8008140:	f108 0801 	add.w	r8, r8, #1
 8008144:	e7e6      	b.n	8008114 <_printf_float+0x244>
 8008146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	dc39      	bgt.n	80081c0 <_printf_float+0x2f0>
 800814c:	4a1b      	ldr	r2, [pc, #108]	; (80081bc <_printf_float+0x2ec>)
 800814e:	2301      	movs	r3, #1
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f af19 	beq.w	8007f8e <_printf_float+0xbe>
 800815c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008160:	4313      	orrs	r3, r2
 8008162:	d102      	bne.n	800816a <_printf_float+0x29a>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	07d9      	lsls	r1, r3, #31
 8008168:	d5d8      	bpl.n	800811c <_printf_float+0x24c>
 800816a:	ee18 3a10 	vmov	r3, s16
 800816e:	4652      	mov	r2, sl
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	f43f af09 	beq.w	8007f8e <_printf_float+0xbe>
 800817c:	f04f 0900 	mov.w	r9, #0
 8008180:	f104 0a1a 	add.w	sl, r4, #26
 8008184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008186:	425b      	negs	r3, r3
 8008188:	454b      	cmp	r3, r9
 800818a:	dc01      	bgt.n	8008190 <_printf_float+0x2c0>
 800818c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818e:	e792      	b.n	80080b6 <_printf_float+0x1e6>
 8008190:	2301      	movs	r3, #1
 8008192:	4652      	mov	r2, sl
 8008194:	4631      	mov	r1, r6
 8008196:	4628      	mov	r0, r5
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	f43f aef7 	beq.w	8007f8e <_printf_float+0xbe>
 80081a0:	f109 0901 	add.w	r9, r9, #1
 80081a4:	e7ee      	b.n	8008184 <_printf_float+0x2b4>
 80081a6:	bf00      	nop
 80081a8:	7fefffff 	.word	0x7fefffff
 80081ac:	0800a7c8 	.word	0x0800a7c8
 80081b0:	0800a7cc 	.word	0x0800a7cc
 80081b4:	0800a7d0 	.word	0x0800a7d0
 80081b8:	0800a7d4 	.word	0x0800a7d4
 80081bc:	0800a7d8 	.word	0x0800a7d8
 80081c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081c4:	429a      	cmp	r2, r3
 80081c6:	bfa8      	it	ge
 80081c8:	461a      	movge	r2, r3
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	4691      	mov	r9, r2
 80081ce:	dc37      	bgt.n	8008240 <_printf_float+0x370>
 80081d0:	f04f 0b00 	mov.w	fp, #0
 80081d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081d8:	f104 021a 	add.w	r2, r4, #26
 80081dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081de:	9305      	str	r3, [sp, #20]
 80081e0:	eba3 0309 	sub.w	r3, r3, r9
 80081e4:	455b      	cmp	r3, fp
 80081e6:	dc33      	bgt.n	8008250 <_printf_float+0x380>
 80081e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081ec:	429a      	cmp	r2, r3
 80081ee:	db3b      	blt.n	8008268 <_printf_float+0x398>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	07da      	lsls	r2, r3, #31
 80081f4:	d438      	bmi.n	8008268 <_printf_float+0x398>
 80081f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80081fa:	eba2 0903 	sub.w	r9, r2, r3
 80081fe:	9b05      	ldr	r3, [sp, #20]
 8008200:	1ad2      	subs	r2, r2, r3
 8008202:	4591      	cmp	r9, r2
 8008204:	bfa8      	it	ge
 8008206:	4691      	movge	r9, r2
 8008208:	f1b9 0f00 	cmp.w	r9, #0
 800820c:	dc35      	bgt.n	800827a <_printf_float+0x3aa>
 800820e:	f04f 0800 	mov.w	r8, #0
 8008212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008216:	f104 0a1a 	add.w	sl, r4, #26
 800821a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800821e:	1a9b      	subs	r3, r3, r2
 8008220:	eba3 0309 	sub.w	r3, r3, r9
 8008224:	4543      	cmp	r3, r8
 8008226:	f77f af79 	ble.w	800811c <_printf_float+0x24c>
 800822a:	2301      	movs	r3, #1
 800822c:	4652      	mov	r2, sl
 800822e:	4631      	mov	r1, r6
 8008230:	4628      	mov	r0, r5
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	f43f aeaa 	beq.w	8007f8e <_printf_float+0xbe>
 800823a:	f108 0801 	add.w	r8, r8, #1
 800823e:	e7ec      	b.n	800821a <_printf_float+0x34a>
 8008240:	4613      	mov	r3, r2
 8008242:	4631      	mov	r1, r6
 8008244:	4642      	mov	r2, r8
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	d1c0      	bne.n	80081d0 <_printf_float+0x300>
 800824e:	e69e      	b.n	8007f8e <_printf_float+0xbe>
 8008250:	2301      	movs	r3, #1
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	9205      	str	r2, [sp, #20]
 8008258:	47b8      	blx	r7
 800825a:	3001      	adds	r0, #1
 800825c:	f43f ae97 	beq.w	8007f8e <_printf_float+0xbe>
 8008260:	9a05      	ldr	r2, [sp, #20]
 8008262:	f10b 0b01 	add.w	fp, fp, #1
 8008266:	e7b9      	b.n	80081dc <_printf_float+0x30c>
 8008268:	ee18 3a10 	vmov	r3, s16
 800826c:	4652      	mov	r2, sl
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	d1be      	bne.n	80081f6 <_printf_float+0x326>
 8008278:	e689      	b.n	8007f8e <_printf_float+0xbe>
 800827a:	9a05      	ldr	r2, [sp, #20]
 800827c:	464b      	mov	r3, r9
 800827e:	4442      	add	r2, r8
 8008280:	4631      	mov	r1, r6
 8008282:	4628      	mov	r0, r5
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	d1c1      	bne.n	800820e <_printf_float+0x33e>
 800828a:	e680      	b.n	8007f8e <_printf_float+0xbe>
 800828c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800828e:	2a01      	cmp	r2, #1
 8008290:	dc01      	bgt.n	8008296 <_printf_float+0x3c6>
 8008292:	07db      	lsls	r3, r3, #31
 8008294:	d53a      	bpl.n	800830c <_printf_float+0x43c>
 8008296:	2301      	movs	r3, #1
 8008298:	4642      	mov	r2, r8
 800829a:	4631      	mov	r1, r6
 800829c:	4628      	mov	r0, r5
 800829e:	47b8      	blx	r7
 80082a0:	3001      	adds	r0, #1
 80082a2:	f43f ae74 	beq.w	8007f8e <_printf_float+0xbe>
 80082a6:	ee18 3a10 	vmov	r3, s16
 80082aa:	4652      	mov	r2, sl
 80082ac:	4631      	mov	r1, r6
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	f43f ae6b 	beq.w	8007f8e <_printf_float+0xbe>
 80082b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80082c4:	f7f8 fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 80082c8:	b9d8      	cbnz	r0, 8008302 <_printf_float+0x432>
 80082ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80082ce:	f108 0201 	add.w	r2, r8, #1
 80082d2:	4631      	mov	r1, r6
 80082d4:	4628      	mov	r0, r5
 80082d6:	47b8      	blx	r7
 80082d8:	3001      	adds	r0, #1
 80082da:	d10e      	bne.n	80082fa <_printf_float+0x42a>
 80082dc:	e657      	b.n	8007f8e <_printf_float+0xbe>
 80082de:	2301      	movs	r3, #1
 80082e0:	4652      	mov	r2, sl
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b8      	blx	r7
 80082e8:	3001      	adds	r0, #1
 80082ea:	f43f ae50 	beq.w	8007f8e <_printf_float+0xbe>
 80082ee:	f108 0801 	add.w	r8, r8, #1
 80082f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f4:	3b01      	subs	r3, #1
 80082f6:	4543      	cmp	r3, r8
 80082f8:	dcf1      	bgt.n	80082de <_printf_float+0x40e>
 80082fa:	464b      	mov	r3, r9
 80082fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008300:	e6da      	b.n	80080b8 <_printf_float+0x1e8>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	f104 0a1a 	add.w	sl, r4, #26
 800830a:	e7f2      	b.n	80082f2 <_printf_float+0x422>
 800830c:	2301      	movs	r3, #1
 800830e:	4642      	mov	r2, r8
 8008310:	e7df      	b.n	80082d2 <_printf_float+0x402>
 8008312:	2301      	movs	r3, #1
 8008314:	464a      	mov	r2, r9
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	f43f ae36 	beq.w	8007f8e <_printf_float+0xbe>
 8008322:	f108 0801 	add.w	r8, r8, #1
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800832a:	1a5b      	subs	r3, r3, r1
 800832c:	4543      	cmp	r3, r8
 800832e:	dcf0      	bgt.n	8008312 <_printf_float+0x442>
 8008330:	e6f8      	b.n	8008124 <_printf_float+0x254>
 8008332:	f04f 0800 	mov.w	r8, #0
 8008336:	f104 0919 	add.w	r9, r4, #25
 800833a:	e7f4      	b.n	8008326 <_printf_float+0x456>

0800833c <_printf_common>:
 800833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	4616      	mov	r6, r2
 8008342:	4699      	mov	r9, r3
 8008344:	688a      	ldr	r2, [r1, #8]
 8008346:	690b      	ldr	r3, [r1, #16]
 8008348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800834c:	4293      	cmp	r3, r2
 800834e:	bfb8      	it	lt
 8008350:	4613      	movlt	r3, r2
 8008352:	6033      	str	r3, [r6, #0]
 8008354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008358:	4607      	mov	r7, r0
 800835a:	460c      	mov	r4, r1
 800835c:	b10a      	cbz	r2, 8008362 <_printf_common+0x26>
 800835e:	3301      	adds	r3, #1
 8008360:	6033      	str	r3, [r6, #0]
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	0699      	lsls	r1, r3, #26
 8008366:	bf42      	ittt	mi
 8008368:	6833      	ldrmi	r3, [r6, #0]
 800836a:	3302      	addmi	r3, #2
 800836c:	6033      	strmi	r3, [r6, #0]
 800836e:	6825      	ldr	r5, [r4, #0]
 8008370:	f015 0506 	ands.w	r5, r5, #6
 8008374:	d106      	bne.n	8008384 <_printf_common+0x48>
 8008376:	f104 0a19 	add.w	sl, r4, #25
 800837a:	68e3      	ldr	r3, [r4, #12]
 800837c:	6832      	ldr	r2, [r6, #0]
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	42ab      	cmp	r3, r5
 8008382:	dc26      	bgt.n	80083d2 <_printf_common+0x96>
 8008384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008388:	1e13      	subs	r3, r2, #0
 800838a:	6822      	ldr	r2, [r4, #0]
 800838c:	bf18      	it	ne
 800838e:	2301      	movne	r3, #1
 8008390:	0692      	lsls	r2, r2, #26
 8008392:	d42b      	bmi.n	80083ec <_printf_common+0xb0>
 8008394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008398:	4649      	mov	r1, r9
 800839a:	4638      	mov	r0, r7
 800839c:	47c0      	blx	r8
 800839e:	3001      	adds	r0, #1
 80083a0:	d01e      	beq.n	80083e0 <_printf_common+0xa4>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	6922      	ldr	r2, [r4, #16]
 80083a6:	f003 0306 	and.w	r3, r3, #6
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	bf02      	ittt	eq
 80083ae:	68e5      	ldreq	r5, [r4, #12]
 80083b0:	6833      	ldreq	r3, [r6, #0]
 80083b2:	1aed      	subeq	r5, r5, r3
 80083b4:	68a3      	ldr	r3, [r4, #8]
 80083b6:	bf0c      	ite	eq
 80083b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083bc:	2500      	movne	r5, #0
 80083be:	4293      	cmp	r3, r2
 80083c0:	bfc4      	itt	gt
 80083c2:	1a9b      	subgt	r3, r3, r2
 80083c4:	18ed      	addgt	r5, r5, r3
 80083c6:	2600      	movs	r6, #0
 80083c8:	341a      	adds	r4, #26
 80083ca:	42b5      	cmp	r5, r6
 80083cc:	d11a      	bne.n	8008404 <_printf_common+0xc8>
 80083ce:	2000      	movs	r0, #0
 80083d0:	e008      	b.n	80083e4 <_printf_common+0xa8>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4652      	mov	r2, sl
 80083d6:	4649      	mov	r1, r9
 80083d8:	4638      	mov	r0, r7
 80083da:	47c0      	blx	r8
 80083dc:	3001      	adds	r0, #1
 80083de:	d103      	bne.n	80083e8 <_printf_common+0xac>
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e8:	3501      	adds	r5, #1
 80083ea:	e7c6      	b.n	800837a <_printf_common+0x3e>
 80083ec:	18e1      	adds	r1, r4, r3
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	2030      	movs	r0, #48	; 0x30
 80083f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083f6:	4422      	add	r2, r4
 80083f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008400:	3302      	adds	r3, #2
 8008402:	e7c7      	b.n	8008394 <_printf_common+0x58>
 8008404:	2301      	movs	r3, #1
 8008406:	4622      	mov	r2, r4
 8008408:	4649      	mov	r1, r9
 800840a:	4638      	mov	r0, r7
 800840c:	47c0      	blx	r8
 800840e:	3001      	adds	r0, #1
 8008410:	d0e6      	beq.n	80083e0 <_printf_common+0xa4>
 8008412:	3601      	adds	r6, #1
 8008414:	e7d9      	b.n	80083ca <_printf_common+0x8e>
	...

08008418 <_printf_i>:
 8008418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800841c:	7e0f      	ldrb	r7, [r1, #24]
 800841e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008420:	2f78      	cmp	r7, #120	; 0x78
 8008422:	4691      	mov	r9, r2
 8008424:	4680      	mov	r8, r0
 8008426:	460c      	mov	r4, r1
 8008428:	469a      	mov	sl, r3
 800842a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800842e:	d807      	bhi.n	8008440 <_printf_i+0x28>
 8008430:	2f62      	cmp	r7, #98	; 0x62
 8008432:	d80a      	bhi.n	800844a <_printf_i+0x32>
 8008434:	2f00      	cmp	r7, #0
 8008436:	f000 80d4 	beq.w	80085e2 <_printf_i+0x1ca>
 800843a:	2f58      	cmp	r7, #88	; 0x58
 800843c:	f000 80c0 	beq.w	80085c0 <_printf_i+0x1a8>
 8008440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008448:	e03a      	b.n	80084c0 <_printf_i+0xa8>
 800844a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800844e:	2b15      	cmp	r3, #21
 8008450:	d8f6      	bhi.n	8008440 <_printf_i+0x28>
 8008452:	a101      	add	r1, pc, #4	; (adr r1, 8008458 <_printf_i+0x40>)
 8008454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008458:	080084b1 	.word	0x080084b1
 800845c:	080084c5 	.word	0x080084c5
 8008460:	08008441 	.word	0x08008441
 8008464:	08008441 	.word	0x08008441
 8008468:	08008441 	.word	0x08008441
 800846c:	08008441 	.word	0x08008441
 8008470:	080084c5 	.word	0x080084c5
 8008474:	08008441 	.word	0x08008441
 8008478:	08008441 	.word	0x08008441
 800847c:	08008441 	.word	0x08008441
 8008480:	08008441 	.word	0x08008441
 8008484:	080085c9 	.word	0x080085c9
 8008488:	080084f1 	.word	0x080084f1
 800848c:	08008583 	.word	0x08008583
 8008490:	08008441 	.word	0x08008441
 8008494:	08008441 	.word	0x08008441
 8008498:	080085eb 	.word	0x080085eb
 800849c:	08008441 	.word	0x08008441
 80084a0:	080084f1 	.word	0x080084f1
 80084a4:	08008441 	.word	0x08008441
 80084a8:	08008441 	.word	0x08008441
 80084ac:	0800858b 	.word	0x0800858b
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	1d1a      	adds	r2, r3, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	602a      	str	r2, [r5, #0]
 80084b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084c0:	2301      	movs	r3, #1
 80084c2:	e09f      	b.n	8008604 <_printf_i+0x1ec>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	0607      	lsls	r7, r0, #24
 80084ca:	f103 0104 	add.w	r1, r3, #4
 80084ce:	6029      	str	r1, [r5, #0]
 80084d0:	d501      	bpl.n	80084d6 <_printf_i+0xbe>
 80084d2:	681e      	ldr	r6, [r3, #0]
 80084d4:	e003      	b.n	80084de <_printf_i+0xc6>
 80084d6:	0646      	lsls	r6, r0, #25
 80084d8:	d5fb      	bpl.n	80084d2 <_printf_i+0xba>
 80084da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80084de:	2e00      	cmp	r6, #0
 80084e0:	da03      	bge.n	80084ea <_printf_i+0xd2>
 80084e2:	232d      	movs	r3, #45	; 0x2d
 80084e4:	4276      	negs	r6, r6
 80084e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ea:	485a      	ldr	r0, [pc, #360]	; (8008654 <_printf_i+0x23c>)
 80084ec:	230a      	movs	r3, #10
 80084ee:	e012      	b.n	8008516 <_printf_i+0xfe>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1d19      	adds	r1, r3, #4
 80084f6:	6029      	str	r1, [r5, #0]
 80084f8:	0605      	lsls	r5, r0, #24
 80084fa:	d501      	bpl.n	8008500 <_printf_i+0xe8>
 80084fc:	681e      	ldr	r6, [r3, #0]
 80084fe:	e002      	b.n	8008506 <_printf_i+0xee>
 8008500:	0641      	lsls	r1, r0, #25
 8008502:	d5fb      	bpl.n	80084fc <_printf_i+0xe4>
 8008504:	881e      	ldrh	r6, [r3, #0]
 8008506:	4853      	ldr	r0, [pc, #332]	; (8008654 <_printf_i+0x23c>)
 8008508:	2f6f      	cmp	r7, #111	; 0x6f
 800850a:	bf0c      	ite	eq
 800850c:	2308      	moveq	r3, #8
 800850e:	230a      	movne	r3, #10
 8008510:	2100      	movs	r1, #0
 8008512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008516:	6865      	ldr	r5, [r4, #4]
 8008518:	60a5      	str	r5, [r4, #8]
 800851a:	2d00      	cmp	r5, #0
 800851c:	bfa2      	ittt	ge
 800851e:	6821      	ldrge	r1, [r4, #0]
 8008520:	f021 0104 	bicge.w	r1, r1, #4
 8008524:	6021      	strge	r1, [r4, #0]
 8008526:	b90e      	cbnz	r6, 800852c <_printf_i+0x114>
 8008528:	2d00      	cmp	r5, #0
 800852a:	d04b      	beq.n	80085c4 <_printf_i+0x1ac>
 800852c:	4615      	mov	r5, r2
 800852e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008532:	fb03 6711 	mls	r7, r3, r1, r6
 8008536:	5dc7      	ldrb	r7, [r0, r7]
 8008538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800853c:	4637      	mov	r7, r6
 800853e:	42bb      	cmp	r3, r7
 8008540:	460e      	mov	r6, r1
 8008542:	d9f4      	bls.n	800852e <_printf_i+0x116>
 8008544:	2b08      	cmp	r3, #8
 8008546:	d10b      	bne.n	8008560 <_printf_i+0x148>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	07de      	lsls	r6, r3, #31
 800854c:	d508      	bpl.n	8008560 <_printf_i+0x148>
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	6861      	ldr	r1, [r4, #4]
 8008552:	4299      	cmp	r1, r3
 8008554:	bfde      	ittt	le
 8008556:	2330      	movle	r3, #48	; 0x30
 8008558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800855c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008560:	1b52      	subs	r2, r2, r5
 8008562:	6122      	str	r2, [r4, #16]
 8008564:	f8cd a000 	str.w	sl, [sp]
 8008568:	464b      	mov	r3, r9
 800856a:	aa03      	add	r2, sp, #12
 800856c:	4621      	mov	r1, r4
 800856e:	4640      	mov	r0, r8
 8008570:	f7ff fee4 	bl	800833c <_printf_common>
 8008574:	3001      	adds	r0, #1
 8008576:	d14a      	bne.n	800860e <_printf_i+0x1f6>
 8008578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800857c:	b004      	add	sp, #16
 800857e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	f043 0320 	orr.w	r3, r3, #32
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	4833      	ldr	r0, [pc, #204]	; (8008658 <_printf_i+0x240>)
 800858c:	2778      	movs	r7, #120	; 0x78
 800858e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	6829      	ldr	r1, [r5, #0]
 8008596:	061f      	lsls	r7, r3, #24
 8008598:	f851 6b04 	ldr.w	r6, [r1], #4
 800859c:	d402      	bmi.n	80085a4 <_printf_i+0x18c>
 800859e:	065f      	lsls	r7, r3, #25
 80085a0:	bf48      	it	mi
 80085a2:	b2b6      	uxthmi	r6, r6
 80085a4:	07df      	lsls	r7, r3, #31
 80085a6:	bf48      	it	mi
 80085a8:	f043 0320 	orrmi.w	r3, r3, #32
 80085ac:	6029      	str	r1, [r5, #0]
 80085ae:	bf48      	it	mi
 80085b0:	6023      	strmi	r3, [r4, #0]
 80085b2:	b91e      	cbnz	r6, 80085bc <_printf_i+0x1a4>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	f023 0320 	bic.w	r3, r3, #32
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	2310      	movs	r3, #16
 80085be:	e7a7      	b.n	8008510 <_printf_i+0xf8>
 80085c0:	4824      	ldr	r0, [pc, #144]	; (8008654 <_printf_i+0x23c>)
 80085c2:	e7e4      	b.n	800858e <_printf_i+0x176>
 80085c4:	4615      	mov	r5, r2
 80085c6:	e7bd      	b.n	8008544 <_printf_i+0x12c>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	6826      	ldr	r6, [r4, #0]
 80085cc:	6961      	ldr	r1, [r4, #20]
 80085ce:	1d18      	adds	r0, r3, #4
 80085d0:	6028      	str	r0, [r5, #0]
 80085d2:	0635      	lsls	r5, r6, #24
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	d501      	bpl.n	80085dc <_printf_i+0x1c4>
 80085d8:	6019      	str	r1, [r3, #0]
 80085da:	e002      	b.n	80085e2 <_printf_i+0x1ca>
 80085dc:	0670      	lsls	r0, r6, #25
 80085de:	d5fb      	bpl.n	80085d8 <_printf_i+0x1c0>
 80085e0:	8019      	strh	r1, [r3, #0]
 80085e2:	2300      	movs	r3, #0
 80085e4:	6123      	str	r3, [r4, #16]
 80085e6:	4615      	mov	r5, r2
 80085e8:	e7bc      	b.n	8008564 <_printf_i+0x14c>
 80085ea:	682b      	ldr	r3, [r5, #0]
 80085ec:	1d1a      	adds	r2, r3, #4
 80085ee:	602a      	str	r2, [r5, #0]
 80085f0:	681d      	ldr	r5, [r3, #0]
 80085f2:	6862      	ldr	r2, [r4, #4]
 80085f4:	2100      	movs	r1, #0
 80085f6:	4628      	mov	r0, r5
 80085f8:	f7f7 fdea 	bl	80001d0 <memchr>
 80085fc:	b108      	cbz	r0, 8008602 <_printf_i+0x1ea>
 80085fe:	1b40      	subs	r0, r0, r5
 8008600:	6060      	str	r0, [r4, #4]
 8008602:	6863      	ldr	r3, [r4, #4]
 8008604:	6123      	str	r3, [r4, #16]
 8008606:	2300      	movs	r3, #0
 8008608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800860c:	e7aa      	b.n	8008564 <_printf_i+0x14c>
 800860e:	6923      	ldr	r3, [r4, #16]
 8008610:	462a      	mov	r2, r5
 8008612:	4649      	mov	r1, r9
 8008614:	4640      	mov	r0, r8
 8008616:	47d0      	blx	sl
 8008618:	3001      	adds	r0, #1
 800861a:	d0ad      	beq.n	8008578 <_printf_i+0x160>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	079b      	lsls	r3, r3, #30
 8008620:	d413      	bmi.n	800864a <_printf_i+0x232>
 8008622:	68e0      	ldr	r0, [r4, #12]
 8008624:	9b03      	ldr	r3, [sp, #12]
 8008626:	4298      	cmp	r0, r3
 8008628:	bfb8      	it	lt
 800862a:	4618      	movlt	r0, r3
 800862c:	e7a6      	b.n	800857c <_printf_i+0x164>
 800862e:	2301      	movs	r3, #1
 8008630:	4632      	mov	r2, r6
 8008632:	4649      	mov	r1, r9
 8008634:	4640      	mov	r0, r8
 8008636:	47d0      	blx	sl
 8008638:	3001      	adds	r0, #1
 800863a:	d09d      	beq.n	8008578 <_printf_i+0x160>
 800863c:	3501      	adds	r5, #1
 800863e:	68e3      	ldr	r3, [r4, #12]
 8008640:	9903      	ldr	r1, [sp, #12]
 8008642:	1a5b      	subs	r3, r3, r1
 8008644:	42ab      	cmp	r3, r5
 8008646:	dcf2      	bgt.n	800862e <_printf_i+0x216>
 8008648:	e7eb      	b.n	8008622 <_printf_i+0x20a>
 800864a:	2500      	movs	r5, #0
 800864c:	f104 0619 	add.w	r6, r4, #25
 8008650:	e7f5      	b.n	800863e <_printf_i+0x226>
 8008652:	bf00      	nop
 8008654:	0800a7da 	.word	0x0800a7da
 8008658:	0800a7eb 	.word	0x0800a7eb

0800865c <std>:
 800865c:	2300      	movs	r3, #0
 800865e:	b510      	push	{r4, lr}
 8008660:	4604      	mov	r4, r0
 8008662:	e9c0 3300 	strd	r3, r3, [r0]
 8008666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800866a:	6083      	str	r3, [r0, #8]
 800866c:	8181      	strh	r1, [r0, #12]
 800866e:	6643      	str	r3, [r0, #100]	; 0x64
 8008670:	81c2      	strh	r2, [r0, #14]
 8008672:	6183      	str	r3, [r0, #24]
 8008674:	4619      	mov	r1, r3
 8008676:	2208      	movs	r2, #8
 8008678:	305c      	adds	r0, #92	; 0x5c
 800867a:	f000 f89f 	bl	80087bc <memset>
 800867e:	4b05      	ldr	r3, [pc, #20]	; (8008694 <std+0x38>)
 8008680:	6263      	str	r3, [r4, #36]	; 0x24
 8008682:	4b05      	ldr	r3, [pc, #20]	; (8008698 <std+0x3c>)
 8008684:	62a3      	str	r3, [r4, #40]	; 0x28
 8008686:	4b05      	ldr	r3, [pc, #20]	; (800869c <std+0x40>)
 8008688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800868a:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <std+0x44>)
 800868c:	6224      	str	r4, [r4, #32]
 800868e:	6323      	str	r3, [r4, #48]	; 0x30
 8008690:	bd10      	pop	{r4, pc}
 8008692:	bf00      	nop
 8008694:	08009ee1 	.word	0x08009ee1
 8008698:	08009f03 	.word	0x08009f03
 800869c:	08009f3b 	.word	0x08009f3b
 80086a0:	08009f5f 	.word	0x08009f5f

080086a4 <stdio_exit_handler>:
 80086a4:	4a02      	ldr	r2, [pc, #8]	; (80086b0 <stdio_exit_handler+0xc>)
 80086a6:	4903      	ldr	r1, [pc, #12]	; (80086b4 <stdio_exit_handler+0x10>)
 80086a8:	4803      	ldr	r0, [pc, #12]	; (80086b8 <stdio_exit_handler+0x14>)
 80086aa:	f000 b869 	b.w	8008780 <_fwalk_sglue>
 80086ae:	bf00      	nop
 80086b0:	20000010 	.word	0x20000010
 80086b4:	08009781 	.word	0x08009781
 80086b8:	2000001c 	.word	0x2000001c

080086bc <cleanup_stdio>:
 80086bc:	6841      	ldr	r1, [r0, #4]
 80086be:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <cleanup_stdio+0x34>)
 80086c0:	4299      	cmp	r1, r3
 80086c2:	b510      	push	{r4, lr}
 80086c4:	4604      	mov	r4, r0
 80086c6:	d001      	beq.n	80086cc <cleanup_stdio+0x10>
 80086c8:	f001 f85a 	bl	8009780 <_fflush_r>
 80086cc:	68a1      	ldr	r1, [r4, #8]
 80086ce:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <cleanup_stdio+0x38>)
 80086d0:	4299      	cmp	r1, r3
 80086d2:	d002      	beq.n	80086da <cleanup_stdio+0x1e>
 80086d4:	4620      	mov	r0, r4
 80086d6:	f001 f853 	bl	8009780 <_fflush_r>
 80086da:	68e1      	ldr	r1, [r4, #12]
 80086dc:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <cleanup_stdio+0x3c>)
 80086de:	4299      	cmp	r1, r3
 80086e0:	d004      	beq.n	80086ec <cleanup_stdio+0x30>
 80086e2:	4620      	mov	r0, r4
 80086e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e8:	f001 b84a 	b.w	8009780 <_fflush_r>
 80086ec:	bd10      	pop	{r4, pc}
 80086ee:	bf00      	nop
 80086f0:	200018d8 	.word	0x200018d8
 80086f4:	20001940 	.word	0x20001940
 80086f8:	200019a8 	.word	0x200019a8

080086fc <global_stdio_init.part.0>:
 80086fc:	b510      	push	{r4, lr}
 80086fe:	4b0b      	ldr	r3, [pc, #44]	; (800872c <global_stdio_init.part.0+0x30>)
 8008700:	4c0b      	ldr	r4, [pc, #44]	; (8008730 <global_stdio_init.part.0+0x34>)
 8008702:	4a0c      	ldr	r2, [pc, #48]	; (8008734 <global_stdio_init.part.0+0x38>)
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	4620      	mov	r0, r4
 8008708:	2200      	movs	r2, #0
 800870a:	2104      	movs	r1, #4
 800870c:	f7ff ffa6 	bl	800865c <std>
 8008710:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008714:	2201      	movs	r2, #1
 8008716:	2109      	movs	r1, #9
 8008718:	f7ff ffa0 	bl	800865c <std>
 800871c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008720:	2202      	movs	r2, #2
 8008722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008726:	2112      	movs	r1, #18
 8008728:	f7ff bf98 	b.w	800865c <std>
 800872c:	20001a10 	.word	0x20001a10
 8008730:	200018d8 	.word	0x200018d8
 8008734:	080086a5 	.word	0x080086a5

08008738 <__sfp_lock_acquire>:
 8008738:	4801      	ldr	r0, [pc, #4]	; (8008740 <__sfp_lock_acquire+0x8>)
 800873a:	f000 b875 	b.w	8008828 <__retarget_lock_acquire_recursive>
 800873e:	bf00      	nop
 8008740:	20001a15 	.word	0x20001a15

08008744 <__sfp_lock_release>:
 8008744:	4801      	ldr	r0, [pc, #4]	; (800874c <__sfp_lock_release+0x8>)
 8008746:	f000 b870 	b.w	800882a <__retarget_lock_release_recursive>
 800874a:	bf00      	nop
 800874c:	20001a15 	.word	0x20001a15

08008750 <__sinit>:
 8008750:	b510      	push	{r4, lr}
 8008752:	4604      	mov	r4, r0
 8008754:	f7ff fff0 	bl	8008738 <__sfp_lock_acquire>
 8008758:	6a23      	ldr	r3, [r4, #32]
 800875a:	b11b      	cbz	r3, 8008764 <__sinit+0x14>
 800875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008760:	f7ff bff0 	b.w	8008744 <__sfp_lock_release>
 8008764:	4b04      	ldr	r3, [pc, #16]	; (8008778 <__sinit+0x28>)
 8008766:	6223      	str	r3, [r4, #32]
 8008768:	4b04      	ldr	r3, [pc, #16]	; (800877c <__sinit+0x2c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f5      	bne.n	800875c <__sinit+0xc>
 8008770:	f7ff ffc4 	bl	80086fc <global_stdio_init.part.0>
 8008774:	e7f2      	b.n	800875c <__sinit+0xc>
 8008776:	bf00      	nop
 8008778:	080086bd 	.word	0x080086bd
 800877c:	20001a10 	.word	0x20001a10

08008780 <_fwalk_sglue>:
 8008780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008784:	4607      	mov	r7, r0
 8008786:	4688      	mov	r8, r1
 8008788:	4614      	mov	r4, r2
 800878a:	2600      	movs	r6, #0
 800878c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008790:	f1b9 0901 	subs.w	r9, r9, #1
 8008794:	d505      	bpl.n	80087a2 <_fwalk_sglue+0x22>
 8008796:	6824      	ldr	r4, [r4, #0]
 8008798:	2c00      	cmp	r4, #0
 800879a:	d1f7      	bne.n	800878c <_fwalk_sglue+0xc>
 800879c:	4630      	mov	r0, r6
 800879e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d907      	bls.n	80087b8 <_fwalk_sglue+0x38>
 80087a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087ac:	3301      	adds	r3, #1
 80087ae:	d003      	beq.n	80087b8 <_fwalk_sglue+0x38>
 80087b0:	4629      	mov	r1, r5
 80087b2:	4638      	mov	r0, r7
 80087b4:	47c0      	blx	r8
 80087b6:	4306      	orrs	r6, r0
 80087b8:	3568      	adds	r5, #104	; 0x68
 80087ba:	e7e9      	b.n	8008790 <_fwalk_sglue+0x10>

080087bc <memset>:
 80087bc:	4402      	add	r2, r0
 80087be:	4603      	mov	r3, r0
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d100      	bne.n	80087c6 <memset+0xa>
 80087c4:	4770      	bx	lr
 80087c6:	f803 1b01 	strb.w	r1, [r3], #1
 80087ca:	e7f9      	b.n	80087c0 <memset+0x4>

080087cc <_localeconv_r>:
 80087cc:	4800      	ldr	r0, [pc, #0]	; (80087d0 <_localeconv_r+0x4>)
 80087ce:	4770      	bx	lr
 80087d0:	2000015c 	.word	0x2000015c

080087d4 <__errno>:
 80087d4:	4b01      	ldr	r3, [pc, #4]	; (80087dc <__errno+0x8>)
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000068 	.word	0x20000068

080087e0 <__libc_init_array>:
 80087e0:	b570      	push	{r4, r5, r6, lr}
 80087e2:	4d0d      	ldr	r5, [pc, #52]	; (8008818 <__libc_init_array+0x38>)
 80087e4:	4c0d      	ldr	r4, [pc, #52]	; (800881c <__libc_init_array+0x3c>)
 80087e6:	1b64      	subs	r4, r4, r5
 80087e8:	10a4      	asrs	r4, r4, #2
 80087ea:	2600      	movs	r6, #0
 80087ec:	42a6      	cmp	r6, r4
 80087ee:	d109      	bne.n	8008804 <__libc_init_array+0x24>
 80087f0:	4d0b      	ldr	r5, [pc, #44]	; (8008820 <__libc_init_array+0x40>)
 80087f2:	4c0c      	ldr	r4, [pc, #48]	; (8008824 <__libc_init_array+0x44>)
 80087f4:	f001 ffbe 	bl	800a774 <_init>
 80087f8:	1b64      	subs	r4, r4, r5
 80087fa:	10a4      	asrs	r4, r4, #2
 80087fc:	2600      	movs	r6, #0
 80087fe:	42a6      	cmp	r6, r4
 8008800:	d105      	bne.n	800880e <__libc_init_array+0x2e>
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	f855 3b04 	ldr.w	r3, [r5], #4
 8008808:	4798      	blx	r3
 800880a:	3601      	adds	r6, #1
 800880c:	e7ee      	b.n	80087ec <__libc_init_array+0xc>
 800880e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008812:	4798      	blx	r3
 8008814:	3601      	adds	r6, #1
 8008816:	e7f2      	b.n	80087fe <__libc_init_array+0x1e>
 8008818:	0800ab3c 	.word	0x0800ab3c
 800881c:	0800ab3c 	.word	0x0800ab3c
 8008820:	0800ab3c 	.word	0x0800ab3c
 8008824:	0800ab40 	.word	0x0800ab40

08008828 <__retarget_lock_acquire_recursive>:
 8008828:	4770      	bx	lr

0800882a <__retarget_lock_release_recursive>:
 800882a:	4770      	bx	lr

0800882c <quorem>:
 800882c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	6903      	ldr	r3, [r0, #16]
 8008832:	690c      	ldr	r4, [r1, #16]
 8008834:	42a3      	cmp	r3, r4
 8008836:	4607      	mov	r7, r0
 8008838:	db7e      	blt.n	8008938 <quorem+0x10c>
 800883a:	3c01      	subs	r4, #1
 800883c:	f101 0814 	add.w	r8, r1, #20
 8008840:	f100 0514 	add.w	r5, r0, #20
 8008844:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800884e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008852:	3301      	adds	r3, #1
 8008854:	429a      	cmp	r2, r3
 8008856:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800885a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800885e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008862:	d331      	bcc.n	80088c8 <quorem+0x9c>
 8008864:	f04f 0e00 	mov.w	lr, #0
 8008868:	4640      	mov	r0, r8
 800886a:	46ac      	mov	ip, r5
 800886c:	46f2      	mov	sl, lr
 800886e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008872:	b293      	uxth	r3, r2
 8008874:	fb06 e303 	mla	r3, r6, r3, lr
 8008878:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800887c:	0c1a      	lsrs	r2, r3, #16
 800887e:	b29b      	uxth	r3, r3
 8008880:	ebaa 0303 	sub.w	r3, sl, r3
 8008884:	f8dc a000 	ldr.w	sl, [ip]
 8008888:	fa13 f38a 	uxtah	r3, r3, sl
 800888c:	fb06 220e 	mla	r2, r6, lr, r2
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	9b00      	ldr	r3, [sp, #0]
 8008894:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008898:	b292      	uxth	r2, r2
 800889a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800889e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80088a6:	4581      	cmp	r9, r0
 80088a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ac:	f84c 3b04 	str.w	r3, [ip], #4
 80088b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088b4:	d2db      	bcs.n	800886e <quorem+0x42>
 80088b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80088ba:	b92b      	cbnz	r3, 80088c8 <quorem+0x9c>
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	3b04      	subs	r3, #4
 80088c0:	429d      	cmp	r5, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	d32c      	bcc.n	8008920 <quorem+0xf4>
 80088c6:	613c      	str	r4, [r7, #16]
 80088c8:	4638      	mov	r0, r7
 80088ca:	f001 fa09 	bl	8009ce0 <__mcmp>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	db22      	blt.n	8008918 <quorem+0xec>
 80088d2:	3601      	adds	r6, #1
 80088d4:	4629      	mov	r1, r5
 80088d6:	2000      	movs	r0, #0
 80088d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80088dc:	f8d1 c000 	ldr.w	ip, [r1]
 80088e0:	b293      	uxth	r3, r2
 80088e2:	1ac3      	subs	r3, r0, r3
 80088e4:	0c12      	lsrs	r2, r2, #16
 80088e6:	fa13 f38c 	uxtah	r3, r3, ip
 80088ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80088ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088f8:	45c1      	cmp	r9, r8
 80088fa:	f841 3b04 	str.w	r3, [r1], #4
 80088fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008902:	d2e9      	bcs.n	80088d8 <quorem+0xac>
 8008904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008908:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800890c:	b922      	cbnz	r2, 8008918 <quorem+0xec>
 800890e:	3b04      	subs	r3, #4
 8008910:	429d      	cmp	r5, r3
 8008912:	461a      	mov	r2, r3
 8008914:	d30a      	bcc.n	800892c <quorem+0x100>
 8008916:	613c      	str	r4, [r7, #16]
 8008918:	4630      	mov	r0, r6
 800891a:	b003      	add	sp, #12
 800891c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	3b04      	subs	r3, #4
 8008924:	2a00      	cmp	r2, #0
 8008926:	d1ce      	bne.n	80088c6 <quorem+0x9a>
 8008928:	3c01      	subs	r4, #1
 800892a:	e7c9      	b.n	80088c0 <quorem+0x94>
 800892c:	6812      	ldr	r2, [r2, #0]
 800892e:	3b04      	subs	r3, #4
 8008930:	2a00      	cmp	r2, #0
 8008932:	d1f0      	bne.n	8008916 <quorem+0xea>
 8008934:	3c01      	subs	r4, #1
 8008936:	e7eb      	b.n	8008910 <quorem+0xe4>
 8008938:	2000      	movs	r0, #0
 800893a:	e7ee      	b.n	800891a <quorem+0xee>
 800893c:	0000      	movs	r0, r0
	...

08008940 <_dtoa_r>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	ed2d 8b04 	vpush	{d8-d9}
 8008948:	69c5      	ldr	r5, [r0, #28]
 800894a:	b093      	sub	sp, #76	; 0x4c
 800894c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008950:	ec57 6b10 	vmov	r6, r7, d0
 8008954:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008958:	9107      	str	r1, [sp, #28]
 800895a:	4604      	mov	r4, r0
 800895c:	920a      	str	r2, [sp, #40]	; 0x28
 800895e:	930d      	str	r3, [sp, #52]	; 0x34
 8008960:	b975      	cbnz	r5, 8008980 <_dtoa_r+0x40>
 8008962:	2010      	movs	r0, #16
 8008964:	f000 fdde 	bl	8009524 <malloc>
 8008968:	4602      	mov	r2, r0
 800896a:	61e0      	str	r0, [r4, #28]
 800896c:	b920      	cbnz	r0, 8008978 <_dtoa_r+0x38>
 800896e:	4bae      	ldr	r3, [pc, #696]	; (8008c28 <_dtoa_r+0x2e8>)
 8008970:	21ef      	movs	r1, #239	; 0xef
 8008972:	48ae      	ldr	r0, [pc, #696]	; (8008c2c <_dtoa_r+0x2ec>)
 8008974:	f001 fb5c 	bl	800a030 <__assert_func>
 8008978:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800897c:	6005      	str	r5, [r0, #0]
 800897e:	60c5      	str	r5, [r0, #12]
 8008980:	69e3      	ldr	r3, [r4, #28]
 8008982:	6819      	ldr	r1, [r3, #0]
 8008984:	b151      	cbz	r1, 800899c <_dtoa_r+0x5c>
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	604a      	str	r2, [r1, #4]
 800898a:	2301      	movs	r3, #1
 800898c:	4093      	lsls	r3, r2
 800898e:	608b      	str	r3, [r1, #8]
 8008990:	4620      	mov	r0, r4
 8008992:	f000 ff69 	bl	8009868 <_Bfree>
 8008996:	69e3      	ldr	r3, [r4, #28]
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	1e3b      	subs	r3, r7, #0
 800899e:	bfbb      	ittet	lt
 80089a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089a4:	9303      	strlt	r3, [sp, #12]
 80089a6:	2300      	movge	r3, #0
 80089a8:	2201      	movlt	r2, #1
 80089aa:	bfac      	ite	ge
 80089ac:	f8c8 3000 	strge.w	r3, [r8]
 80089b0:	f8c8 2000 	strlt.w	r2, [r8]
 80089b4:	4b9e      	ldr	r3, [pc, #632]	; (8008c30 <_dtoa_r+0x2f0>)
 80089b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80089ba:	ea33 0308 	bics.w	r3, r3, r8
 80089be:	d11b      	bne.n	80089f8 <_dtoa_r+0xb8>
 80089c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80089cc:	4333      	orrs	r3, r6
 80089ce:	f000 8593 	beq.w	80094f8 <_dtoa_r+0xbb8>
 80089d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089d4:	b963      	cbnz	r3, 80089f0 <_dtoa_r+0xb0>
 80089d6:	4b97      	ldr	r3, [pc, #604]	; (8008c34 <_dtoa_r+0x2f4>)
 80089d8:	e027      	b.n	8008a2a <_dtoa_r+0xea>
 80089da:	4b97      	ldr	r3, [pc, #604]	; (8008c38 <_dtoa_r+0x2f8>)
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	3308      	adds	r3, #8
 80089e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	9800      	ldr	r0, [sp, #0]
 80089e6:	b013      	add	sp, #76	; 0x4c
 80089e8:	ecbd 8b04 	vpop	{d8-d9}
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	4b90      	ldr	r3, [pc, #576]	; (8008c34 <_dtoa_r+0x2f4>)
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	3303      	adds	r3, #3
 80089f6:	e7f3      	b.n	80089e0 <_dtoa_r+0xa0>
 80089f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089fc:	2200      	movs	r2, #0
 80089fe:	ec51 0b17 	vmov	r0, r1, d7
 8008a02:	eeb0 8a47 	vmov.f32	s16, s14
 8008a06:	eef0 8a67 	vmov.f32	s17, s15
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f7f8 f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a10:	4681      	mov	r9, r0
 8008a12:	b160      	cbz	r0, 8008a2e <_dtoa_r+0xee>
 8008a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a16:	2301      	movs	r3, #1
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8568 	beq.w	80094f2 <_dtoa_r+0xbb2>
 8008a22:	4b86      	ldr	r3, [pc, #536]	; (8008c3c <_dtoa_r+0x2fc>)
 8008a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	e7da      	b.n	80089e4 <_dtoa_r+0xa4>
 8008a2e:	aa10      	add	r2, sp, #64	; 0x40
 8008a30:	a911      	add	r1, sp, #68	; 0x44
 8008a32:	4620      	mov	r0, r4
 8008a34:	eeb0 0a48 	vmov.f32	s0, s16
 8008a38:	eef0 0a68 	vmov.f32	s1, s17
 8008a3c:	f001 f9f6 	bl	8009e2c <__d2b>
 8008a40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a44:	4682      	mov	sl, r0
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	d07f      	beq.n	8008b4a <_dtoa_r+0x20a>
 8008a4a:	ee18 3a90 	vmov	r3, s17
 8008a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008a56:	ec51 0b18 	vmov	r0, r1, d8
 8008a5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a66:	4619      	mov	r1, r3
 8008a68:	2200      	movs	r2, #0
 8008a6a:	4b75      	ldr	r3, [pc, #468]	; (8008c40 <_dtoa_r+0x300>)
 8008a6c:	f7f7 fc0c 	bl	8000288 <__aeabi_dsub>
 8008a70:	a367      	add	r3, pc, #412	; (adr r3, 8008c10 <_dtoa_r+0x2d0>)
 8008a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a76:	f7f7 fdbf 	bl	80005f8 <__aeabi_dmul>
 8008a7a:	a367      	add	r3, pc, #412	; (adr r3, 8008c18 <_dtoa_r+0x2d8>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fc04 	bl	800028c <__adddf3>
 8008a84:	4606      	mov	r6, r0
 8008a86:	4628      	mov	r0, r5
 8008a88:	460f      	mov	r7, r1
 8008a8a:	f7f7 fd4b 	bl	8000524 <__aeabi_i2d>
 8008a8e:	a364      	add	r3, pc, #400	; (adr r3, 8008c20 <_dtoa_r+0x2e0>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fdb0 	bl	80005f8 <__aeabi_dmul>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	f7f7 fbf4 	bl	800028c <__adddf3>
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	f7f8 f856 	bl	8000b58 <__aeabi_d2iz>
 8008aac:	2200      	movs	r2, #0
 8008aae:	4683      	mov	fp, r0
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	f7f8 f811 	bl	8000adc <__aeabi_dcmplt>
 8008aba:	b148      	cbz	r0, 8008ad0 <_dtoa_r+0x190>
 8008abc:	4658      	mov	r0, fp
 8008abe:	f7f7 fd31 	bl	8000524 <__aeabi_i2d>
 8008ac2:	4632      	mov	r2, r6
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	f7f7 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aca:	b908      	cbnz	r0, 8008ad0 <_dtoa_r+0x190>
 8008acc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008ad0:	f1bb 0f16 	cmp.w	fp, #22
 8008ad4:	d857      	bhi.n	8008b86 <_dtoa_r+0x246>
 8008ad6:	4b5b      	ldr	r3, [pc, #364]	; (8008c44 <_dtoa_r+0x304>)
 8008ad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	ec51 0b18 	vmov	r0, r1, d8
 8008ae4:	f7f7 fffa 	bl	8000adc <__aeabi_dcmplt>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d04e      	beq.n	8008b8a <_dtoa_r+0x24a>
 8008aec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008af0:	2300      	movs	r3, #0
 8008af2:	930c      	str	r3, [sp, #48]	; 0x30
 8008af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008af6:	1b5b      	subs	r3, r3, r5
 8008af8:	1e5a      	subs	r2, r3, #1
 8008afa:	bf45      	ittet	mi
 8008afc:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b00:	9305      	strmi	r3, [sp, #20]
 8008b02:	2300      	movpl	r3, #0
 8008b04:	2300      	movmi	r3, #0
 8008b06:	9206      	str	r2, [sp, #24]
 8008b08:	bf54      	ite	pl
 8008b0a:	9305      	strpl	r3, [sp, #20]
 8008b0c:	9306      	strmi	r3, [sp, #24]
 8008b0e:	f1bb 0f00 	cmp.w	fp, #0
 8008b12:	db3c      	blt.n	8008b8e <_dtoa_r+0x24e>
 8008b14:	9b06      	ldr	r3, [sp, #24]
 8008b16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008b1a:	445b      	add	r3, fp
 8008b1c:	9306      	str	r3, [sp, #24]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	9b07      	ldr	r3, [sp, #28]
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d868      	bhi.n	8008bfa <_dtoa_r+0x2ba>
 8008b28:	2b05      	cmp	r3, #5
 8008b2a:	bfc4      	itt	gt
 8008b2c:	3b04      	subgt	r3, #4
 8008b2e:	9307      	strgt	r3, [sp, #28]
 8008b30:	9b07      	ldr	r3, [sp, #28]
 8008b32:	f1a3 0302 	sub.w	r3, r3, #2
 8008b36:	bfcc      	ite	gt
 8008b38:	2500      	movgt	r5, #0
 8008b3a:	2501      	movle	r5, #1
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	f200 8085 	bhi.w	8008c4c <_dtoa_r+0x30c>
 8008b42:	e8df f003 	tbb	[pc, r3]
 8008b46:	3b2e      	.short	0x3b2e
 8008b48:	5839      	.short	0x5839
 8008b4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b4e:	441d      	add	r5, r3
 8008b50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	bfc1      	itttt	gt
 8008b58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008b64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008b68:	bfd6      	itet	le
 8008b6a:	f1c3 0320 	rsble	r3, r3, #32
 8008b6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b72:	fa06 f003 	lslle.w	r0, r6, r3
 8008b76:	f7f7 fcc5 	bl	8000504 <__aeabi_ui2d>
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008b80:	3d01      	subs	r5, #1
 8008b82:	920e      	str	r2, [sp, #56]	; 0x38
 8008b84:	e76f      	b.n	8008a66 <_dtoa_r+0x126>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e7b3      	b.n	8008af2 <_dtoa_r+0x1b2>
 8008b8a:	900c      	str	r0, [sp, #48]	; 0x30
 8008b8c:	e7b2      	b.n	8008af4 <_dtoa_r+0x1b4>
 8008b8e:	9b05      	ldr	r3, [sp, #20]
 8008b90:	eba3 030b 	sub.w	r3, r3, fp
 8008b94:	9305      	str	r3, [sp, #20]
 8008b96:	f1cb 0300 	rsb	r3, fp, #0
 8008b9a:	9308      	str	r3, [sp, #32]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba0:	e7bf      	b.n	8008b22 <_dtoa_r+0x1e2>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dc52      	bgt.n	8008c52 <_dtoa_r+0x312>
 8008bac:	2301      	movs	r3, #1
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8008bb6:	e00b      	b.n	8008bd0 <_dtoa_r+0x290>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e7f3      	b.n	8008ba4 <_dtoa_r+0x264>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc2:	445b      	add	r3, fp
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	9304      	str	r3, [sp, #16]
 8008bcc:	bfb8      	it	lt
 8008bce:	2301      	movlt	r3, #1
 8008bd0:	69e0      	ldr	r0, [r4, #28]
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	f102 0614 	add.w	r6, r2, #20
 8008bda:	429e      	cmp	r6, r3
 8008bdc:	d93d      	bls.n	8008c5a <_dtoa_r+0x31a>
 8008bde:	6041      	str	r1, [r0, #4]
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 fe01 	bl	80097e8 <_Balloc>
 8008be6:	9000      	str	r0, [sp, #0]
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d139      	bne.n	8008c60 <_dtoa_r+0x320>
 8008bec:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <_dtoa_r+0x308>)
 8008bee:	4602      	mov	r2, r0
 8008bf0:	f240 11af 	movw	r1, #431	; 0x1af
 8008bf4:	e6bd      	b.n	8008972 <_dtoa_r+0x32>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e7e1      	b.n	8008bbe <_dtoa_r+0x27e>
 8008bfa:	2501      	movs	r5, #1
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9307      	str	r3, [sp, #28]
 8008c00:	9509      	str	r5, [sp, #36]	; 0x24
 8008c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2312      	movs	r3, #18
 8008c0e:	e7d1      	b.n	8008bb4 <_dtoa_r+0x274>
 8008c10:	636f4361 	.word	0x636f4361
 8008c14:	3fd287a7 	.word	0x3fd287a7
 8008c18:	8b60c8b3 	.word	0x8b60c8b3
 8008c1c:	3fc68a28 	.word	0x3fc68a28
 8008c20:	509f79fb 	.word	0x509f79fb
 8008c24:	3fd34413 	.word	0x3fd34413
 8008c28:	0800a809 	.word	0x0800a809
 8008c2c:	0800a820 	.word	0x0800a820
 8008c30:	7ff00000 	.word	0x7ff00000
 8008c34:	0800a805 	.word	0x0800a805
 8008c38:	0800a7fc 	.word	0x0800a7fc
 8008c3c:	0800a7d9 	.word	0x0800a7d9
 8008c40:	3ff80000 	.word	0x3ff80000
 8008c44:	0800a910 	.word	0x0800a910
 8008c48:	0800a878 	.word	0x0800a878
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c50:	e7d7      	b.n	8008c02 <_dtoa_r+0x2c2>
 8008c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	9304      	str	r3, [sp, #16]
 8008c58:	e7ba      	b.n	8008bd0 <_dtoa_r+0x290>
 8008c5a:	3101      	adds	r1, #1
 8008c5c:	0052      	lsls	r2, r2, #1
 8008c5e:	e7ba      	b.n	8008bd6 <_dtoa_r+0x296>
 8008c60:	69e3      	ldr	r3, [r4, #28]
 8008c62:	9a00      	ldr	r2, [sp, #0]
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	2b0e      	cmp	r3, #14
 8008c6a:	f200 80a8 	bhi.w	8008dbe <_dtoa_r+0x47e>
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	f000 80a5 	beq.w	8008dbe <_dtoa_r+0x47e>
 8008c74:	f1bb 0f00 	cmp.w	fp, #0
 8008c78:	dd38      	ble.n	8008cec <_dtoa_r+0x3ac>
 8008c7a:	4bc0      	ldr	r3, [pc, #768]	; (8008f7c <_dtoa_r+0x63c>)
 8008c7c:	f00b 020f 	and.w	r2, fp, #15
 8008c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008c88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008c90:	d019      	beq.n	8008cc6 <_dtoa_r+0x386>
 8008c92:	4bbb      	ldr	r3, [pc, #748]	; (8008f80 <_dtoa_r+0x640>)
 8008c94:	ec51 0b18 	vmov	r0, r1, d8
 8008c98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c9c:	f7f7 fdd6 	bl	800084c <__aeabi_ddiv>
 8008ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ca4:	f008 080f 	and.w	r8, r8, #15
 8008ca8:	2503      	movs	r5, #3
 8008caa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008f80 <_dtoa_r+0x640>
 8008cae:	f1b8 0f00 	cmp.w	r8, #0
 8008cb2:	d10a      	bne.n	8008cca <_dtoa_r+0x38a>
 8008cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb8:	4632      	mov	r2, r6
 8008cba:	463b      	mov	r3, r7
 8008cbc:	f7f7 fdc6 	bl	800084c <__aeabi_ddiv>
 8008cc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc4:	e02b      	b.n	8008d1e <_dtoa_r+0x3de>
 8008cc6:	2502      	movs	r5, #2
 8008cc8:	e7ef      	b.n	8008caa <_dtoa_r+0x36a>
 8008cca:	f018 0f01 	tst.w	r8, #1
 8008cce:	d008      	beq.n	8008ce2 <_dtoa_r+0x3a2>
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008cd8:	f7f7 fc8e 	bl	80005f8 <__aeabi_dmul>
 8008cdc:	3501      	adds	r5, #1
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ce6:	f109 0908 	add.w	r9, r9, #8
 8008cea:	e7e0      	b.n	8008cae <_dtoa_r+0x36e>
 8008cec:	f000 809f 	beq.w	8008e2e <_dtoa_r+0x4ee>
 8008cf0:	f1cb 0600 	rsb	r6, fp, #0
 8008cf4:	4ba1      	ldr	r3, [pc, #644]	; (8008f7c <_dtoa_r+0x63c>)
 8008cf6:	4fa2      	ldr	r7, [pc, #648]	; (8008f80 <_dtoa_r+0x640>)
 8008cf8:	f006 020f 	and.w	r2, r6, #15
 8008cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	ec51 0b18 	vmov	r0, r1, d8
 8008d08:	f7f7 fc76 	bl	80005f8 <__aeabi_dmul>
 8008d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d10:	1136      	asrs	r6, r6, #4
 8008d12:	2300      	movs	r3, #0
 8008d14:	2502      	movs	r5, #2
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	d17e      	bne.n	8008e18 <_dtoa_r+0x4d8>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1d0      	bne.n	8008cc0 <_dtoa_r+0x380>
 8008d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8084 	beq.w	8008e32 <_dtoa_r+0x4f2>
 8008d2a:	4b96      	ldr	r3, [pc, #600]	; (8008f84 <_dtoa_r+0x644>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 fed3 	bl	8000adc <__aeabi_dcmplt>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d07b      	beq.n	8008e32 <_dtoa_r+0x4f2>
 8008d3a:	9b04      	ldr	r3, [sp, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d078      	beq.n	8008e32 <_dtoa_r+0x4f2>
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dd39      	ble.n	8008dba <_dtoa_r+0x47a>
 8008d46:	4b90      	ldr	r3, [pc, #576]	; (8008f88 <_dtoa_r+0x648>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fc53 	bl	80005f8 <__aeabi_dmul>
 8008d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d56:	9e01      	ldr	r6, [sp, #4]
 8008d58:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008d5c:	3501      	adds	r5, #1
 8008d5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d62:	4628      	mov	r0, r5
 8008d64:	f7f7 fbde 	bl	8000524 <__aeabi_i2d>
 8008d68:	4642      	mov	r2, r8
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	f7f7 fc44 	bl	80005f8 <__aeabi_dmul>
 8008d70:	4b86      	ldr	r3, [pc, #536]	; (8008f8c <_dtoa_r+0x64c>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	f7f7 fa8a 	bl	800028c <__adddf3>
 8008d78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	d158      	bne.n	8008e38 <_dtoa_r+0x4f8>
 8008d86:	4b82      	ldr	r3, [pc, #520]	; (8008f90 <_dtoa_r+0x650>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f7f7 fa7b 	bl	8000288 <__aeabi_dsub>
 8008d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d96:	4680      	mov	r8, r0
 8008d98:	4689      	mov	r9, r1
 8008d9a:	f7f7 febd 	bl	8000b18 <__aeabi_dcmpgt>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	f040 8296 	bne.w	80092d0 <_dtoa_r+0x990>
 8008da4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008da8:	4640      	mov	r0, r8
 8008daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dae:	4649      	mov	r1, r9
 8008db0:	f7f7 fe94 	bl	8000adc <__aeabi_dcmplt>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	f040 8289 	bne.w	80092cc <_dtoa_r+0x98c>
 8008dba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f2c0 814e 	blt.w	8009062 <_dtoa_r+0x722>
 8008dc6:	f1bb 0f0e 	cmp.w	fp, #14
 8008dca:	f300 814a 	bgt.w	8009062 <_dtoa_r+0x722>
 8008dce:	4b6b      	ldr	r3, [pc, #428]	; (8008f7c <_dtoa_r+0x63c>)
 8008dd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f280 80dc 	bge.w	8008f98 <_dtoa_r+0x658>
 8008de0:	9b04      	ldr	r3, [sp, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f300 80d8 	bgt.w	8008f98 <_dtoa_r+0x658>
 8008de8:	f040 826f 	bne.w	80092ca <_dtoa_r+0x98a>
 8008dec:	4b68      	ldr	r3, [pc, #416]	; (8008f90 <_dtoa_r+0x650>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	4640      	mov	r0, r8
 8008df2:	4649      	mov	r1, r9
 8008df4:	f7f7 fc00 	bl	80005f8 <__aeabi_dmul>
 8008df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dfc:	f7f7 fe82 	bl	8000b04 <__aeabi_dcmpge>
 8008e00:	9e04      	ldr	r6, [sp, #16]
 8008e02:	4637      	mov	r7, r6
 8008e04:	2800      	cmp	r0, #0
 8008e06:	f040 8245 	bne.w	8009294 <_dtoa_r+0x954>
 8008e0a:	9d00      	ldr	r5, [sp, #0]
 8008e0c:	2331      	movs	r3, #49	; 0x31
 8008e0e:	f805 3b01 	strb.w	r3, [r5], #1
 8008e12:	f10b 0b01 	add.w	fp, fp, #1
 8008e16:	e241      	b.n	800929c <_dtoa_r+0x95c>
 8008e18:	07f2      	lsls	r2, r6, #31
 8008e1a:	d505      	bpl.n	8008e28 <_dtoa_r+0x4e8>
 8008e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e20:	f7f7 fbea 	bl	80005f8 <__aeabi_dmul>
 8008e24:	3501      	adds	r5, #1
 8008e26:	2301      	movs	r3, #1
 8008e28:	1076      	asrs	r6, r6, #1
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	e773      	b.n	8008d16 <_dtoa_r+0x3d6>
 8008e2e:	2502      	movs	r5, #2
 8008e30:	e775      	b.n	8008d1e <_dtoa_r+0x3de>
 8008e32:	9e04      	ldr	r6, [sp, #16]
 8008e34:	465f      	mov	r7, fp
 8008e36:	e792      	b.n	8008d5e <_dtoa_r+0x41e>
 8008e38:	9900      	ldr	r1, [sp, #0]
 8008e3a:	4b50      	ldr	r3, [pc, #320]	; (8008f7c <_dtoa_r+0x63c>)
 8008e3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e40:	4431      	add	r1, r6
 8008e42:	9102      	str	r1, [sp, #8]
 8008e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e46:	eeb0 9a47 	vmov.f32	s18, s14
 8008e4a:	eef0 9a67 	vmov.f32	s19, s15
 8008e4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e56:	2900      	cmp	r1, #0
 8008e58:	d044      	beq.n	8008ee4 <_dtoa_r+0x5a4>
 8008e5a:	494e      	ldr	r1, [pc, #312]	; (8008f94 <_dtoa_r+0x654>)
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f7f7 fcf5 	bl	800084c <__aeabi_ddiv>
 8008e62:	ec53 2b19 	vmov	r2, r3, d9
 8008e66:	f7f7 fa0f 	bl	8000288 <__aeabi_dsub>
 8008e6a:	9d00      	ldr	r5, [sp, #0]
 8008e6c:	ec41 0b19 	vmov	d9, r0, r1
 8008e70:	4649      	mov	r1, r9
 8008e72:	4640      	mov	r0, r8
 8008e74:	f7f7 fe70 	bl	8000b58 <__aeabi_d2iz>
 8008e78:	4606      	mov	r6, r0
 8008e7a:	f7f7 fb53 	bl	8000524 <__aeabi_i2d>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4640      	mov	r0, r8
 8008e84:	4649      	mov	r1, r9
 8008e86:	f7f7 f9ff 	bl	8000288 <__aeabi_dsub>
 8008e8a:	3630      	adds	r6, #48	; 0x30
 8008e8c:	f805 6b01 	strb.w	r6, [r5], #1
 8008e90:	ec53 2b19 	vmov	r2, r3, d9
 8008e94:	4680      	mov	r8, r0
 8008e96:	4689      	mov	r9, r1
 8008e98:	f7f7 fe20 	bl	8000adc <__aeabi_dcmplt>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d164      	bne.n	8008f6a <_dtoa_r+0x62a>
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	4937      	ldr	r1, [pc, #220]	; (8008f84 <_dtoa_r+0x644>)
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f7f7 f9ee 	bl	8000288 <__aeabi_dsub>
 8008eac:	ec53 2b19 	vmov	r2, r3, d9
 8008eb0:	f7f7 fe14 	bl	8000adc <__aeabi_dcmplt>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f040 80b6 	bne.w	8009026 <_dtoa_r+0x6e6>
 8008eba:	9b02      	ldr	r3, [sp, #8]
 8008ebc:	429d      	cmp	r5, r3
 8008ebe:	f43f af7c 	beq.w	8008dba <_dtoa_r+0x47a>
 8008ec2:	4b31      	ldr	r3, [pc, #196]	; (8008f88 <_dtoa_r+0x648>)
 8008ec4:	ec51 0b19 	vmov	r0, r1, d9
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f7f7 fb95 	bl	80005f8 <__aeabi_dmul>
 8008ece:	4b2e      	ldr	r3, [pc, #184]	; (8008f88 <_dtoa_r+0x648>)
 8008ed0:	ec41 0b19 	vmov	d9, r0, r1
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 fb8d 	bl	80005f8 <__aeabi_dmul>
 8008ede:	4680      	mov	r8, r0
 8008ee0:	4689      	mov	r9, r1
 8008ee2:	e7c5      	b.n	8008e70 <_dtoa_r+0x530>
 8008ee4:	ec51 0b17 	vmov	r0, r1, d7
 8008ee8:	f7f7 fb86 	bl	80005f8 <__aeabi_dmul>
 8008eec:	9b02      	ldr	r3, [sp, #8]
 8008eee:	9d00      	ldr	r5, [sp, #0]
 8008ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ef2:	ec41 0b19 	vmov	d9, r0, r1
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4640      	mov	r0, r8
 8008efa:	f7f7 fe2d 	bl	8000b58 <__aeabi_d2iz>
 8008efe:	4606      	mov	r6, r0
 8008f00:	f7f7 fb10 	bl	8000524 <__aeabi_i2d>
 8008f04:	3630      	adds	r6, #48	; 0x30
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	f7f7 f9bb 	bl	8000288 <__aeabi_dsub>
 8008f12:	f805 6b01 	strb.w	r6, [r5], #1
 8008f16:	9b02      	ldr	r3, [sp, #8]
 8008f18:	429d      	cmp	r5, r3
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	4689      	mov	r9, r1
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	d124      	bne.n	8008f6e <_dtoa_r+0x62e>
 8008f24:	4b1b      	ldr	r3, [pc, #108]	; (8008f94 <_dtoa_r+0x654>)
 8008f26:	ec51 0b19 	vmov	r0, r1, d9
 8008f2a:	f7f7 f9af 	bl	800028c <__adddf3>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f7f7 fdef 	bl	8000b18 <__aeabi_dcmpgt>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d173      	bne.n	8009026 <_dtoa_r+0x6e6>
 8008f3e:	ec53 2b19 	vmov	r2, r3, d9
 8008f42:	4914      	ldr	r1, [pc, #80]	; (8008f94 <_dtoa_r+0x654>)
 8008f44:	2000      	movs	r0, #0
 8008f46:	f7f7 f99f 	bl	8000288 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 fdc3 	bl	8000adc <__aeabi_dcmplt>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f43f af2f 	beq.w	8008dba <_dtoa_r+0x47a>
 8008f5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f5e:	1e6b      	subs	r3, r5, #1
 8008f60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f66:	2b30      	cmp	r3, #48	; 0x30
 8008f68:	d0f8      	beq.n	8008f5c <_dtoa_r+0x61c>
 8008f6a:	46bb      	mov	fp, r7
 8008f6c:	e04a      	b.n	8009004 <_dtoa_r+0x6c4>
 8008f6e:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <_dtoa_r+0x648>)
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	4680      	mov	r8, r0
 8008f76:	4689      	mov	r9, r1
 8008f78:	e7bd      	b.n	8008ef6 <_dtoa_r+0x5b6>
 8008f7a:	bf00      	nop
 8008f7c:	0800a910 	.word	0x0800a910
 8008f80:	0800a8e8 	.word	0x0800a8e8
 8008f84:	3ff00000 	.word	0x3ff00000
 8008f88:	40240000 	.word	0x40240000
 8008f8c:	401c0000 	.word	0x401c0000
 8008f90:	40140000 	.word	0x40140000
 8008f94:	3fe00000 	.word	0x3fe00000
 8008f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f9c:	9d00      	ldr	r5, [sp, #0]
 8008f9e:	4642      	mov	r2, r8
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	f7f7 fc51 	bl	800084c <__aeabi_ddiv>
 8008faa:	f7f7 fdd5 	bl	8000b58 <__aeabi_d2iz>
 8008fae:	9001      	str	r0, [sp, #4]
 8008fb0:	f7f7 fab8 	bl	8000524 <__aeabi_i2d>
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	f7f7 fb1e 	bl	80005f8 <__aeabi_dmul>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 f960 	bl	8000288 <__aeabi_dsub>
 8008fc8:	9e01      	ldr	r6, [sp, #4]
 8008fca:	9f04      	ldr	r7, [sp, #16]
 8008fcc:	3630      	adds	r6, #48	; 0x30
 8008fce:	f805 6b01 	strb.w	r6, [r5], #1
 8008fd2:	9e00      	ldr	r6, [sp, #0]
 8008fd4:	1bae      	subs	r6, r5, r6
 8008fd6:	42b7      	cmp	r7, r6
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	d134      	bne.n	8009048 <_dtoa_r+0x708>
 8008fde:	f7f7 f955 	bl	800028c <__adddf3>
 8008fe2:	4642      	mov	r2, r8
 8008fe4:	464b      	mov	r3, r9
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460f      	mov	r7, r1
 8008fea:	f7f7 fd95 	bl	8000b18 <__aeabi_dcmpgt>
 8008fee:	b9c8      	cbnz	r0, 8009024 <_dtoa_r+0x6e4>
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	464b      	mov	r3, r9
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ffc:	b110      	cbz	r0, 8009004 <_dtoa_r+0x6c4>
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	07db      	lsls	r3, r3, #31
 8009002:	d40f      	bmi.n	8009024 <_dtoa_r+0x6e4>
 8009004:	4651      	mov	r1, sl
 8009006:	4620      	mov	r0, r4
 8009008:	f000 fc2e 	bl	8009868 <_Bfree>
 800900c:	2300      	movs	r3, #0
 800900e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009010:	702b      	strb	r3, [r5, #0]
 8009012:	f10b 0301 	add.w	r3, fp, #1
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800901a:	2b00      	cmp	r3, #0
 800901c:	f43f ace2 	beq.w	80089e4 <_dtoa_r+0xa4>
 8009020:	601d      	str	r5, [r3, #0]
 8009022:	e4df      	b.n	80089e4 <_dtoa_r+0xa4>
 8009024:	465f      	mov	r7, fp
 8009026:	462b      	mov	r3, r5
 8009028:	461d      	mov	r5, r3
 800902a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800902e:	2a39      	cmp	r2, #57	; 0x39
 8009030:	d106      	bne.n	8009040 <_dtoa_r+0x700>
 8009032:	9a00      	ldr	r2, [sp, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d1f7      	bne.n	8009028 <_dtoa_r+0x6e8>
 8009038:	9900      	ldr	r1, [sp, #0]
 800903a:	2230      	movs	r2, #48	; 0x30
 800903c:	3701      	adds	r7, #1
 800903e:	700a      	strb	r2, [r1, #0]
 8009040:	781a      	ldrb	r2, [r3, #0]
 8009042:	3201      	adds	r2, #1
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	e790      	b.n	8008f6a <_dtoa_r+0x62a>
 8009048:	4ba3      	ldr	r3, [pc, #652]	; (80092d8 <_dtoa_r+0x998>)
 800904a:	2200      	movs	r2, #0
 800904c:	f7f7 fad4 	bl	80005f8 <__aeabi_dmul>
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	4606      	mov	r6, r0
 8009056:	460f      	mov	r7, r1
 8009058:	f7f7 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800905c:	2800      	cmp	r0, #0
 800905e:	d09e      	beq.n	8008f9e <_dtoa_r+0x65e>
 8009060:	e7d0      	b.n	8009004 <_dtoa_r+0x6c4>
 8009062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009064:	2a00      	cmp	r2, #0
 8009066:	f000 80ca 	beq.w	80091fe <_dtoa_r+0x8be>
 800906a:	9a07      	ldr	r2, [sp, #28]
 800906c:	2a01      	cmp	r2, #1
 800906e:	f300 80ad 	bgt.w	80091cc <_dtoa_r+0x88c>
 8009072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009074:	2a00      	cmp	r2, #0
 8009076:	f000 80a5 	beq.w	80091c4 <_dtoa_r+0x884>
 800907a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800907e:	9e08      	ldr	r6, [sp, #32]
 8009080:	9d05      	ldr	r5, [sp, #20]
 8009082:	9a05      	ldr	r2, [sp, #20]
 8009084:	441a      	add	r2, r3
 8009086:	9205      	str	r2, [sp, #20]
 8009088:	9a06      	ldr	r2, [sp, #24]
 800908a:	2101      	movs	r1, #1
 800908c:	441a      	add	r2, r3
 800908e:	4620      	mov	r0, r4
 8009090:	9206      	str	r2, [sp, #24]
 8009092:	f000 fc9f 	bl	80099d4 <__i2b>
 8009096:	4607      	mov	r7, r0
 8009098:	b165      	cbz	r5, 80090b4 <_dtoa_r+0x774>
 800909a:	9b06      	ldr	r3, [sp, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd09      	ble.n	80090b4 <_dtoa_r+0x774>
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	9a05      	ldr	r2, [sp, #20]
 80090a4:	bfa8      	it	ge
 80090a6:	462b      	movge	r3, r5
 80090a8:	1ad2      	subs	r2, r2, r3
 80090aa:	9205      	str	r2, [sp, #20]
 80090ac:	9a06      	ldr	r2, [sp, #24]
 80090ae:	1aed      	subs	r5, r5, r3
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	9306      	str	r3, [sp, #24]
 80090b4:	9b08      	ldr	r3, [sp, #32]
 80090b6:	b1f3      	cbz	r3, 80090f6 <_dtoa_r+0x7b6>
 80090b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 80a3 	beq.w	8009206 <_dtoa_r+0x8c6>
 80090c0:	2e00      	cmp	r6, #0
 80090c2:	dd10      	ble.n	80090e6 <_dtoa_r+0x7a6>
 80090c4:	4639      	mov	r1, r7
 80090c6:	4632      	mov	r2, r6
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fd43 	bl	8009b54 <__pow5mult>
 80090ce:	4652      	mov	r2, sl
 80090d0:	4601      	mov	r1, r0
 80090d2:	4607      	mov	r7, r0
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 fc93 	bl	8009a00 <__multiply>
 80090da:	4651      	mov	r1, sl
 80090dc:	4680      	mov	r8, r0
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 fbc2 	bl	8009868 <_Bfree>
 80090e4:	46c2      	mov	sl, r8
 80090e6:	9b08      	ldr	r3, [sp, #32]
 80090e8:	1b9a      	subs	r2, r3, r6
 80090ea:	d004      	beq.n	80090f6 <_dtoa_r+0x7b6>
 80090ec:	4651      	mov	r1, sl
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fd30 	bl	8009b54 <__pow5mult>
 80090f4:	4682      	mov	sl, r0
 80090f6:	2101      	movs	r1, #1
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 fc6b 	bl	80099d4 <__i2b>
 80090fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009100:	2b00      	cmp	r3, #0
 8009102:	4606      	mov	r6, r0
 8009104:	f340 8081 	ble.w	800920a <_dtoa_r+0x8ca>
 8009108:	461a      	mov	r2, r3
 800910a:	4601      	mov	r1, r0
 800910c:	4620      	mov	r0, r4
 800910e:	f000 fd21 	bl	8009b54 <__pow5mult>
 8009112:	9b07      	ldr	r3, [sp, #28]
 8009114:	2b01      	cmp	r3, #1
 8009116:	4606      	mov	r6, r0
 8009118:	dd7a      	ble.n	8009210 <_dtoa_r+0x8d0>
 800911a:	f04f 0800 	mov.w	r8, #0
 800911e:	6933      	ldr	r3, [r6, #16]
 8009120:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009124:	6918      	ldr	r0, [r3, #16]
 8009126:	f000 fc07 	bl	8009938 <__hi0bits>
 800912a:	f1c0 0020 	rsb	r0, r0, #32
 800912e:	9b06      	ldr	r3, [sp, #24]
 8009130:	4418      	add	r0, r3
 8009132:	f010 001f 	ands.w	r0, r0, #31
 8009136:	f000 8094 	beq.w	8009262 <_dtoa_r+0x922>
 800913a:	f1c0 0320 	rsb	r3, r0, #32
 800913e:	2b04      	cmp	r3, #4
 8009140:	f340 8085 	ble.w	800924e <_dtoa_r+0x90e>
 8009144:	9b05      	ldr	r3, [sp, #20]
 8009146:	f1c0 001c 	rsb	r0, r0, #28
 800914a:	4403      	add	r3, r0
 800914c:	9305      	str	r3, [sp, #20]
 800914e:	9b06      	ldr	r3, [sp, #24]
 8009150:	4403      	add	r3, r0
 8009152:	4405      	add	r5, r0
 8009154:	9306      	str	r3, [sp, #24]
 8009156:	9b05      	ldr	r3, [sp, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	dd05      	ble.n	8009168 <_dtoa_r+0x828>
 800915c:	4651      	mov	r1, sl
 800915e:	461a      	mov	r2, r3
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fd51 	bl	8009c08 <__lshift>
 8009166:	4682      	mov	sl, r0
 8009168:	9b06      	ldr	r3, [sp, #24]
 800916a:	2b00      	cmp	r3, #0
 800916c:	dd05      	ble.n	800917a <_dtoa_r+0x83a>
 800916e:	4631      	mov	r1, r6
 8009170:	461a      	mov	r2, r3
 8009172:	4620      	mov	r0, r4
 8009174:	f000 fd48 	bl	8009c08 <__lshift>
 8009178:	4606      	mov	r6, r0
 800917a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800917c:	2b00      	cmp	r3, #0
 800917e:	d072      	beq.n	8009266 <_dtoa_r+0x926>
 8009180:	4631      	mov	r1, r6
 8009182:	4650      	mov	r0, sl
 8009184:	f000 fdac 	bl	8009ce0 <__mcmp>
 8009188:	2800      	cmp	r0, #0
 800918a:	da6c      	bge.n	8009266 <_dtoa_r+0x926>
 800918c:	2300      	movs	r3, #0
 800918e:	4651      	mov	r1, sl
 8009190:	220a      	movs	r2, #10
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fb8a 	bl	80098ac <__multadd>
 8009198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800919e:	4682      	mov	sl, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 81b0 	beq.w	8009506 <_dtoa_r+0xbc6>
 80091a6:	2300      	movs	r3, #0
 80091a8:	4639      	mov	r1, r7
 80091aa:	220a      	movs	r2, #10
 80091ac:	4620      	mov	r0, r4
 80091ae:	f000 fb7d 	bl	80098ac <__multadd>
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	4607      	mov	r7, r0
 80091b8:	f300 8096 	bgt.w	80092e8 <_dtoa_r+0x9a8>
 80091bc:	9b07      	ldr	r3, [sp, #28]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	dc59      	bgt.n	8009276 <_dtoa_r+0x936>
 80091c2:	e091      	b.n	80092e8 <_dtoa_r+0x9a8>
 80091c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091ca:	e758      	b.n	800907e <_dtoa_r+0x73e>
 80091cc:	9b04      	ldr	r3, [sp, #16]
 80091ce:	1e5e      	subs	r6, r3, #1
 80091d0:	9b08      	ldr	r3, [sp, #32]
 80091d2:	42b3      	cmp	r3, r6
 80091d4:	bfbf      	itttt	lt
 80091d6:	9b08      	ldrlt	r3, [sp, #32]
 80091d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80091da:	9608      	strlt	r6, [sp, #32]
 80091dc:	1af3      	sublt	r3, r6, r3
 80091de:	bfb4      	ite	lt
 80091e0:	18d2      	addlt	r2, r2, r3
 80091e2:	1b9e      	subge	r6, r3, r6
 80091e4:	9b04      	ldr	r3, [sp, #16]
 80091e6:	bfbc      	itt	lt
 80091e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80091ea:	2600      	movlt	r6, #0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfb7      	itett	lt
 80091f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80091f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80091f8:	1a9d      	sublt	r5, r3, r2
 80091fa:	2300      	movlt	r3, #0
 80091fc:	e741      	b.n	8009082 <_dtoa_r+0x742>
 80091fe:	9e08      	ldr	r6, [sp, #32]
 8009200:	9d05      	ldr	r5, [sp, #20]
 8009202:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009204:	e748      	b.n	8009098 <_dtoa_r+0x758>
 8009206:	9a08      	ldr	r2, [sp, #32]
 8009208:	e770      	b.n	80090ec <_dtoa_r+0x7ac>
 800920a:	9b07      	ldr	r3, [sp, #28]
 800920c:	2b01      	cmp	r3, #1
 800920e:	dc19      	bgt.n	8009244 <_dtoa_r+0x904>
 8009210:	9b02      	ldr	r3, [sp, #8]
 8009212:	b9bb      	cbnz	r3, 8009244 <_dtoa_r+0x904>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800921a:	b99b      	cbnz	r3, 8009244 <_dtoa_r+0x904>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009222:	0d1b      	lsrs	r3, r3, #20
 8009224:	051b      	lsls	r3, r3, #20
 8009226:	b183      	cbz	r3, 800924a <_dtoa_r+0x90a>
 8009228:	9b05      	ldr	r3, [sp, #20]
 800922a:	3301      	adds	r3, #1
 800922c:	9305      	str	r3, [sp, #20]
 800922e:	9b06      	ldr	r3, [sp, #24]
 8009230:	3301      	adds	r3, #1
 8009232:	9306      	str	r3, [sp, #24]
 8009234:	f04f 0801 	mov.w	r8, #1
 8009238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800923a:	2b00      	cmp	r3, #0
 800923c:	f47f af6f 	bne.w	800911e <_dtoa_r+0x7de>
 8009240:	2001      	movs	r0, #1
 8009242:	e774      	b.n	800912e <_dtoa_r+0x7ee>
 8009244:	f04f 0800 	mov.w	r8, #0
 8009248:	e7f6      	b.n	8009238 <_dtoa_r+0x8f8>
 800924a:	4698      	mov	r8, r3
 800924c:	e7f4      	b.n	8009238 <_dtoa_r+0x8f8>
 800924e:	d082      	beq.n	8009156 <_dtoa_r+0x816>
 8009250:	9a05      	ldr	r2, [sp, #20]
 8009252:	331c      	adds	r3, #28
 8009254:	441a      	add	r2, r3
 8009256:	9205      	str	r2, [sp, #20]
 8009258:	9a06      	ldr	r2, [sp, #24]
 800925a:	441a      	add	r2, r3
 800925c:	441d      	add	r5, r3
 800925e:	9206      	str	r2, [sp, #24]
 8009260:	e779      	b.n	8009156 <_dtoa_r+0x816>
 8009262:	4603      	mov	r3, r0
 8009264:	e7f4      	b.n	8009250 <_dtoa_r+0x910>
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	dc37      	bgt.n	80092dc <_dtoa_r+0x99c>
 800926c:	9b07      	ldr	r3, [sp, #28]
 800926e:	2b02      	cmp	r3, #2
 8009270:	dd34      	ble.n	80092dc <_dtoa_r+0x99c>
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	b963      	cbnz	r3, 8009294 <_dtoa_r+0x954>
 800927a:	4631      	mov	r1, r6
 800927c:	2205      	movs	r2, #5
 800927e:	4620      	mov	r0, r4
 8009280:	f000 fb14 	bl	80098ac <__multadd>
 8009284:	4601      	mov	r1, r0
 8009286:	4606      	mov	r6, r0
 8009288:	4650      	mov	r0, sl
 800928a:	f000 fd29 	bl	8009ce0 <__mcmp>
 800928e:	2800      	cmp	r0, #0
 8009290:	f73f adbb 	bgt.w	8008e0a <_dtoa_r+0x4ca>
 8009294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009296:	9d00      	ldr	r5, [sp, #0]
 8009298:	ea6f 0b03 	mvn.w	fp, r3
 800929c:	f04f 0800 	mov.w	r8, #0
 80092a0:	4631      	mov	r1, r6
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 fae0 	bl	8009868 <_Bfree>
 80092a8:	2f00      	cmp	r7, #0
 80092aa:	f43f aeab 	beq.w	8009004 <_dtoa_r+0x6c4>
 80092ae:	f1b8 0f00 	cmp.w	r8, #0
 80092b2:	d005      	beq.n	80092c0 <_dtoa_r+0x980>
 80092b4:	45b8      	cmp	r8, r7
 80092b6:	d003      	beq.n	80092c0 <_dtoa_r+0x980>
 80092b8:	4641      	mov	r1, r8
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fad4 	bl	8009868 <_Bfree>
 80092c0:	4639      	mov	r1, r7
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 fad0 	bl	8009868 <_Bfree>
 80092c8:	e69c      	b.n	8009004 <_dtoa_r+0x6c4>
 80092ca:	2600      	movs	r6, #0
 80092cc:	4637      	mov	r7, r6
 80092ce:	e7e1      	b.n	8009294 <_dtoa_r+0x954>
 80092d0:	46bb      	mov	fp, r7
 80092d2:	4637      	mov	r7, r6
 80092d4:	e599      	b.n	8008e0a <_dtoa_r+0x4ca>
 80092d6:	bf00      	nop
 80092d8:	40240000 	.word	0x40240000
 80092dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 80c8 	beq.w	8009474 <_dtoa_r+0xb34>
 80092e4:	9b04      	ldr	r3, [sp, #16]
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	2d00      	cmp	r5, #0
 80092ea:	dd05      	ble.n	80092f8 <_dtoa_r+0x9b8>
 80092ec:	4639      	mov	r1, r7
 80092ee:	462a      	mov	r2, r5
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 fc89 	bl	8009c08 <__lshift>
 80092f6:	4607      	mov	r7, r0
 80092f8:	f1b8 0f00 	cmp.w	r8, #0
 80092fc:	d05b      	beq.n	80093b6 <_dtoa_r+0xa76>
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4620      	mov	r0, r4
 8009302:	f000 fa71 	bl	80097e8 <_Balloc>
 8009306:	4605      	mov	r5, r0
 8009308:	b928      	cbnz	r0, 8009316 <_dtoa_r+0x9d6>
 800930a:	4b83      	ldr	r3, [pc, #524]	; (8009518 <_dtoa_r+0xbd8>)
 800930c:	4602      	mov	r2, r0
 800930e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009312:	f7ff bb2e 	b.w	8008972 <_dtoa_r+0x32>
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	3202      	adds	r2, #2
 800931a:	0092      	lsls	r2, r2, #2
 800931c:	f107 010c 	add.w	r1, r7, #12
 8009320:	300c      	adds	r0, #12
 8009322:	f000 fe77 	bl	800a014 <memcpy>
 8009326:	2201      	movs	r2, #1
 8009328:	4629      	mov	r1, r5
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fc6c 	bl	8009c08 <__lshift>
 8009330:	9b00      	ldr	r3, [sp, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800933a:	4413      	add	r3, r2
 800933c:	9308      	str	r3, [sp, #32]
 800933e:	9b02      	ldr	r3, [sp, #8]
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	46b8      	mov	r8, r7
 8009346:	9306      	str	r3, [sp, #24]
 8009348:	4607      	mov	r7, r0
 800934a:	9b04      	ldr	r3, [sp, #16]
 800934c:	4631      	mov	r1, r6
 800934e:	3b01      	subs	r3, #1
 8009350:	4650      	mov	r0, sl
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	f7ff fa6a 	bl	800882c <quorem>
 8009358:	4641      	mov	r1, r8
 800935a:	9002      	str	r0, [sp, #8]
 800935c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009360:	4650      	mov	r0, sl
 8009362:	f000 fcbd 	bl	8009ce0 <__mcmp>
 8009366:	463a      	mov	r2, r7
 8009368:	9005      	str	r0, [sp, #20]
 800936a:	4631      	mov	r1, r6
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fcd3 	bl	8009d18 <__mdiff>
 8009372:	68c2      	ldr	r2, [r0, #12]
 8009374:	4605      	mov	r5, r0
 8009376:	bb02      	cbnz	r2, 80093ba <_dtoa_r+0xa7a>
 8009378:	4601      	mov	r1, r0
 800937a:	4650      	mov	r0, sl
 800937c:	f000 fcb0 	bl	8009ce0 <__mcmp>
 8009380:	4602      	mov	r2, r0
 8009382:	4629      	mov	r1, r5
 8009384:	4620      	mov	r0, r4
 8009386:	9209      	str	r2, [sp, #36]	; 0x24
 8009388:	f000 fa6e 	bl	8009868 <_Bfree>
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009390:	9d04      	ldr	r5, [sp, #16]
 8009392:	ea43 0102 	orr.w	r1, r3, r2
 8009396:	9b06      	ldr	r3, [sp, #24]
 8009398:	4319      	orrs	r1, r3
 800939a:	d110      	bne.n	80093be <_dtoa_r+0xa7e>
 800939c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093a0:	d029      	beq.n	80093f6 <_dtoa_r+0xab6>
 80093a2:	9b05      	ldr	r3, [sp, #20]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	dd02      	ble.n	80093ae <_dtoa_r+0xa6e>
 80093a8:	9b02      	ldr	r3, [sp, #8]
 80093aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	f883 9000 	strb.w	r9, [r3]
 80093b4:	e774      	b.n	80092a0 <_dtoa_r+0x960>
 80093b6:	4638      	mov	r0, r7
 80093b8:	e7ba      	b.n	8009330 <_dtoa_r+0x9f0>
 80093ba:	2201      	movs	r2, #1
 80093bc:	e7e1      	b.n	8009382 <_dtoa_r+0xa42>
 80093be:	9b05      	ldr	r3, [sp, #20]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db04      	blt.n	80093ce <_dtoa_r+0xa8e>
 80093c4:	9907      	ldr	r1, [sp, #28]
 80093c6:	430b      	orrs	r3, r1
 80093c8:	9906      	ldr	r1, [sp, #24]
 80093ca:	430b      	orrs	r3, r1
 80093cc:	d120      	bne.n	8009410 <_dtoa_r+0xad0>
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	dded      	ble.n	80093ae <_dtoa_r+0xa6e>
 80093d2:	4651      	mov	r1, sl
 80093d4:	2201      	movs	r2, #1
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 fc16 	bl	8009c08 <__lshift>
 80093dc:	4631      	mov	r1, r6
 80093de:	4682      	mov	sl, r0
 80093e0:	f000 fc7e 	bl	8009ce0 <__mcmp>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	dc03      	bgt.n	80093f0 <_dtoa_r+0xab0>
 80093e8:	d1e1      	bne.n	80093ae <_dtoa_r+0xa6e>
 80093ea:	f019 0f01 	tst.w	r9, #1
 80093ee:	d0de      	beq.n	80093ae <_dtoa_r+0xa6e>
 80093f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093f4:	d1d8      	bne.n	80093a8 <_dtoa_r+0xa68>
 80093f6:	9a01      	ldr	r2, [sp, #4]
 80093f8:	2339      	movs	r3, #57	; 0x39
 80093fa:	7013      	strb	r3, [r2, #0]
 80093fc:	462b      	mov	r3, r5
 80093fe:	461d      	mov	r5, r3
 8009400:	3b01      	subs	r3, #1
 8009402:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009406:	2a39      	cmp	r2, #57	; 0x39
 8009408:	d06c      	beq.n	80094e4 <_dtoa_r+0xba4>
 800940a:	3201      	adds	r2, #1
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	e747      	b.n	80092a0 <_dtoa_r+0x960>
 8009410:	2a00      	cmp	r2, #0
 8009412:	dd07      	ble.n	8009424 <_dtoa_r+0xae4>
 8009414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009418:	d0ed      	beq.n	80093f6 <_dtoa_r+0xab6>
 800941a:	9a01      	ldr	r2, [sp, #4]
 800941c:	f109 0301 	add.w	r3, r9, #1
 8009420:	7013      	strb	r3, [r2, #0]
 8009422:	e73d      	b.n	80092a0 <_dtoa_r+0x960>
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	9a08      	ldr	r2, [sp, #32]
 8009428:	f803 9c01 	strb.w	r9, [r3, #-1]
 800942c:	4293      	cmp	r3, r2
 800942e:	d043      	beq.n	80094b8 <_dtoa_r+0xb78>
 8009430:	4651      	mov	r1, sl
 8009432:	2300      	movs	r3, #0
 8009434:	220a      	movs	r2, #10
 8009436:	4620      	mov	r0, r4
 8009438:	f000 fa38 	bl	80098ac <__multadd>
 800943c:	45b8      	cmp	r8, r7
 800943e:	4682      	mov	sl, r0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	f04f 020a 	mov.w	r2, #10
 8009448:	4641      	mov	r1, r8
 800944a:	4620      	mov	r0, r4
 800944c:	d107      	bne.n	800945e <_dtoa_r+0xb1e>
 800944e:	f000 fa2d 	bl	80098ac <__multadd>
 8009452:	4680      	mov	r8, r0
 8009454:	4607      	mov	r7, r0
 8009456:	9b04      	ldr	r3, [sp, #16]
 8009458:	3301      	adds	r3, #1
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	e775      	b.n	800934a <_dtoa_r+0xa0a>
 800945e:	f000 fa25 	bl	80098ac <__multadd>
 8009462:	4639      	mov	r1, r7
 8009464:	4680      	mov	r8, r0
 8009466:	2300      	movs	r3, #0
 8009468:	220a      	movs	r2, #10
 800946a:	4620      	mov	r0, r4
 800946c:	f000 fa1e 	bl	80098ac <__multadd>
 8009470:	4607      	mov	r7, r0
 8009472:	e7f0      	b.n	8009456 <_dtoa_r+0xb16>
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	9301      	str	r3, [sp, #4]
 8009478:	9d00      	ldr	r5, [sp, #0]
 800947a:	4631      	mov	r1, r6
 800947c:	4650      	mov	r0, sl
 800947e:	f7ff f9d5 	bl	800882c <quorem>
 8009482:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009486:	9b00      	ldr	r3, [sp, #0]
 8009488:	f805 9b01 	strb.w	r9, [r5], #1
 800948c:	1aea      	subs	r2, r5, r3
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	4293      	cmp	r3, r2
 8009492:	dd07      	ble.n	80094a4 <_dtoa_r+0xb64>
 8009494:	4651      	mov	r1, sl
 8009496:	2300      	movs	r3, #0
 8009498:	220a      	movs	r2, #10
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fa06 	bl	80098ac <__multadd>
 80094a0:	4682      	mov	sl, r0
 80094a2:	e7ea      	b.n	800947a <_dtoa_r+0xb3a>
 80094a4:	9b01      	ldr	r3, [sp, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bfc8      	it	gt
 80094aa:	461d      	movgt	r5, r3
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	bfd8      	it	le
 80094b0:	2501      	movle	r5, #1
 80094b2:	441d      	add	r5, r3
 80094b4:	f04f 0800 	mov.w	r8, #0
 80094b8:	4651      	mov	r1, sl
 80094ba:	2201      	movs	r2, #1
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fba3 	bl	8009c08 <__lshift>
 80094c2:	4631      	mov	r1, r6
 80094c4:	4682      	mov	sl, r0
 80094c6:	f000 fc0b 	bl	8009ce0 <__mcmp>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	dc96      	bgt.n	80093fc <_dtoa_r+0xabc>
 80094ce:	d102      	bne.n	80094d6 <_dtoa_r+0xb96>
 80094d0:	f019 0f01 	tst.w	r9, #1
 80094d4:	d192      	bne.n	80093fc <_dtoa_r+0xabc>
 80094d6:	462b      	mov	r3, r5
 80094d8:	461d      	mov	r5, r3
 80094da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094de:	2a30      	cmp	r2, #48	; 0x30
 80094e0:	d0fa      	beq.n	80094d8 <_dtoa_r+0xb98>
 80094e2:	e6dd      	b.n	80092a0 <_dtoa_r+0x960>
 80094e4:	9a00      	ldr	r2, [sp, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d189      	bne.n	80093fe <_dtoa_r+0xabe>
 80094ea:	f10b 0b01 	add.w	fp, fp, #1
 80094ee:	2331      	movs	r3, #49	; 0x31
 80094f0:	e796      	b.n	8009420 <_dtoa_r+0xae0>
 80094f2:	4b0a      	ldr	r3, [pc, #40]	; (800951c <_dtoa_r+0xbdc>)
 80094f4:	f7ff ba99 	b.w	8008a2a <_dtoa_r+0xea>
 80094f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f47f aa6d 	bne.w	80089da <_dtoa_r+0x9a>
 8009500:	4b07      	ldr	r3, [pc, #28]	; (8009520 <_dtoa_r+0xbe0>)
 8009502:	f7ff ba92 	b.w	8008a2a <_dtoa_r+0xea>
 8009506:	9b01      	ldr	r3, [sp, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	dcb5      	bgt.n	8009478 <_dtoa_r+0xb38>
 800950c:	9b07      	ldr	r3, [sp, #28]
 800950e:	2b02      	cmp	r3, #2
 8009510:	f73f aeb1 	bgt.w	8009276 <_dtoa_r+0x936>
 8009514:	e7b0      	b.n	8009478 <_dtoa_r+0xb38>
 8009516:	bf00      	nop
 8009518:	0800a878 	.word	0x0800a878
 800951c:	0800a7d8 	.word	0x0800a7d8
 8009520:	0800a7fc 	.word	0x0800a7fc

08009524 <malloc>:
 8009524:	4b02      	ldr	r3, [pc, #8]	; (8009530 <malloc+0xc>)
 8009526:	4601      	mov	r1, r0
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	f000 b823 	b.w	8009574 <_malloc_r>
 800952e:	bf00      	nop
 8009530:	20000068 	.word	0x20000068

08009534 <sbrk_aligned>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	4e0e      	ldr	r6, [pc, #56]	; (8009570 <sbrk_aligned+0x3c>)
 8009538:	460c      	mov	r4, r1
 800953a:	6831      	ldr	r1, [r6, #0]
 800953c:	4605      	mov	r5, r0
 800953e:	b911      	cbnz	r1, 8009546 <sbrk_aligned+0x12>
 8009540:	f000 fd46 	bl	8009fd0 <_sbrk_r>
 8009544:	6030      	str	r0, [r6, #0]
 8009546:	4621      	mov	r1, r4
 8009548:	4628      	mov	r0, r5
 800954a:	f000 fd41 	bl	8009fd0 <_sbrk_r>
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	d00a      	beq.n	8009568 <sbrk_aligned+0x34>
 8009552:	1cc4      	adds	r4, r0, #3
 8009554:	f024 0403 	bic.w	r4, r4, #3
 8009558:	42a0      	cmp	r0, r4
 800955a:	d007      	beq.n	800956c <sbrk_aligned+0x38>
 800955c:	1a21      	subs	r1, r4, r0
 800955e:	4628      	mov	r0, r5
 8009560:	f000 fd36 	bl	8009fd0 <_sbrk_r>
 8009564:	3001      	adds	r0, #1
 8009566:	d101      	bne.n	800956c <sbrk_aligned+0x38>
 8009568:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800956c:	4620      	mov	r0, r4
 800956e:	bd70      	pop	{r4, r5, r6, pc}
 8009570:	20001a1c 	.word	0x20001a1c

08009574 <_malloc_r>:
 8009574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009578:	1ccd      	adds	r5, r1, #3
 800957a:	f025 0503 	bic.w	r5, r5, #3
 800957e:	3508      	adds	r5, #8
 8009580:	2d0c      	cmp	r5, #12
 8009582:	bf38      	it	cc
 8009584:	250c      	movcc	r5, #12
 8009586:	2d00      	cmp	r5, #0
 8009588:	4607      	mov	r7, r0
 800958a:	db01      	blt.n	8009590 <_malloc_r+0x1c>
 800958c:	42a9      	cmp	r1, r5
 800958e:	d905      	bls.n	800959c <_malloc_r+0x28>
 8009590:	230c      	movs	r3, #12
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	2600      	movs	r6, #0
 8009596:	4630      	mov	r0, r6
 8009598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800959c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009670 <_malloc_r+0xfc>
 80095a0:	f000 f916 	bl	80097d0 <__malloc_lock>
 80095a4:	f8d8 3000 	ldr.w	r3, [r8]
 80095a8:	461c      	mov	r4, r3
 80095aa:	bb5c      	cbnz	r4, 8009604 <_malloc_r+0x90>
 80095ac:	4629      	mov	r1, r5
 80095ae:	4638      	mov	r0, r7
 80095b0:	f7ff ffc0 	bl	8009534 <sbrk_aligned>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	4604      	mov	r4, r0
 80095b8:	d155      	bne.n	8009666 <_malloc_r+0xf2>
 80095ba:	f8d8 4000 	ldr.w	r4, [r8]
 80095be:	4626      	mov	r6, r4
 80095c0:	2e00      	cmp	r6, #0
 80095c2:	d145      	bne.n	8009650 <_malloc_r+0xdc>
 80095c4:	2c00      	cmp	r4, #0
 80095c6:	d048      	beq.n	800965a <_malloc_r+0xe6>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	4631      	mov	r1, r6
 80095cc:	4638      	mov	r0, r7
 80095ce:	eb04 0903 	add.w	r9, r4, r3
 80095d2:	f000 fcfd 	bl	8009fd0 <_sbrk_r>
 80095d6:	4581      	cmp	r9, r0
 80095d8:	d13f      	bne.n	800965a <_malloc_r+0xe6>
 80095da:	6821      	ldr	r1, [r4, #0]
 80095dc:	1a6d      	subs	r5, r5, r1
 80095de:	4629      	mov	r1, r5
 80095e0:	4638      	mov	r0, r7
 80095e2:	f7ff ffa7 	bl	8009534 <sbrk_aligned>
 80095e6:	3001      	adds	r0, #1
 80095e8:	d037      	beq.n	800965a <_malloc_r+0xe6>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	442b      	add	r3, r5
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	f8d8 3000 	ldr.w	r3, [r8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d038      	beq.n	800966a <_malloc_r+0xf6>
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	42a2      	cmp	r2, r4
 80095fc:	d12b      	bne.n	8009656 <_malloc_r+0xe2>
 80095fe:	2200      	movs	r2, #0
 8009600:	605a      	str	r2, [r3, #4]
 8009602:	e00f      	b.n	8009624 <_malloc_r+0xb0>
 8009604:	6822      	ldr	r2, [r4, #0]
 8009606:	1b52      	subs	r2, r2, r5
 8009608:	d41f      	bmi.n	800964a <_malloc_r+0xd6>
 800960a:	2a0b      	cmp	r2, #11
 800960c:	d917      	bls.n	800963e <_malloc_r+0xca>
 800960e:	1961      	adds	r1, r4, r5
 8009610:	42a3      	cmp	r3, r4
 8009612:	6025      	str	r5, [r4, #0]
 8009614:	bf18      	it	ne
 8009616:	6059      	strne	r1, [r3, #4]
 8009618:	6863      	ldr	r3, [r4, #4]
 800961a:	bf08      	it	eq
 800961c:	f8c8 1000 	streq.w	r1, [r8]
 8009620:	5162      	str	r2, [r4, r5]
 8009622:	604b      	str	r3, [r1, #4]
 8009624:	4638      	mov	r0, r7
 8009626:	f104 060b 	add.w	r6, r4, #11
 800962a:	f000 f8d7 	bl	80097dc <__malloc_unlock>
 800962e:	f026 0607 	bic.w	r6, r6, #7
 8009632:	1d23      	adds	r3, r4, #4
 8009634:	1af2      	subs	r2, r6, r3
 8009636:	d0ae      	beq.n	8009596 <_malloc_r+0x22>
 8009638:	1b9b      	subs	r3, r3, r6
 800963a:	50a3      	str	r3, [r4, r2]
 800963c:	e7ab      	b.n	8009596 <_malloc_r+0x22>
 800963e:	42a3      	cmp	r3, r4
 8009640:	6862      	ldr	r2, [r4, #4]
 8009642:	d1dd      	bne.n	8009600 <_malloc_r+0x8c>
 8009644:	f8c8 2000 	str.w	r2, [r8]
 8009648:	e7ec      	b.n	8009624 <_malloc_r+0xb0>
 800964a:	4623      	mov	r3, r4
 800964c:	6864      	ldr	r4, [r4, #4]
 800964e:	e7ac      	b.n	80095aa <_malloc_r+0x36>
 8009650:	4634      	mov	r4, r6
 8009652:	6876      	ldr	r6, [r6, #4]
 8009654:	e7b4      	b.n	80095c0 <_malloc_r+0x4c>
 8009656:	4613      	mov	r3, r2
 8009658:	e7cc      	b.n	80095f4 <_malloc_r+0x80>
 800965a:	230c      	movs	r3, #12
 800965c:	603b      	str	r3, [r7, #0]
 800965e:	4638      	mov	r0, r7
 8009660:	f000 f8bc 	bl	80097dc <__malloc_unlock>
 8009664:	e797      	b.n	8009596 <_malloc_r+0x22>
 8009666:	6025      	str	r5, [r4, #0]
 8009668:	e7dc      	b.n	8009624 <_malloc_r+0xb0>
 800966a:	605b      	str	r3, [r3, #4]
 800966c:	deff      	udf	#255	; 0xff
 800966e:	bf00      	nop
 8009670:	20001a18 	.word	0x20001a18

08009674 <__sflush_r>:
 8009674:	898a      	ldrh	r2, [r1, #12]
 8009676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967a:	4605      	mov	r5, r0
 800967c:	0710      	lsls	r0, r2, #28
 800967e:	460c      	mov	r4, r1
 8009680:	d458      	bmi.n	8009734 <__sflush_r+0xc0>
 8009682:	684b      	ldr	r3, [r1, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	dc05      	bgt.n	8009694 <__sflush_r+0x20>
 8009688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800968a:	2b00      	cmp	r3, #0
 800968c:	dc02      	bgt.n	8009694 <__sflush_r+0x20>
 800968e:	2000      	movs	r0, #0
 8009690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009696:	2e00      	cmp	r6, #0
 8009698:	d0f9      	beq.n	800968e <__sflush_r+0x1a>
 800969a:	2300      	movs	r3, #0
 800969c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096a0:	682f      	ldr	r7, [r5, #0]
 80096a2:	6a21      	ldr	r1, [r4, #32]
 80096a4:	602b      	str	r3, [r5, #0]
 80096a6:	d032      	beq.n	800970e <__sflush_r+0x9a>
 80096a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	075a      	lsls	r2, r3, #29
 80096ae:	d505      	bpl.n	80096bc <__sflush_r+0x48>
 80096b0:	6863      	ldr	r3, [r4, #4]
 80096b2:	1ac0      	subs	r0, r0, r3
 80096b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096b6:	b10b      	cbz	r3, 80096bc <__sflush_r+0x48>
 80096b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096ba:	1ac0      	subs	r0, r0, r3
 80096bc:	2300      	movs	r3, #0
 80096be:	4602      	mov	r2, r0
 80096c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096c2:	6a21      	ldr	r1, [r4, #32]
 80096c4:	4628      	mov	r0, r5
 80096c6:	47b0      	blx	r6
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	d106      	bne.n	80096dc <__sflush_r+0x68>
 80096ce:	6829      	ldr	r1, [r5, #0]
 80096d0:	291d      	cmp	r1, #29
 80096d2:	d82b      	bhi.n	800972c <__sflush_r+0xb8>
 80096d4:	4a29      	ldr	r2, [pc, #164]	; (800977c <__sflush_r+0x108>)
 80096d6:	410a      	asrs	r2, r1
 80096d8:	07d6      	lsls	r6, r2, #31
 80096da:	d427      	bmi.n	800972c <__sflush_r+0xb8>
 80096dc:	2200      	movs	r2, #0
 80096de:	6062      	str	r2, [r4, #4]
 80096e0:	04d9      	lsls	r1, r3, #19
 80096e2:	6922      	ldr	r2, [r4, #16]
 80096e4:	6022      	str	r2, [r4, #0]
 80096e6:	d504      	bpl.n	80096f2 <__sflush_r+0x7e>
 80096e8:	1c42      	adds	r2, r0, #1
 80096ea:	d101      	bne.n	80096f0 <__sflush_r+0x7c>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b903      	cbnz	r3, 80096f2 <__sflush_r+0x7e>
 80096f0:	6560      	str	r0, [r4, #84]	; 0x54
 80096f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096f4:	602f      	str	r7, [r5, #0]
 80096f6:	2900      	cmp	r1, #0
 80096f8:	d0c9      	beq.n	800968e <__sflush_r+0x1a>
 80096fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096fe:	4299      	cmp	r1, r3
 8009700:	d002      	beq.n	8009708 <__sflush_r+0x94>
 8009702:	4628      	mov	r0, r5
 8009704:	f000 fcc8 	bl	800a098 <_free_r>
 8009708:	2000      	movs	r0, #0
 800970a:	6360      	str	r0, [r4, #52]	; 0x34
 800970c:	e7c0      	b.n	8009690 <__sflush_r+0x1c>
 800970e:	2301      	movs	r3, #1
 8009710:	4628      	mov	r0, r5
 8009712:	47b0      	blx	r6
 8009714:	1c41      	adds	r1, r0, #1
 8009716:	d1c8      	bne.n	80096aa <__sflush_r+0x36>
 8009718:	682b      	ldr	r3, [r5, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0c5      	beq.n	80096aa <__sflush_r+0x36>
 800971e:	2b1d      	cmp	r3, #29
 8009720:	d001      	beq.n	8009726 <__sflush_r+0xb2>
 8009722:	2b16      	cmp	r3, #22
 8009724:	d101      	bne.n	800972a <__sflush_r+0xb6>
 8009726:	602f      	str	r7, [r5, #0]
 8009728:	e7b1      	b.n	800968e <__sflush_r+0x1a>
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	e7ad      	b.n	8009690 <__sflush_r+0x1c>
 8009734:	690f      	ldr	r7, [r1, #16]
 8009736:	2f00      	cmp	r7, #0
 8009738:	d0a9      	beq.n	800968e <__sflush_r+0x1a>
 800973a:	0793      	lsls	r3, r2, #30
 800973c:	680e      	ldr	r6, [r1, #0]
 800973e:	bf08      	it	eq
 8009740:	694b      	ldreq	r3, [r1, #20]
 8009742:	600f      	str	r7, [r1, #0]
 8009744:	bf18      	it	ne
 8009746:	2300      	movne	r3, #0
 8009748:	eba6 0807 	sub.w	r8, r6, r7
 800974c:	608b      	str	r3, [r1, #8]
 800974e:	f1b8 0f00 	cmp.w	r8, #0
 8009752:	dd9c      	ble.n	800968e <__sflush_r+0x1a>
 8009754:	6a21      	ldr	r1, [r4, #32]
 8009756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009758:	4643      	mov	r3, r8
 800975a:	463a      	mov	r2, r7
 800975c:	4628      	mov	r0, r5
 800975e:	47b0      	blx	r6
 8009760:	2800      	cmp	r0, #0
 8009762:	dc06      	bgt.n	8009772 <__sflush_r+0xfe>
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800976a:	81a3      	strh	r3, [r4, #12]
 800976c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009770:	e78e      	b.n	8009690 <__sflush_r+0x1c>
 8009772:	4407      	add	r7, r0
 8009774:	eba8 0800 	sub.w	r8, r8, r0
 8009778:	e7e9      	b.n	800974e <__sflush_r+0xda>
 800977a:	bf00      	nop
 800977c:	dfbffffe 	.word	0xdfbffffe

08009780 <_fflush_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	690b      	ldr	r3, [r1, #16]
 8009784:	4605      	mov	r5, r0
 8009786:	460c      	mov	r4, r1
 8009788:	b913      	cbnz	r3, 8009790 <_fflush_r+0x10>
 800978a:	2500      	movs	r5, #0
 800978c:	4628      	mov	r0, r5
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	b118      	cbz	r0, 800979a <_fflush_r+0x1a>
 8009792:	6a03      	ldr	r3, [r0, #32]
 8009794:	b90b      	cbnz	r3, 800979a <_fflush_r+0x1a>
 8009796:	f7fe ffdb 	bl	8008750 <__sinit>
 800979a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0f3      	beq.n	800978a <_fflush_r+0xa>
 80097a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097a4:	07d0      	lsls	r0, r2, #31
 80097a6:	d404      	bmi.n	80097b2 <_fflush_r+0x32>
 80097a8:	0599      	lsls	r1, r3, #22
 80097aa:	d402      	bmi.n	80097b2 <_fflush_r+0x32>
 80097ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ae:	f7ff f83b 	bl	8008828 <__retarget_lock_acquire_recursive>
 80097b2:	4628      	mov	r0, r5
 80097b4:	4621      	mov	r1, r4
 80097b6:	f7ff ff5d 	bl	8009674 <__sflush_r>
 80097ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097bc:	07da      	lsls	r2, r3, #31
 80097be:	4605      	mov	r5, r0
 80097c0:	d4e4      	bmi.n	800978c <_fflush_r+0xc>
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	059b      	lsls	r3, r3, #22
 80097c6:	d4e1      	bmi.n	800978c <_fflush_r+0xc>
 80097c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ca:	f7ff f82e 	bl	800882a <__retarget_lock_release_recursive>
 80097ce:	e7dd      	b.n	800978c <_fflush_r+0xc>

080097d0 <__malloc_lock>:
 80097d0:	4801      	ldr	r0, [pc, #4]	; (80097d8 <__malloc_lock+0x8>)
 80097d2:	f7ff b829 	b.w	8008828 <__retarget_lock_acquire_recursive>
 80097d6:	bf00      	nop
 80097d8:	20001a14 	.word	0x20001a14

080097dc <__malloc_unlock>:
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <__malloc_unlock+0x8>)
 80097de:	f7ff b824 	b.w	800882a <__retarget_lock_release_recursive>
 80097e2:	bf00      	nop
 80097e4:	20001a14 	.word	0x20001a14

080097e8 <_Balloc>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	69c6      	ldr	r6, [r0, #28]
 80097ec:	4604      	mov	r4, r0
 80097ee:	460d      	mov	r5, r1
 80097f0:	b976      	cbnz	r6, 8009810 <_Balloc+0x28>
 80097f2:	2010      	movs	r0, #16
 80097f4:	f7ff fe96 	bl	8009524 <malloc>
 80097f8:	4602      	mov	r2, r0
 80097fa:	61e0      	str	r0, [r4, #28]
 80097fc:	b920      	cbnz	r0, 8009808 <_Balloc+0x20>
 80097fe:	4b18      	ldr	r3, [pc, #96]	; (8009860 <_Balloc+0x78>)
 8009800:	4818      	ldr	r0, [pc, #96]	; (8009864 <_Balloc+0x7c>)
 8009802:	216b      	movs	r1, #107	; 0x6b
 8009804:	f000 fc14 	bl	800a030 <__assert_func>
 8009808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800980c:	6006      	str	r6, [r0, #0]
 800980e:	60c6      	str	r6, [r0, #12]
 8009810:	69e6      	ldr	r6, [r4, #28]
 8009812:	68f3      	ldr	r3, [r6, #12]
 8009814:	b183      	cbz	r3, 8009838 <_Balloc+0x50>
 8009816:	69e3      	ldr	r3, [r4, #28]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800981e:	b9b8      	cbnz	r0, 8009850 <_Balloc+0x68>
 8009820:	2101      	movs	r1, #1
 8009822:	fa01 f605 	lsl.w	r6, r1, r5
 8009826:	1d72      	adds	r2, r6, #5
 8009828:	0092      	lsls	r2, r2, #2
 800982a:	4620      	mov	r0, r4
 800982c:	f000 fc1e 	bl	800a06c <_calloc_r>
 8009830:	b160      	cbz	r0, 800984c <_Balloc+0x64>
 8009832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009836:	e00e      	b.n	8009856 <_Balloc+0x6e>
 8009838:	2221      	movs	r2, #33	; 0x21
 800983a:	2104      	movs	r1, #4
 800983c:	4620      	mov	r0, r4
 800983e:	f000 fc15 	bl	800a06c <_calloc_r>
 8009842:	69e3      	ldr	r3, [r4, #28]
 8009844:	60f0      	str	r0, [r6, #12]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e4      	bne.n	8009816 <_Balloc+0x2e>
 800984c:	2000      	movs	r0, #0
 800984e:	bd70      	pop	{r4, r5, r6, pc}
 8009850:	6802      	ldr	r2, [r0, #0]
 8009852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009856:	2300      	movs	r3, #0
 8009858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800985c:	e7f7      	b.n	800984e <_Balloc+0x66>
 800985e:	bf00      	nop
 8009860:	0800a809 	.word	0x0800a809
 8009864:	0800a889 	.word	0x0800a889

08009868 <_Bfree>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	69c6      	ldr	r6, [r0, #28]
 800986c:	4605      	mov	r5, r0
 800986e:	460c      	mov	r4, r1
 8009870:	b976      	cbnz	r6, 8009890 <_Bfree+0x28>
 8009872:	2010      	movs	r0, #16
 8009874:	f7ff fe56 	bl	8009524 <malloc>
 8009878:	4602      	mov	r2, r0
 800987a:	61e8      	str	r0, [r5, #28]
 800987c:	b920      	cbnz	r0, 8009888 <_Bfree+0x20>
 800987e:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <_Bfree+0x3c>)
 8009880:	4809      	ldr	r0, [pc, #36]	; (80098a8 <_Bfree+0x40>)
 8009882:	218f      	movs	r1, #143	; 0x8f
 8009884:	f000 fbd4 	bl	800a030 <__assert_func>
 8009888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800988c:	6006      	str	r6, [r0, #0]
 800988e:	60c6      	str	r6, [r0, #12]
 8009890:	b13c      	cbz	r4, 80098a2 <_Bfree+0x3a>
 8009892:	69eb      	ldr	r3, [r5, #28]
 8009894:	6862      	ldr	r2, [r4, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800989c:	6021      	str	r1, [r4, #0]
 800989e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	0800a809 	.word	0x0800a809
 80098a8:	0800a889 	.word	0x0800a889

080098ac <__multadd>:
 80098ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b0:	690d      	ldr	r5, [r1, #16]
 80098b2:	4607      	mov	r7, r0
 80098b4:	460c      	mov	r4, r1
 80098b6:	461e      	mov	r6, r3
 80098b8:	f101 0c14 	add.w	ip, r1, #20
 80098bc:	2000      	movs	r0, #0
 80098be:	f8dc 3000 	ldr.w	r3, [ip]
 80098c2:	b299      	uxth	r1, r3
 80098c4:	fb02 6101 	mla	r1, r2, r1, r6
 80098c8:	0c1e      	lsrs	r6, r3, #16
 80098ca:	0c0b      	lsrs	r3, r1, #16
 80098cc:	fb02 3306 	mla	r3, r2, r6, r3
 80098d0:	b289      	uxth	r1, r1
 80098d2:	3001      	adds	r0, #1
 80098d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098d8:	4285      	cmp	r5, r0
 80098da:	f84c 1b04 	str.w	r1, [ip], #4
 80098de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098e2:	dcec      	bgt.n	80098be <__multadd+0x12>
 80098e4:	b30e      	cbz	r6, 800992a <__multadd+0x7e>
 80098e6:	68a3      	ldr	r3, [r4, #8]
 80098e8:	42ab      	cmp	r3, r5
 80098ea:	dc19      	bgt.n	8009920 <__multadd+0x74>
 80098ec:	6861      	ldr	r1, [r4, #4]
 80098ee:	4638      	mov	r0, r7
 80098f0:	3101      	adds	r1, #1
 80098f2:	f7ff ff79 	bl	80097e8 <_Balloc>
 80098f6:	4680      	mov	r8, r0
 80098f8:	b928      	cbnz	r0, 8009906 <__multadd+0x5a>
 80098fa:	4602      	mov	r2, r0
 80098fc:	4b0c      	ldr	r3, [pc, #48]	; (8009930 <__multadd+0x84>)
 80098fe:	480d      	ldr	r0, [pc, #52]	; (8009934 <__multadd+0x88>)
 8009900:	21ba      	movs	r1, #186	; 0xba
 8009902:	f000 fb95 	bl	800a030 <__assert_func>
 8009906:	6922      	ldr	r2, [r4, #16]
 8009908:	3202      	adds	r2, #2
 800990a:	f104 010c 	add.w	r1, r4, #12
 800990e:	0092      	lsls	r2, r2, #2
 8009910:	300c      	adds	r0, #12
 8009912:	f000 fb7f 	bl	800a014 <memcpy>
 8009916:	4621      	mov	r1, r4
 8009918:	4638      	mov	r0, r7
 800991a:	f7ff ffa5 	bl	8009868 <_Bfree>
 800991e:	4644      	mov	r4, r8
 8009920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009924:	3501      	adds	r5, #1
 8009926:	615e      	str	r6, [r3, #20]
 8009928:	6125      	str	r5, [r4, #16]
 800992a:	4620      	mov	r0, r4
 800992c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009930:	0800a878 	.word	0x0800a878
 8009934:	0800a889 	.word	0x0800a889

08009938 <__hi0bits>:
 8009938:	0c03      	lsrs	r3, r0, #16
 800993a:	041b      	lsls	r3, r3, #16
 800993c:	b9d3      	cbnz	r3, 8009974 <__hi0bits+0x3c>
 800993e:	0400      	lsls	r0, r0, #16
 8009940:	2310      	movs	r3, #16
 8009942:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009946:	bf04      	itt	eq
 8009948:	0200      	lsleq	r0, r0, #8
 800994a:	3308      	addeq	r3, #8
 800994c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009950:	bf04      	itt	eq
 8009952:	0100      	lsleq	r0, r0, #4
 8009954:	3304      	addeq	r3, #4
 8009956:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800995a:	bf04      	itt	eq
 800995c:	0080      	lsleq	r0, r0, #2
 800995e:	3302      	addeq	r3, #2
 8009960:	2800      	cmp	r0, #0
 8009962:	db05      	blt.n	8009970 <__hi0bits+0x38>
 8009964:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009968:	f103 0301 	add.w	r3, r3, #1
 800996c:	bf08      	it	eq
 800996e:	2320      	moveq	r3, #32
 8009970:	4618      	mov	r0, r3
 8009972:	4770      	bx	lr
 8009974:	2300      	movs	r3, #0
 8009976:	e7e4      	b.n	8009942 <__hi0bits+0xa>

08009978 <__lo0bits>:
 8009978:	6803      	ldr	r3, [r0, #0]
 800997a:	f013 0207 	ands.w	r2, r3, #7
 800997e:	d00c      	beq.n	800999a <__lo0bits+0x22>
 8009980:	07d9      	lsls	r1, r3, #31
 8009982:	d422      	bmi.n	80099ca <__lo0bits+0x52>
 8009984:	079a      	lsls	r2, r3, #30
 8009986:	bf49      	itett	mi
 8009988:	085b      	lsrmi	r3, r3, #1
 800998a:	089b      	lsrpl	r3, r3, #2
 800998c:	6003      	strmi	r3, [r0, #0]
 800998e:	2201      	movmi	r2, #1
 8009990:	bf5c      	itt	pl
 8009992:	6003      	strpl	r3, [r0, #0]
 8009994:	2202      	movpl	r2, #2
 8009996:	4610      	mov	r0, r2
 8009998:	4770      	bx	lr
 800999a:	b299      	uxth	r1, r3
 800999c:	b909      	cbnz	r1, 80099a2 <__lo0bits+0x2a>
 800999e:	0c1b      	lsrs	r3, r3, #16
 80099a0:	2210      	movs	r2, #16
 80099a2:	b2d9      	uxtb	r1, r3
 80099a4:	b909      	cbnz	r1, 80099aa <__lo0bits+0x32>
 80099a6:	3208      	adds	r2, #8
 80099a8:	0a1b      	lsrs	r3, r3, #8
 80099aa:	0719      	lsls	r1, r3, #28
 80099ac:	bf04      	itt	eq
 80099ae:	091b      	lsreq	r3, r3, #4
 80099b0:	3204      	addeq	r2, #4
 80099b2:	0799      	lsls	r1, r3, #30
 80099b4:	bf04      	itt	eq
 80099b6:	089b      	lsreq	r3, r3, #2
 80099b8:	3202      	addeq	r2, #2
 80099ba:	07d9      	lsls	r1, r3, #31
 80099bc:	d403      	bmi.n	80099c6 <__lo0bits+0x4e>
 80099be:	085b      	lsrs	r3, r3, #1
 80099c0:	f102 0201 	add.w	r2, r2, #1
 80099c4:	d003      	beq.n	80099ce <__lo0bits+0x56>
 80099c6:	6003      	str	r3, [r0, #0]
 80099c8:	e7e5      	b.n	8009996 <__lo0bits+0x1e>
 80099ca:	2200      	movs	r2, #0
 80099cc:	e7e3      	b.n	8009996 <__lo0bits+0x1e>
 80099ce:	2220      	movs	r2, #32
 80099d0:	e7e1      	b.n	8009996 <__lo0bits+0x1e>
	...

080099d4 <__i2b>:
 80099d4:	b510      	push	{r4, lr}
 80099d6:	460c      	mov	r4, r1
 80099d8:	2101      	movs	r1, #1
 80099da:	f7ff ff05 	bl	80097e8 <_Balloc>
 80099de:	4602      	mov	r2, r0
 80099e0:	b928      	cbnz	r0, 80099ee <__i2b+0x1a>
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <__i2b+0x24>)
 80099e4:	4805      	ldr	r0, [pc, #20]	; (80099fc <__i2b+0x28>)
 80099e6:	f240 1145 	movw	r1, #325	; 0x145
 80099ea:	f000 fb21 	bl	800a030 <__assert_func>
 80099ee:	2301      	movs	r3, #1
 80099f0:	6144      	str	r4, [r0, #20]
 80099f2:	6103      	str	r3, [r0, #16]
 80099f4:	bd10      	pop	{r4, pc}
 80099f6:	bf00      	nop
 80099f8:	0800a878 	.word	0x0800a878
 80099fc:	0800a889 	.word	0x0800a889

08009a00 <__multiply>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	4691      	mov	r9, r2
 8009a06:	690a      	ldr	r2, [r1, #16]
 8009a08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	bfb8      	it	lt
 8009a10:	460b      	movlt	r3, r1
 8009a12:	460c      	mov	r4, r1
 8009a14:	bfbc      	itt	lt
 8009a16:	464c      	movlt	r4, r9
 8009a18:	4699      	movlt	r9, r3
 8009a1a:	6927      	ldr	r7, [r4, #16]
 8009a1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a20:	68a3      	ldr	r3, [r4, #8]
 8009a22:	6861      	ldr	r1, [r4, #4]
 8009a24:	eb07 060a 	add.w	r6, r7, sl
 8009a28:	42b3      	cmp	r3, r6
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	bfb8      	it	lt
 8009a2e:	3101      	addlt	r1, #1
 8009a30:	f7ff feda 	bl	80097e8 <_Balloc>
 8009a34:	b930      	cbnz	r0, 8009a44 <__multiply+0x44>
 8009a36:	4602      	mov	r2, r0
 8009a38:	4b44      	ldr	r3, [pc, #272]	; (8009b4c <__multiply+0x14c>)
 8009a3a:	4845      	ldr	r0, [pc, #276]	; (8009b50 <__multiply+0x150>)
 8009a3c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009a40:	f000 faf6 	bl	800a030 <__assert_func>
 8009a44:	f100 0514 	add.w	r5, r0, #20
 8009a48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a4c:	462b      	mov	r3, r5
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4543      	cmp	r3, r8
 8009a52:	d321      	bcc.n	8009a98 <__multiply+0x98>
 8009a54:	f104 0314 	add.w	r3, r4, #20
 8009a58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a5c:	f109 0314 	add.w	r3, r9, #20
 8009a60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a64:	9202      	str	r2, [sp, #8]
 8009a66:	1b3a      	subs	r2, r7, r4
 8009a68:	3a15      	subs	r2, #21
 8009a6a:	f022 0203 	bic.w	r2, r2, #3
 8009a6e:	3204      	adds	r2, #4
 8009a70:	f104 0115 	add.w	r1, r4, #21
 8009a74:	428f      	cmp	r7, r1
 8009a76:	bf38      	it	cc
 8009a78:	2204      	movcc	r2, #4
 8009a7a:	9201      	str	r2, [sp, #4]
 8009a7c:	9a02      	ldr	r2, [sp, #8]
 8009a7e:	9303      	str	r3, [sp, #12]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d80c      	bhi.n	8009a9e <__multiply+0x9e>
 8009a84:	2e00      	cmp	r6, #0
 8009a86:	dd03      	ble.n	8009a90 <__multiply+0x90>
 8009a88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d05b      	beq.n	8009b48 <__multiply+0x148>
 8009a90:	6106      	str	r6, [r0, #16]
 8009a92:	b005      	add	sp, #20
 8009a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a98:	f843 2b04 	str.w	r2, [r3], #4
 8009a9c:	e7d8      	b.n	8009a50 <__multiply+0x50>
 8009a9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009aa2:	f1ba 0f00 	cmp.w	sl, #0
 8009aa6:	d024      	beq.n	8009af2 <__multiply+0xf2>
 8009aa8:	f104 0e14 	add.w	lr, r4, #20
 8009aac:	46a9      	mov	r9, r5
 8009aae:	f04f 0c00 	mov.w	ip, #0
 8009ab2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ab6:	f8d9 1000 	ldr.w	r1, [r9]
 8009aba:	fa1f fb82 	uxth.w	fp, r2
 8009abe:	b289      	uxth	r1, r1
 8009ac0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ac4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8009acc:	4461      	add	r1, ip
 8009ace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ad2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ad6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ada:	b289      	uxth	r1, r1
 8009adc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ae0:	4577      	cmp	r7, lr
 8009ae2:	f849 1b04 	str.w	r1, [r9], #4
 8009ae6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009aea:	d8e2      	bhi.n	8009ab2 <__multiply+0xb2>
 8009aec:	9a01      	ldr	r2, [sp, #4]
 8009aee:	f845 c002 	str.w	ip, [r5, r2]
 8009af2:	9a03      	ldr	r2, [sp, #12]
 8009af4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009af8:	3304      	adds	r3, #4
 8009afa:	f1b9 0f00 	cmp.w	r9, #0
 8009afe:	d021      	beq.n	8009b44 <__multiply+0x144>
 8009b00:	6829      	ldr	r1, [r5, #0]
 8009b02:	f104 0c14 	add.w	ip, r4, #20
 8009b06:	46ae      	mov	lr, r5
 8009b08:	f04f 0a00 	mov.w	sl, #0
 8009b0c:	f8bc b000 	ldrh.w	fp, [ip]
 8009b10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b14:	fb09 220b 	mla	r2, r9, fp, r2
 8009b18:	4452      	add	r2, sl
 8009b1a:	b289      	uxth	r1, r1
 8009b1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b20:	f84e 1b04 	str.w	r1, [lr], #4
 8009b24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b2c:	f8be 1000 	ldrh.w	r1, [lr]
 8009b30:	fb09 110a 	mla	r1, r9, sl, r1
 8009b34:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009b38:	4567      	cmp	r7, ip
 8009b3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b3e:	d8e5      	bhi.n	8009b0c <__multiply+0x10c>
 8009b40:	9a01      	ldr	r2, [sp, #4]
 8009b42:	50a9      	str	r1, [r5, r2]
 8009b44:	3504      	adds	r5, #4
 8009b46:	e799      	b.n	8009a7c <__multiply+0x7c>
 8009b48:	3e01      	subs	r6, #1
 8009b4a:	e79b      	b.n	8009a84 <__multiply+0x84>
 8009b4c:	0800a878 	.word	0x0800a878
 8009b50:	0800a889 	.word	0x0800a889

08009b54 <__pow5mult>:
 8009b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b58:	4615      	mov	r5, r2
 8009b5a:	f012 0203 	ands.w	r2, r2, #3
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	d007      	beq.n	8009b74 <__pow5mult+0x20>
 8009b64:	4c25      	ldr	r4, [pc, #148]	; (8009bfc <__pow5mult+0xa8>)
 8009b66:	3a01      	subs	r2, #1
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b6e:	f7ff fe9d 	bl	80098ac <__multadd>
 8009b72:	4607      	mov	r7, r0
 8009b74:	10ad      	asrs	r5, r5, #2
 8009b76:	d03d      	beq.n	8009bf4 <__pow5mult+0xa0>
 8009b78:	69f4      	ldr	r4, [r6, #28]
 8009b7a:	b97c      	cbnz	r4, 8009b9c <__pow5mult+0x48>
 8009b7c:	2010      	movs	r0, #16
 8009b7e:	f7ff fcd1 	bl	8009524 <malloc>
 8009b82:	4602      	mov	r2, r0
 8009b84:	61f0      	str	r0, [r6, #28]
 8009b86:	b928      	cbnz	r0, 8009b94 <__pow5mult+0x40>
 8009b88:	4b1d      	ldr	r3, [pc, #116]	; (8009c00 <__pow5mult+0xac>)
 8009b8a:	481e      	ldr	r0, [pc, #120]	; (8009c04 <__pow5mult+0xb0>)
 8009b8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009b90:	f000 fa4e 	bl	800a030 <__assert_func>
 8009b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b98:	6004      	str	r4, [r0, #0]
 8009b9a:	60c4      	str	r4, [r0, #12]
 8009b9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ba4:	b94c      	cbnz	r4, 8009bba <__pow5mult+0x66>
 8009ba6:	f240 2171 	movw	r1, #625	; 0x271
 8009baa:	4630      	mov	r0, r6
 8009bac:	f7ff ff12 	bl	80099d4 <__i2b>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	f04f 0900 	mov.w	r9, #0
 8009bbe:	07eb      	lsls	r3, r5, #31
 8009bc0:	d50a      	bpl.n	8009bd8 <__pow5mult+0x84>
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ff1a 	bl	8009a00 <__multiply>
 8009bcc:	4639      	mov	r1, r7
 8009bce:	4680      	mov	r8, r0
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff fe49 	bl	8009868 <_Bfree>
 8009bd6:	4647      	mov	r7, r8
 8009bd8:	106d      	asrs	r5, r5, #1
 8009bda:	d00b      	beq.n	8009bf4 <__pow5mult+0xa0>
 8009bdc:	6820      	ldr	r0, [r4, #0]
 8009bde:	b938      	cbnz	r0, 8009bf0 <__pow5mult+0x9c>
 8009be0:	4622      	mov	r2, r4
 8009be2:	4621      	mov	r1, r4
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff ff0b 	bl	8009a00 <__multiply>
 8009bea:	6020      	str	r0, [r4, #0]
 8009bec:	f8c0 9000 	str.w	r9, [r0]
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	e7e4      	b.n	8009bbe <__pow5mult+0x6a>
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bfa:	bf00      	nop
 8009bfc:	0800a9d8 	.word	0x0800a9d8
 8009c00:	0800a809 	.word	0x0800a809
 8009c04:	0800a889 	.word	0x0800a889

08009c08 <__lshift>:
 8009c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	6849      	ldr	r1, [r1, #4]
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c16:	68a3      	ldr	r3, [r4, #8]
 8009c18:	4607      	mov	r7, r0
 8009c1a:	4691      	mov	r9, r2
 8009c1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c20:	f108 0601 	add.w	r6, r8, #1
 8009c24:	42b3      	cmp	r3, r6
 8009c26:	db0b      	blt.n	8009c40 <__lshift+0x38>
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7ff fddd 	bl	80097e8 <_Balloc>
 8009c2e:	4605      	mov	r5, r0
 8009c30:	b948      	cbnz	r0, 8009c46 <__lshift+0x3e>
 8009c32:	4602      	mov	r2, r0
 8009c34:	4b28      	ldr	r3, [pc, #160]	; (8009cd8 <__lshift+0xd0>)
 8009c36:	4829      	ldr	r0, [pc, #164]	; (8009cdc <__lshift+0xd4>)
 8009c38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009c3c:	f000 f9f8 	bl	800a030 <__assert_func>
 8009c40:	3101      	adds	r1, #1
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	e7ee      	b.n	8009c24 <__lshift+0x1c>
 8009c46:	2300      	movs	r3, #0
 8009c48:	f100 0114 	add.w	r1, r0, #20
 8009c4c:	f100 0210 	add.w	r2, r0, #16
 8009c50:	4618      	mov	r0, r3
 8009c52:	4553      	cmp	r3, sl
 8009c54:	db33      	blt.n	8009cbe <__lshift+0xb6>
 8009c56:	6920      	ldr	r0, [r4, #16]
 8009c58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c5c:	f104 0314 	add.w	r3, r4, #20
 8009c60:	f019 091f 	ands.w	r9, r9, #31
 8009c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c6c:	d02b      	beq.n	8009cc6 <__lshift+0xbe>
 8009c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c72:	468a      	mov	sl, r1
 8009c74:	2200      	movs	r2, #0
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	fa00 f009 	lsl.w	r0, r0, r9
 8009c7c:	4310      	orrs	r0, r2
 8009c7e:	f84a 0b04 	str.w	r0, [sl], #4
 8009c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c86:	459c      	cmp	ip, r3
 8009c88:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c8c:	d8f3      	bhi.n	8009c76 <__lshift+0x6e>
 8009c8e:	ebac 0304 	sub.w	r3, ip, r4
 8009c92:	3b15      	subs	r3, #21
 8009c94:	f023 0303 	bic.w	r3, r3, #3
 8009c98:	3304      	adds	r3, #4
 8009c9a:	f104 0015 	add.w	r0, r4, #21
 8009c9e:	4584      	cmp	ip, r0
 8009ca0:	bf38      	it	cc
 8009ca2:	2304      	movcc	r3, #4
 8009ca4:	50ca      	str	r2, [r1, r3]
 8009ca6:	b10a      	cbz	r2, 8009cac <__lshift+0xa4>
 8009ca8:	f108 0602 	add.w	r6, r8, #2
 8009cac:	3e01      	subs	r6, #1
 8009cae:	4638      	mov	r0, r7
 8009cb0:	612e      	str	r6, [r5, #16]
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	f7ff fdd8 	bl	8009868 <_Bfree>
 8009cb8:	4628      	mov	r0, r5
 8009cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	e7c5      	b.n	8009c52 <__lshift+0x4a>
 8009cc6:	3904      	subs	r1, #4
 8009cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ccc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cd0:	459c      	cmp	ip, r3
 8009cd2:	d8f9      	bhi.n	8009cc8 <__lshift+0xc0>
 8009cd4:	e7ea      	b.n	8009cac <__lshift+0xa4>
 8009cd6:	bf00      	nop
 8009cd8:	0800a878 	.word	0x0800a878
 8009cdc:	0800a889 	.word	0x0800a889

08009ce0 <__mcmp>:
 8009ce0:	b530      	push	{r4, r5, lr}
 8009ce2:	6902      	ldr	r2, [r0, #16]
 8009ce4:	690c      	ldr	r4, [r1, #16]
 8009ce6:	1b12      	subs	r2, r2, r4
 8009ce8:	d10e      	bne.n	8009d08 <__mcmp+0x28>
 8009cea:	f100 0314 	add.w	r3, r0, #20
 8009cee:	3114      	adds	r1, #20
 8009cf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009cf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009cf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009cfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d00:	42a5      	cmp	r5, r4
 8009d02:	d003      	beq.n	8009d0c <__mcmp+0x2c>
 8009d04:	d305      	bcc.n	8009d12 <__mcmp+0x32>
 8009d06:	2201      	movs	r2, #1
 8009d08:	4610      	mov	r0, r2
 8009d0a:	bd30      	pop	{r4, r5, pc}
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	d3f3      	bcc.n	8009cf8 <__mcmp+0x18>
 8009d10:	e7fa      	b.n	8009d08 <__mcmp+0x28>
 8009d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d16:	e7f7      	b.n	8009d08 <__mcmp+0x28>

08009d18 <__mdiff>:
 8009d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	4606      	mov	r6, r0
 8009d20:	4611      	mov	r1, r2
 8009d22:	4620      	mov	r0, r4
 8009d24:	4690      	mov	r8, r2
 8009d26:	f7ff ffdb 	bl	8009ce0 <__mcmp>
 8009d2a:	1e05      	subs	r5, r0, #0
 8009d2c:	d110      	bne.n	8009d50 <__mdiff+0x38>
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff fd59 	bl	80097e8 <_Balloc>
 8009d36:	b930      	cbnz	r0, 8009d46 <__mdiff+0x2e>
 8009d38:	4b3a      	ldr	r3, [pc, #232]	; (8009e24 <__mdiff+0x10c>)
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	f240 2137 	movw	r1, #567	; 0x237
 8009d40:	4839      	ldr	r0, [pc, #228]	; (8009e28 <__mdiff+0x110>)
 8009d42:	f000 f975 	bl	800a030 <__assert_func>
 8009d46:	2301      	movs	r3, #1
 8009d48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	bfa4      	itt	ge
 8009d52:	4643      	movge	r3, r8
 8009d54:	46a0      	movge	r8, r4
 8009d56:	4630      	mov	r0, r6
 8009d58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d5c:	bfa6      	itte	ge
 8009d5e:	461c      	movge	r4, r3
 8009d60:	2500      	movge	r5, #0
 8009d62:	2501      	movlt	r5, #1
 8009d64:	f7ff fd40 	bl	80097e8 <_Balloc>
 8009d68:	b920      	cbnz	r0, 8009d74 <__mdiff+0x5c>
 8009d6a:	4b2e      	ldr	r3, [pc, #184]	; (8009e24 <__mdiff+0x10c>)
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	f240 2145 	movw	r1, #581	; 0x245
 8009d72:	e7e5      	b.n	8009d40 <__mdiff+0x28>
 8009d74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d78:	6926      	ldr	r6, [r4, #16]
 8009d7a:	60c5      	str	r5, [r0, #12]
 8009d7c:	f104 0914 	add.w	r9, r4, #20
 8009d80:	f108 0514 	add.w	r5, r8, #20
 8009d84:	f100 0e14 	add.w	lr, r0, #20
 8009d88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009d8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d90:	f108 0210 	add.w	r2, r8, #16
 8009d94:	46f2      	mov	sl, lr
 8009d96:	2100      	movs	r1, #0
 8009d98:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009da0:	fa11 f88b 	uxtah	r8, r1, fp
 8009da4:	b299      	uxth	r1, r3
 8009da6:	0c1b      	lsrs	r3, r3, #16
 8009da8:	eba8 0801 	sub.w	r8, r8, r1
 8009dac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009db0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009db4:	fa1f f888 	uxth.w	r8, r8
 8009db8:	1419      	asrs	r1, r3, #16
 8009dba:	454e      	cmp	r6, r9
 8009dbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009dc0:	f84a 3b04 	str.w	r3, [sl], #4
 8009dc4:	d8e8      	bhi.n	8009d98 <__mdiff+0x80>
 8009dc6:	1b33      	subs	r3, r6, r4
 8009dc8:	3b15      	subs	r3, #21
 8009dca:	f023 0303 	bic.w	r3, r3, #3
 8009dce:	3304      	adds	r3, #4
 8009dd0:	3415      	adds	r4, #21
 8009dd2:	42a6      	cmp	r6, r4
 8009dd4:	bf38      	it	cc
 8009dd6:	2304      	movcc	r3, #4
 8009dd8:	441d      	add	r5, r3
 8009dda:	4473      	add	r3, lr
 8009ddc:	469e      	mov	lr, r3
 8009dde:	462e      	mov	r6, r5
 8009de0:	4566      	cmp	r6, ip
 8009de2:	d30e      	bcc.n	8009e02 <__mdiff+0xea>
 8009de4:	f10c 0203 	add.w	r2, ip, #3
 8009de8:	1b52      	subs	r2, r2, r5
 8009dea:	f022 0203 	bic.w	r2, r2, #3
 8009dee:	3d03      	subs	r5, #3
 8009df0:	45ac      	cmp	ip, r5
 8009df2:	bf38      	it	cc
 8009df4:	2200      	movcc	r2, #0
 8009df6:	4413      	add	r3, r2
 8009df8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009dfc:	b17a      	cbz	r2, 8009e1e <__mdiff+0x106>
 8009dfe:	6107      	str	r7, [r0, #16]
 8009e00:	e7a4      	b.n	8009d4c <__mdiff+0x34>
 8009e02:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e06:	fa11 f288 	uxtah	r2, r1, r8
 8009e0a:	1414      	asrs	r4, r2, #16
 8009e0c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e10:	b292      	uxth	r2, r2
 8009e12:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e16:	f84e 2b04 	str.w	r2, [lr], #4
 8009e1a:	1421      	asrs	r1, r4, #16
 8009e1c:	e7e0      	b.n	8009de0 <__mdiff+0xc8>
 8009e1e:	3f01      	subs	r7, #1
 8009e20:	e7ea      	b.n	8009df8 <__mdiff+0xe0>
 8009e22:	bf00      	nop
 8009e24:	0800a878 	.word	0x0800a878
 8009e28:	0800a889 	.word	0x0800a889

08009e2c <__d2b>:
 8009e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e30:	460f      	mov	r7, r1
 8009e32:	2101      	movs	r1, #1
 8009e34:	ec59 8b10 	vmov	r8, r9, d0
 8009e38:	4616      	mov	r6, r2
 8009e3a:	f7ff fcd5 	bl	80097e8 <_Balloc>
 8009e3e:	4604      	mov	r4, r0
 8009e40:	b930      	cbnz	r0, 8009e50 <__d2b+0x24>
 8009e42:	4602      	mov	r2, r0
 8009e44:	4b24      	ldr	r3, [pc, #144]	; (8009ed8 <__d2b+0xac>)
 8009e46:	4825      	ldr	r0, [pc, #148]	; (8009edc <__d2b+0xb0>)
 8009e48:	f240 310f 	movw	r1, #783	; 0x30f
 8009e4c:	f000 f8f0 	bl	800a030 <__assert_func>
 8009e50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e58:	bb2d      	cbnz	r5, 8009ea6 <__d2b+0x7a>
 8009e5a:	9301      	str	r3, [sp, #4]
 8009e5c:	f1b8 0300 	subs.w	r3, r8, #0
 8009e60:	d026      	beq.n	8009eb0 <__d2b+0x84>
 8009e62:	4668      	mov	r0, sp
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	f7ff fd87 	bl	8009978 <__lo0bits>
 8009e6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e6e:	b1e8      	cbz	r0, 8009eac <__d2b+0x80>
 8009e70:	f1c0 0320 	rsb	r3, r0, #32
 8009e74:	fa02 f303 	lsl.w	r3, r2, r3
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	40c2      	lsrs	r2, r0
 8009e7c:	6163      	str	r3, [r4, #20]
 8009e7e:	9201      	str	r2, [sp, #4]
 8009e80:	9b01      	ldr	r3, [sp, #4]
 8009e82:	61a3      	str	r3, [r4, #24]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	bf14      	ite	ne
 8009e88:	2202      	movne	r2, #2
 8009e8a:	2201      	moveq	r2, #1
 8009e8c:	6122      	str	r2, [r4, #16]
 8009e8e:	b1bd      	cbz	r5, 8009ec0 <__d2b+0x94>
 8009e90:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e94:	4405      	add	r5, r0
 8009e96:	603d      	str	r5, [r7, #0]
 8009e98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e9c:	6030      	str	r0, [r6, #0]
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	b003      	add	sp, #12
 8009ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eaa:	e7d6      	b.n	8009e5a <__d2b+0x2e>
 8009eac:	6161      	str	r1, [r4, #20]
 8009eae:	e7e7      	b.n	8009e80 <__d2b+0x54>
 8009eb0:	a801      	add	r0, sp, #4
 8009eb2:	f7ff fd61 	bl	8009978 <__lo0bits>
 8009eb6:	9b01      	ldr	r3, [sp, #4]
 8009eb8:	6163      	str	r3, [r4, #20]
 8009eba:	3020      	adds	r0, #32
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	e7e5      	b.n	8009e8c <__d2b+0x60>
 8009ec0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ec4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ec8:	6038      	str	r0, [r7, #0]
 8009eca:	6918      	ldr	r0, [r3, #16]
 8009ecc:	f7ff fd34 	bl	8009938 <__hi0bits>
 8009ed0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ed4:	e7e2      	b.n	8009e9c <__d2b+0x70>
 8009ed6:	bf00      	nop
 8009ed8:	0800a878 	.word	0x0800a878
 8009edc:	0800a889 	.word	0x0800a889

08009ee0 <__sread>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee8:	f000 f860 	bl	8009fac <_read_r>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	bfab      	itete	ge
 8009ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ef4:	181b      	addge	r3, r3, r0
 8009ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009efa:	bfac      	ite	ge
 8009efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009efe:	81a3      	strhlt	r3, [r4, #12]
 8009f00:	bd10      	pop	{r4, pc}

08009f02 <__swrite>:
 8009f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f06:	461f      	mov	r7, r3
 8009f08:	898b      	ldrh	r3, [r1, #12]
 8009f0a:	05db      	lsls	r3, r3, #23
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	460c      	mov	r4, r1
 8009f10:	4616      	mov	r6, r2
 8009f12:	d505      	bpl.n	8009f20 <__swrite+0x1e>
 8009f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f18:	2302      	movs	r3, #2
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f000 f834 	bl	8009f88 <_lseek_r>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	463b      	mov	r3, r7
 8009f30:	4628      	mov	r0, r5
 8009f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f36:	f000 b85b 	b.w	8009ff0 <_write_r>

08009f3a <__sseek>:
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f42:	f000 f821 	bl	8009f88 <_lseek_r>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	bf15      	itete	ne
 8009f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f56:	81a3      	strheq	r3, [r4, #12]
 8009f58:	bf18      	it	ne
 8009f5a:	81a3      	strhne	r3, [r4, #12]
 8009f5c:	bd10      	pop	{r4, pc}

08009f5e <__sclose>:
 8009f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f62:	f000 b801 	b.w	8009f68 <_close_r>
	...

08009f68 <_close_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4d06      	ldr	r5, [pc, #24]	; (8009f84 <_close_r+0x1c>)
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	4604      	mov	r4, r0
 8009f70:	4608      	mov	r0, r1
 8009f72:	602b      	str	r3, [r5, #0]
 8009f74:	f7f8 f9dd 	bl	8002332 <_close>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d102      	bne.n	8009f82 <_close_r+0x1a>
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	b103      	cbz	r3, 8009f82 <_close_r+0x1a>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	20001a20 	.word	0x20001a20

08009f88 <_lseek_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	; (8009fa8 <_lseek_r+0x20>)
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4611      	mov	r1, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f7f8 f9f2 	bl	8002380 <_lseek>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_lseek_r+0x1e>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_lseek_r+0x1e>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	20001a20 	.word	0x20001a20

08009fac <_read_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4d07      	ldr	r5, [pc, #28]	; (8009fcc <_read_r+0x20>)
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	602a      	str	r2, [r5, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f7f8 f980 	bl	80022c0 <_read>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_read_r+0x1e>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_read_r+0x1e>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	20001a20 	.word	0x20001a20

08009fd0 <_sbrk_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d06      	ldr	r5, [pc, #24]	; (8009fec <_sbrk_r+0x1c>)
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	f7f8 f9de 	bl	800239c <_sbrk>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_sbrk_r+0x1a>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_sbrk_r+0x1a>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	20001a20 	.word	0x20001a20

08009ff0 <_write_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d07      	ldr	r5, [pc, #28]	; (800a010 <_write_r+0x20>)
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	602a      	str	r2, [r5, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	f7f8 f97b 	bl	80022fa <_write>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_write_r+0x1e>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_write_r+0x1e>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	20001a20 	.word	0x20001a20

0800a014 <memcpy>:
 800a014:	440a      	add	r2, r1
 800a016:	4291      	cmp	r1, r2
 800a018:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a01c:	d100      	bne.n	800a020 <memcpy+0xc>
 800a01e:	4770      	bx	lr
 800a020:	b510      	push	{r4, lr}
 800a022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a02a:	4291      	cmp	r1, r2
 800a02c:	d1f9      	bne.n	800a022 <memcpy+0xe>
 800a02e:	bd10      	pop	{r4, pc}

0800a030 <__assert_func>:
 800a030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a032:	4614      	mov	r4, r2
 800a034:	461a      	mov	r2, r3
 800a036:	4b09      	ldr	r3, [pc, #36]	; (800a05c <__assert_func+0x2c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4605      	mov	r5, r0
 800a03c:	68d8      	ldr	r0, [r3, #12]
 800a03e:	b14c      	cbz	r4, 800a054 <__assert_func+0x24>
 800a040:	4b07      	ldr	r3, [pc, #28]	; (800a060 <__assert_func+0x30>)
 800a042:	9100      	str	r1, [sp, #0]
 800a044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a048:	4906      	ldr	r1, [pc, #24]	; (800a064 <__assert_func+0x34>)
 800a04a:	462b      	mov	r3, r5
 800a04c:	f000 f882 	bl	800a154 <fiprintf>
 800a050:	f000 f89f 	bl	800a192 <abort>
 800a054:	4b04      	ldr	r3, [pc, #16]	; (800a068 <__assert_func+0x38>)
 800a056:	461c      	mov	r4, r3
 800a058:	e7f3      	b.n	800a042 <__assert_func+0x12>
 800a05a:	bf00      	nop
 800a05c:	20000068 	.word	0x20000068
 800a060:	0800aaef 	.word	0x0800aaef
 800a064:	0800aafc 	.word	0x0800aafc
 800a068:	0800ab2a 	.word	0x0800ab2a

0800a06c <_calloc_r>:
 800a06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06e:	fba1 2402 	umull	r2, r4, r1, r2
 800a072:	b94c      	cbnz	r4, 800a088 <_calloc_r+0x1c>
 800a074:	4611      	mov	r1, r2
 800a076:	9201      	str	r2, [sp, #4]
 800a078:	f7ff fa7c 	bl	8009574 <_malloc_r>
 800a07c:	9a01      	ldr	r2, [sp, #4]
 800a07e:	4605      	mov	r5, r0
 800a080:	b930      	cbnz	r0, 800a090 <_calloc_r+0x24>
 800a082:	4628      	mov	r0, r5
 800a084:	b003      	add	sp, #12
 800a086:	bd30      	pop	{r4, r5, pc}
 800a088:	220c      	movs	r2, #12
 800a08a:	6002      	str	r2, [r0, #0]
 800a08c:	2500      	movs	r5, #0
 800a08e:	e7f8      	b.n	800a082 <_calloc_r+0x16>
 800a090:	4621      	mov	r1, r4
 800a092:	f7fe fb93 	bl	80087bc <memset>
 800a096:	e7f4      	b.n	800a082 <_calloc_r+0x16>

0800a098 <_free_r>:
 800a098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a09a:	2900      	cmp	r1, #0
 800a09c:	d044      	beq.n	800a128 <_free_r+0x90>
 800a09e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a2:	9001      	str	r0, [sp, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a0aa:	bfb8      	it	lt
 800a0ac:	18e4      	addlt	r4, r4, r3
 800a0ae:	f7ff fb8f 	bl	80097d0 <__malloc_lock>
 800a0b2:	4a1e      	ldr	r2, [pc, #120]	; (800a12c <_free_r+0x94>)
 800a0b4:	9801      	ldr	r0, [sp, #4]
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	b933      	cbnz	r3, 800a0c8 <_free_r+0x30>
 800a0ba:	6063      	str	r3, [r4, #4]
 800a0bc:	6014      	str	r4, [r2, #0]
 800a0be:	b003      	add	sp, #12
 800a0c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0c4:	f7ff bb8a 	b.w	80097dc <__malloc_unlock>
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	d908      	bls.n	800a0de <_free_r+0x46>
 800a0cc:	6825      	ldr	r5, [r4, #0]
 800a0ce:	1961      	adds	r1, r4, r5
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	bf01      	itttt	eq
 800a0d4:	6819      	ldreq	r1, [r3, #0]
 800a0d6:	685b      	ldreq	r3, [r3, #4]
 800a0d8:	1949      	addeq	r1, r1, r5
 800a0da:	6021      	streq	r1, [r4, #0]
 800a0dc:	e7ed      	b.n	800a0ba <_free_r+0x22>
 800a0de:	461a      	mov	r2, r3
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	b10b      	cbz	r3, 800a0e8 <_free_r+0x50>
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	d9fa      	bls.n	800a0de <_free_r+0x46>
 800a0e8:	6811      	ldr	r1, [r2, #0]
 800a0ea:	1855      	adds	r5, r2, r1
 800a0ec:	42a5      	cmp	r5, r4
 800a0ee:	d10b      	bne.n	800a108 <_free_r+0x70>
 800a0f0:	6824      	ldr	r4, [r4, #0]
 800a0f2:	4421      	add	r1, r4
 800a0f4:	1854      	adds	r4, r2, r1
 800a0f6:	42a3      	cmp	r3, r4
 800a0f8:	6011      	str	r1, [r2, #0]
 800a0fa:	d1e0      	bne.n	800a0be <_free_r+0x26>
 800a0fc:	681c      	ldr	r4, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	6053      	str	r3, [r2, #4]
 800a102:	440c      	add	r4, r1
 800a104:	6014      	str	r4, [r2, #0]
 800a106:	e7da      	b.n	800a0be <_free_r+0x26>
 800a108:	d902      	bls.n	800a110 <_free_r+0x78>
 800a10a:	230c      	movs	r3, #12
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	e7d6      	b.n	800a0be <_free_r+0x26>
 800a110:	6825      	ldr	r5, [r4, #0]
 800a112:	1961      	adds	r1, r4, r5
 800a114:	428b      	cmp	r3, r1
 800a116:	bf04      	itt	eq
 800a118:	6819      	ldreq	r1, [r3, #0]
 800a11a:	685b      	ldreq	r3, [r3, #4]
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	bf04      	itt	eq
 800a120:	1949      	addeq	r1, r1, r5
 800a122:	6021      	streq	r1, [r4, #0]
 800a124:	6054      	str	r4, [r2, #4]
 800a126:	e7ca      	b.n	800a0be <_free_r+0x26>
 800a128:	b003      	add	sp, #12
 800a12a:	bd30      	pop	{r4, r5, pc}
 800a12c:	20001a18 	.word	0x20001a18

0800a130 <__ascii_mbtowc>:
 800a130:	b082      	sub	sp, #8
 800a132:	b901      	cbnz	r1, 800a136 <__ascii_mbtowc+0x6>
 800a134:	a901      	add	r1, sp, #4
 800a136:	b142      	cbz	r2, 800a14a <__ascii_mbtowc+0x1a>
 800a138:	b14b      	cbz	r3, 800a14e <__ascii_mbtowc+0x1e>
 800a13a:	7813      	ldrb	r3, [r2, #0]
 800a13c:	600b      	str	r3, [r1, #0]
 800a13e:	7812      	ldrb	r2, [r2, #0]
 800a140:	1e10      	subs	r0, r2, #0
 800a142:	bf18      	it	ne
 800a144:	2001      	movne	r0, #1
 800a146:	b002      	add	sp, #8
 800a148:	4770      	bx	lr
 800a14a:	4610      	mov	r0, r2
 800a14c:	e7fb      	b.n	800a146 <__ascii_mbtowc+0x16>
 800a14e:	f06f 0001 	mvn.w	r0, #1
 800a152:	e7f8      	b.n	800a146 <__ascii_mbtowc+0x16>

0800a154 <fiprintf>:
 800a154:	b40e      	push	{r1, r2, r3}
 800a156:	b503      	push	{r0, r1, lr}
 800a158:	4601      	mov	r1, r0
 800a15a:	ab03      	add	r3, sp, #12
 800a15c:	4805      	ldr	r0, [pc, #20]	; (800a174 <fiprintf+0x20>)
 800a15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a162:	6800      	ldr	r0, [r0, #0]
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	f000 f845 	bl	800a1f4 <_vfiprintf_r>
 800a16a:	b002      	add	sp, #8
 800a16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a170:	b003      	add	sp, #12
 800a172:	4770      	bx	lr
 800a174:	20000068 	.word	0x20000068

0800a178 <__ascii_wctomb>:
 800a178:	b149      	cbz	r1, 800a18e <__ascii_wctomb+0x16>
 800a17a:	2aff      	cmp	r2, #255	; 0xff
 800a17c:	bf85      	ittet	hi
 800a17e:	238a      	movhi	r3, #138	; 0x8a
 800a180:	6003      	strhi	r3, [r0, #0]
 800a182:	700a      	strbls	r2, [r1, #0]
 800a184:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a188:	bf98      	it	ls
 800a18a:	2001      	movls	r0, #1
 800a18c:	4770      	bx	lr
 800a18e:	4608      	mov	r0, r1
 800a190:	4770      	bx	lr

0800a192 <abort>:
 800a192:	b508      	push	{r3, lr}
 800a194:	2006      	movs	r0, #6
 800a196:	f000 fa89 	bl	800a6ac <raise>
 800a19a:	2001      	movs	r0, #1
 800a19c:	f7f8 f886 	bl	80022ac <_exit>

0800a1a0 <__sfputc_r>:
 800a1a0:	6893      	ldr	r3, [r2, #8]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	b410      	push	{r4}
 800a1a8:	6093      	str	r3, [r2, #8]
 800a1aa:	da08      	bge.n	800a1be <__sfputc_r+0x1e>
 800a1ac:	6994      	ldr	r4, [r2, #24]
 800a1ae:	42a3      	cmp	r3, r4
 800a1b0:	db01      	blt.n	800a1b6 <__sfputc_r+0x16>
 800a1b2:	290a      	cmp	r1, #10
 800a1b4:	d103      	bne.n	800a1be <__sfputc_r+0x1e>
 800a1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ba:	f000 b935 	b.w	800a428 <__swbuf_r>
 800a1be:	6813      	ldr	r3, [r2, #0]
 800a1c0:	1c58      	adds	r0, r3, #1
 800a1c2:	6010      	str	r0, [r2, #0]
 800a1c4:	7019      	strb	r1, [r3, #0]
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <__sfputs_r>:
 800a1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	460f      	mov	r7, r1
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	18d5      	adds	r5, r2, r3
 800a1d8:	42ac      	cmp	r4, r5
 800a1da:	d101      	bne.n	800a1e0 <__sfputs_r+0x12>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	e007      	b.n	800a1f0 <__sfputs_r+0x22>
 800a1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e4:	463a      	mov	r2, r7
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f7ff ffda 	bl	800a1a0 <__sfputc_r>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d1f3      	bne.n	800a1d8 <__sfputs_r+0xa>
 800a1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1f4 <_vfiprintf_r>:
 800a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f8:	460d      	mov	r5, r1
 800a1fa:	b09d      	sub	sp, #116	; 0x74
 800a1fc:	4614      	mov	r4, r2
 800a1fe:	4698      	mov	r8, r3
 800a200:	4606      	mov	r6, r0
 800a202:	b118      	cbz	r0, 800a20c <_vfiprintf_r+0x18>
 800a204:	6a03      	ldr	r3, [r0, #32]
 800a206:	b90b      	cbnz	r3, 800a20c <_vfiprintf_r+0x18>
 800a208:	f7fe faa2 	bl	8008750 <__sinit>
 800a20c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a20e:	07d9      	lsls	r1, r3, #31
 800a210:	d405      	bmi.n	800a21e <_vfiprintf_r+0x2a>
 800a212:	89ab      	ldrh	r3, [r5, #12]
 800a214:	059a      	lsls	r2, r3, #22
 800a216:	d402      	bmi.n	800a21e <_vfiprintf_r+0x2a>
 800a218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a21a:	f7fe fb05 	bl	8008828 <__retarget_lock_acquire_recursive>
 800a21e:	89ab      	ldrh	r3, [r5, #12]
 800a220:	071b      	lsls	r3, r3, #28
 800a222:	d501      	bpl.n	800a228 <_vfiprintf_r+0x34>
 800a224:	692b      	ldr	r3, [r5, #16]
 800a226:	b99b      	cbnz	r3, 800a250 <_vfiprintf_r+0x5c>
 800a228:	4629      	mov	r1, r5
 800a22a:	4630      	mov	r0, r6
 800a22c:	f000 f93a 	bl	800a4a4 <__swsetup_r>
 800a230:	b170      	cbz	r0, 800a250 <_vfiprintf_r+0x5c>
 800a232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a234:	07dc      	lsls	r4, r3, #31
 800a236:	d504      	bpl.n	800a242 <_vfiprintf_r+0x4e>
 800a238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a23c:	b01d      	add	sp, #116	; 0x74
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	0598      	lsls	r0, r3, #22
 800a246:	d4f7      	bmi.n	800a238 <_vfiprintf_r+0x44>
 800a248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a24a:	f7fe faee 	bl	800882a <__retarget_lock_release_recursive>
 800a24e:	e7f3      	b.n	800a238 <_vfiprintf_r+0x44>
 800a250:	2300      	movs	r3, #0
 800a252:	9309      	str	r3, [sp, #36]	; 0x24
 800a254:	2320      	movs	r3, #32
 800a256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a25a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a25e:	2330      	movs	r3, #48	; 0x30
 800a260:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a414 <_vfiprintf_r+0x220>
 800a264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a268:	f04f 0901 	mov.w	r9, #1
 800a26c:	4623      	mov	r3, r4
 800a26e:	469a      	mov	sl, r3
 800a270:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a274:	b10a      	cbz	r2, 800a27a <_vfiprintf_r+0x86>
 800a276:	2a25      	cmp	r2, #37	; 0x25
 800a278:	d1f9      	bne.n	800a26e <_vfiprintf_r+0x7a>
 800a27a:	ebba 0b04 	subs.w	fp, sl, r4
 800a27e:	d00b      	beq.n	800a298 <_vfiprintf_r+0xa4>
 800a280:	465b      	mov	r3, fp
 800a282:	4622      	mov	r2, r4
 800a284:	4629      	mov	r1, r5
 800a286:	4630      	mov	r0, r6
 800a288:	f7ff ffa1 	bl	800a1ce <__sfputs_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	f000 80a9 	beq.w	800a3e4 <_vfiprintf_r+0x1f0>
 800a292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a294:	445a      	add	r2, fp
 800a296:	9209      	str	r2, [sp, #36]	; 0x24
 800a298:	f89a 3000 	ldrb.w	r3, [sl]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 80a1 	beq.w	800a3e4 <_vfiprintf_r+0x1f0>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ac:	f10a 0a01 	add.w	sl, sl, #1
 800a2b0:	9304      	str	r3, [sp, #16]
 800a2b2:	9307      	str	r3, [sp, #28]
 800a2b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ba:	4654      	mov	r4, sl
 800a2bc:	2205      	movs	r2, #5
 800a2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c2:	4854      	ldr	r0, [pc, #336]	; (800a414 <_vfiprintf_r+0x220>)
 800a2c4:	f7f5 ff84 	bl	80001d0 <memchr>
 800a2c8:	9a04      	ldr	r2, [sp, #16]
 800a2ca:	b9d8      	cbnz	r0, 800a304 <_vfiprintf_r+0x110>
 800a2cc:	06d1      	lsls	r1, r2, #27
 800a2ce:	bf44      	itt	mi
 800a2d0:	2320      	movmi	r3, #32
 800a2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d6:	0713      	lsls	r3, r2, #28
 800a2d8:	bf44      	itt	mi
 800a2da:	232b      	movmi	r3, #43	; 0x2b
 800a2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e6:	d015      	beq.n	800a314 <_vfiprintf_r+0x120>
 800a2e8:	9a07      	ldr	r2, [sp, #28]
 800a2ea:	4654      	mov	r4, sl
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	f04f 0c0a 	mov.w	ip, #10
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f8:	3b30      	subs	r3, #48	; 0x30
 800a2fa:	2b09      	cmp	r3, #9
 800a2fc:	d94d      	bls.n	800a39a <_vfiprintf_r+0x1a6>
 800a2fe:	b1b0      	cbz	r0, 800a32e <_vfiprintf_r+0x13a>
 800a300:	9207      	str	r2, [sp, #28]
 800a302:	e014      	b.n	800a32e <_vfiprintf_r+0x13a>
 800a304:	eba0 0308 	sub.w	r3, r0, r8
 800a308:	fa09 f303 	lsl.w	r3, r9, r3
 800a30c:	4313      	orrs	r3, r2
 800a30e:	9304      	str	r3, [sp, #16]
 800a310:	46a2      	mov	sl, r4
 800a312:	e7d2      	b.n	800a2ba <_vfiprintf_r+0xc6>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	1d19      	adds	r1, r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	9103      	str	r1, [sp, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	bfbb      	ittet	lt
 800a320:	425b      	neglt	r3, r3
 800a322:	f042 0202 	orrlt.w	r2, r2, #2
 800a326:	9307      	strge	r3, [sp, #28]
 800a328:	9307      	strlt	r3, [sp, #28]
 800a32a:	bfb8      	it	lt
 800a32c:	9204      	strlt	r2, [sp, #16]
 800a32e:	7823      	ldrb	r3, [r4, #0]
 800a330:	2b2e      	cmp	r3, #46	; 0x2e
 800a332:	d10c      	bne.n	800a34e <_vfiprintf_r+0x15a>
 800a334:	7863      	ldrb	r3, [r4, #1]
 800a336:	2b2a      	cmp	r3, #42	; 0x2a
 800a338:	d134      	bne.n	800a3a4 <_vfiprintf_r+0x1b0>
 800a33a:	9b03      	ldr	r3, [sp, #12]
 800a33c:	1d1a      	adds	r2, r3, #4
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	9203      	str	r2, [sp, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	bfb8      	it	lt
 800a346:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a34a:	3402      	adds	r4, #2
 800a34c:	9305      	str	r3, [sp, #20]
 800a34e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a424 <_vfiprintf_r+0x230>
 800a352:	7821      	ldrb	r1, [r4, #0]
 800a354:	2203      	movs	r2, #3
 800a356:	4650      	mov	r0, sl
 800a358:	f7f5 ff3a 	bl	80001d0 <memchr>
 800a35c:	b138      	cbz	r0, 800a36e <_vfiprintf_r+0x17a>
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	eba0 000a 	sub.w	r0, r0, sl
 800a364:	2240      	movs	r2, #64	; 0x40
 800a366:	4082      	lsls	r2, r0
 800a368:	4313      	orrs	r3, r2
 800a36a:	3401      	adds	r4, #1
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a372:	4829      	ldr	r0, [pc, #164]	; (800a418 <_vfiprintf_r+0x224>)
 800a374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a378:	2206      	movs	r2, #6
 800a37a:	f7f5 ff29 	bl	80001d0 <memchr>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d03f      	beq.n	800a402 <_vfiprintf_r+0x20e>
 800a382:	4b26      	ldr	r3, [pc, #152]	; (800a41c <_vfiprintf_r+0x228>)
 800a384:	bb1b      	cbnz	r3, 800a3ce <_vfiprintf_r+0x1da>
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	3307      	adds	r3, #7
 800a38a:	f023 0307 	bic.w	r3, r3, #7
 800a38e:	3308      	adds	r3, #8
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a394:	443b      	add	r3, r7
 800a396:	9309      	str	r3, [sp, #36]	; 0x24
 800a398:	e768      	b.n	800a26c <_vfiprintf_r+0x78>
 800a39a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a39e:	460c      	mov	r4, r1
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	e7a6      	b.n	800a2f2 <_vfiprintf_r+0xfe>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	3401      	adds	r4, #1
 800a3a8:	9305      	str	r3, [sp, #20]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	f04f 0c0a 	mov.w	ip, #10
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3b6:	3a30      	subs	r2, #48	; 0x30
 800a3b8:	2a09      	cmp	r2, #9
 800a3ba:	d903      	bls.n	800a3c4 <_vfiprintf_r+0x1d0>
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0c6      	beq.n	800a34e <_vfiprintf_r+0x15a>
 800a3c0:	9105      	str	r1, [sp, #20]
 800a3c2:	e7c4      	b.n	800a34e <_vfiprintf_r+0x15a>
 800a3c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e7f0      	b.n	800a3b0 <_vfiprintf_r+0x1bc>
 800a3ce:	ab03      	add	r3, sp, #12
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	462a      	mov	r2, r5
 800a3d4:	4b12      	ldr	r3, [pc, #72]	; (800a420 <_vfiprintf_r+0x22c>)
 800a3d6:	a904      	add	r1, sp, #16
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7fd fd79 	bl	8007ed0 <_printf_float>
 800a3de:	4607      	mov	r7, r0
 800a3e0:	1c78      	adds	r0, r7, #1
 800a3e2:	d1d6      	bne.n	800a392 <_vfiprintf_r+0x19e>
 800a3e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3e6:	07d9      	lsls	r1, r3, #31
 800a3e8:	d405      	bmi.n	800a3f6 <_vfiprintf_r+0x202>
 800a3ea:	89ab      	ldrh	r3, [r5, #12]
 800a3ec:	059a      	lsls	r2, r3, #22
 800a3ee:	d402      	bmi.n	800a3f6 <_vfiprintf_r+0x202>
 800a3f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3f2:	f7fe fa1a 	bl	800882a <__retarget_lock_release_recursive>
 800a3f6:	89ab      	ldrh	r3, [r5, #12]
 800a3f8:	065b      	lsls	r3, r3, #25
 800a3fa:	f53f af1d 	bmi.w	800a238 <_vfiprintf_r+0x44>
 800a3fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a400:	e71c      	b.n	800a23c <_vfiprintf_r+0x48>
 800a402:	ab03      	add	r3, sp, #12
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	462a      	mov	r2, r5
 800a408:	4b05      	ldr	r3, [pc, #20]	; (800a420 <_vfiprintf_r+0x22c>)
 800a40a:	a904      	add	r1, sp, #16
 800a40c:	4630      	mov	r0, r6
 800a40e:	f7fe f803 	bl	8008418 <_printf_i>
 800a412:	e7e4      	b.n	800a3de <_vfiprintf_r+0x1ea>
 800a414:	0800ab2b 	.word	0x0800ab2b
 800a418:	0800ab35 	.word	0x0800ab35
 800a41c:	08007ed1 	.word	0x08007ed1
 800a420:	0800a1cf 	.word	0x0800a1cf
 800a424:	0800ab31 	.word	0x0800ab31

0800a428 <__swbuf_r>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	460e      	mov	r6, r1
 800a42c:	4614      	mov	r4, r2
 800a42e:	4605      	mov	r5, r0
 800a430:	b118      	cbz	r0, 800a43a <__swbuf_r+0x12>
 800a432:	6a03      	ldr	r3, [r0, #32]
 800a434:	b90b      	cbnz	r3, 800a43a <__swbuf_r+0x12>
 800a436:	f7fe f98b 	bl	8008750 <__sinit>
 800a43a:	69a3      	ldr	r3, [r4, #24]
 800a43c:	60a3      	str	r3, [r4, #8]
 800a43e:	89a3      	ldrh	r3, [r4, #12]
 800a440:	071a      	lsls	r2, r3, #28
 800a442:	d525      	bpl.n	800a490 <__swbuf_r+0x68>
 800a444:	6923      	ldr	r3, [r4, #16]
 800a446:	b31b      	cbz	r3, 800a490 <__swbuf_r+0x68>
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	6922      	ldr	r2, [r4, #16]
 800a44c:	1a98      	subs	r0, r3, r2
 800a44e:	6963      	ldr	r3, [r4, #20]
 800a450:	b2f6      	uxtb	r6, r6
 800a452:	4283      	cmp	r3, r0
 800a454:	4637      	mov	r7, r6
 800a456:	dc04      	bgt.n	800a462 <__swbuf_r+0x3a>
 800a458:	4621      	mov	r1, r4
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7ff f990 	bl	8009780 <_fflush_r>
 800a460:	b9e0      	cbnz	r0, 800a49c <__swbuf_r+0x74>
 800a462:	68a3      	ldr	r3, [r4, #8]
 800a464:	3b01      	subs	r3, #1
 800a466:	60a3      	str	r3, [r4, #8]
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	6022      	str	r2, [r4, #0]
 800a46e:	701e      	strb	r6, [r3, #0]
 800a470:	6962      	ldr	r2, [r4, #20]
 800a472:	1c43      	adds	r3, r0, #1
 800a474:	429a      	cmp	r2, r3
 800a476:	d004      	beq.n	800a482 <__swbuf_r+0x5a>
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	07db      	lsls	r3, r3, #31
 800a47c:	d506      	bpl.n	800a48c <__swbuf_r+0x64>
 800a47e:	2e0a      	cmp	r6, #10
 800a480:	d104      	bne.n	800a48c <__swbuf_r+0x64>
 800a482:	4621      	mov	r1, r4
 800a484:	4628      	mov	r0, r5
 800a486:	f7ff f97b 	bl	8009780 <_fflush_r>
 800a48a:	b938      	cbnz	r0, 800a49c <__swbuf_r+0x74>
 800a48c:	4638      	mov	r0, r7
 800a48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a490:	4621      	mov	r1, r4
 800a492:	4628      	mov	r0, r5
 800a494:	f000 f806 	bl	800a4a4 <__swsetup_r>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d0d5      	beq.n	800a448 <__swbuf_r+0x20>
 800a49c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a4a0:	e7f4      	b.n	800a48c <__swbuf_r+0x64>
	...

0800a4a4 <__swsetup_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4b2a      	ldr	r3, [pc, #168]	; (800a550 <__swsetup_r+0xac>)
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	6818      	ldr	r0, [r3, #0]
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	b118      	cbz	r0, 800a4b8 <__swsetup_r+0x14>
 800a4b0:	6a03      	ldr	r3, [r0, #32]
 800a4b2:	b90b      	cbnz	r3, 800a4b8 <__swsetup_r+0x14>
 800a4b4:	f7fe f94c 	bl	8008750 <__sinit>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4be:	0718      	lsls	r0, r3, #28
 800a4c0:	d422      	bmi.n	800a508 <__swsetup_r+0x64>
 800a4c2:	06d9      	lsls	r1, r3, #27
 800a4c4:	d407      	bmi.n	800a4d6 <__swsetup_r+0x32>
 800a4c6:	2309      	movs	r3, #9
 800a4c8:	602b      	str	r3, [r5, #0]
 800a4ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4ce:	81a3      	strh	r3, [r4, #12]
 800a4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4d4:	e034      	b.n	800a540 <__swsetup_r+0x9c>
 800a4d6:	0758      	lsls	r0, r3, #29
 800a4d8:	d512      	bpl.n	800a500 <__swsetup_r+0x5c>
 800a4da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4dc:	b141      	cbz	r1, 800a4f0 <__swsetup_r+0x4c>
 800a4de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4e2:	4299      	cmp	r1, r3
 800a4e4:	d002      	beq.n	800a4ec <__swsetup_r+0x48>
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f7ff fdd6 	bl	800a098 <_free_r>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	6363      	str	r3, [r4, #52]	; 0x34
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	6063      	str	r3, [r4, #4]
 800a4fc:	6923      	ldr	r3, [r4, #16]
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	f043 0308 	orr.w	r3, r3, #8
 800a506:	81a3      	strh	r3, [r4, #12]
 800a508:	6923      	ldr	r3, [r4, #16]
 800a50a:	b94b      	cbnz	r3, 800a520 <__swsetup_r+0x7c>
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a516:	d003      	beq.n	800a520 <__swsetup_r+0x7c>
 800a518:	4621      	mov	r1, r4
 800a51a:	4628      	mov	r0, r5
 800a51c:	f000 f840 	bl	800a5a0 <__smakebuf_r>
 800a520:	89a0      	ldrh	r0, [r4, #12]
 800a522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a526:	f010 0301 	ands.w	r3, r0, #1
 800a52a:	d00a      	beq.n	800a542 <__swsetup_r+0x9e>
 800a52c:	2300      	movs	r3, #0
 800a52e:	60a3      	str	r3, [r4, #8]
 800a530:	6963      	ldr	r3, [r4, #20]
 800a532:	425b      	negs	r3, r3
 800a534:	61a3      	str	r3, [r4, #24]
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	b943      	cbnz	r3, 800a54c <__swsetup_r+0xa8>
 800a53a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a53e:	d1c4      	bne.n	800a4ca <__swsetup_r+0x26>
 800a540:	bd38      	pop	{r3, r4, r5, pc}
 800a542:	0781      	lsls	r1, r0, #30
 800a544:	bf58      	it	pl
 800a546:	6963      	ldrpl	r3, [r4, #20]
 800a548:	60a3      	str	r3, [r4, #8]
 800a54a:	e7f4      	b.n	800a536 <__swsetup_r+0x92>
 800a54c:	2000      	movs	r0, #0
 800a54e:	e7f7      	b.n	800a540 <__swsetup_r+0x9c>
 800a550:	20000068 	.word	0x20000068

0800a554 <__swhatbuf_r>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	460c      	mov	r4, r1
 800a558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55c:	2900      	cmp	r1, #0
 800a55e:	b096      	sub	sp, #88	; 0x58
 800a560:	4615      	mov	r5, r2
 800a562:	461e      	mov	r6, r3
 800a564:	da0d      	bge.n	800a582 <__swhatbuf_r+0x2e>
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a56c:	f04f 0100 	mov.w	r1, #0
 800a570:	bf0c      	ite	eq
 800a572:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a576:	2340      	movne	r3, #64	; 0x40
 800a578:	2000      	movs	r0, #0
 800a57a:	6031      	str	r1, [r6, #0]
 800a57c:	602b      	str	r3, [r5, #0]
 800a57e:	b016      	add	sp, #88	; 0x58
 800a580:	bd70      	pop	{r4, r5, r6, pc}
 800a582:	466a      	mov	r2, sp
 800a584:	f000 f848 	bl	800a618 <_fstat_r>
 800a588:	2800      	cmp	r0, #0
 800a58a:	dbec      	blt.n	800a566 <__swhatbuf_r+0x12>
 800a58c:	9901      	ldr	r1, [sp, #4]
 800a58e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a592:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a596:	4259      	negs	r1, r3
 800a598:	4159      	adcs	r1, r3
 800a59a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a59e:	e7eb      	b.n	800a578 <__swhatbuf_r+0x24>

0800a5a0 <__smakebuf_r>:
 800a5a0:	898b      	ldrh	r3, [r1, #12]
 800a5a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5a4:	079d      	lsls	r5, r3, #30
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	d507      	bpl.n	800a5bc <__smakebuf_r+0x1c>
 800a5ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	6123      	str	r3, [r4, #16]
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	6163      	str	r3, [r4, #20]
 800a5b8:	b002      	add	sp, #8
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}
 800a5bc:	ab01      	add	r3, sp, #4
 800a5be:	466a      	mov	r2, sp
 800a5c0:	f7ff ffc8 	bl	800a554 <__swhatbuf_r>
 800a5c4:	9900      	ldr	r1, [sp, #0]
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7fe ffd3 	bl	8009574 <_malloc_r>
 800a5ce:	b948      	cbnz	r0, 800a5e4 <__smakebuf_r+0x44>
 800a5d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d4:	059a      	lsls	r2, r3, #22
 800a5d6:	d4ef      	bmi.n	800a5b8 <__smakebuf_r+0x18>
 800a5d8:	f023 0303 	bic.w	r3, r3, #3
 800a5dc:	f043 0302 	orr.w	r3, r3, #2
 800a5e0:	81a3      	strh	r3, [r4, #12]
 800a5e2:	e7e3      	b.n	800a5ac <__smakebuf_r+0xc>
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	6020      	str	r0, [r4, #0]
 800a5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ec:	81a3      	strh	r3, [r4, #12]
 800a5ee:	9b00      	ldr	r3, [sp, #0]
 800a5f0:	6163      	str	r3, [r4, #20]
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	6120      	str	r0, [r4, #16]
 800a5f6:	b15b      	cbz	r3, 800a610 <__smakebuf_r+0x70>
 800a5f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	f000 f81d 	bl	800a63c <_isatty_r>
 800a602:	b128      	cbz	r0, 800a610 <__smakebuf_r+0x70>
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	f023 0303 	bic.w	r3, r3, #3
 800a60a:	f043 0301 	orr.w	r3, r3, #1
 800a60e:	81a3      	strh	r3, [r4, #12]
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	431d      	orrs	r5, r3
 800a614:	81a5      	strh	r5, [r4, #12]
 800a616:	e7cf      	b.n	800a5b8 <__smakebuf_r+0x18>

0800a618 <_fstat_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d07      	ldr	r5, [pc, #28]	; (800a638 <_fstat_r+0x20>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	602b      	str	r3, [r5, #0]
 800a626:	f7f7 fe90 	bl	800234a <_fstat>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	d102      	bne.n	800a634 <_fstat_r+0x1c>
 800a62e:	682b      	ldr	r3, [r5, #0]
 800a630:	b103      	cbz	r3, 800a634 <_fstat_r+0x1c>
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	bf00      	nop
 800a638:	20001a20 	.word	0x20001a20

0800a63c <_isatty_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4d06      	ldr	r5, [pc, #24]	; (800a658 <_isatty_r+0x1c>)
 800a640:	2300      	movs	r3, #0
 800a642:	4604      	mov	r4, r0
 800a644:	4608      	mov	r0, r1
 800a646:	602b      	str	r3, [r5, #0]
 800a648:	f7f7 fe8f 	bl	800236a <_isatty>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_isatty_r+0x1a>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_isatty_r+0x1a>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20001a20 	.word	0x20001a20

0800a65c <_raise_r>:
 800a65c:	291f      	cmp	r1, #31
 800a65e:	b538      	push	{r3, r4, r5, lr}
 800a660:	4604      	mov	r4, r0
 800a662:	460d      	mov	r5, r1
 800a664:	d904      	bls.n	800a670 <_raise_r+0x14>
 800a666:	2316      	movs	r3, #22
 800a668:	6003      	str	r3, [r0, #0]
 800a66a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a672:	b112      	cbz	r2, 800a67a <_raise_r+0x1e>
 800a674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a678:	b94b      	cbnz	r3, 800a68e <_raise_r+0x32>
 800a67a:	4620      	mov	r0, r4
 800a67c:	f000 f830 	bl	800a6e0 <_getpid_r>
 800a680:	462a      	mov	r2, r5
 800a682:	4601      	mov	r1, r0
 800a684:	4620      	mov	r0, r4
 800a686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a68a:	f000 b817 	b.w	800a6bc <_kill_r>
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d00a      	beq.n	800a6a8 <_raise_r+0x4c>
 800a692:	1c59      	adds	r1, r3, #1
 800a694:	d103      	bne.n	800a69e <_raise_r+0x42>
 800a696:	2316      	movs	r3, #22
 800a698:	6003      	str	r3, [r0, #0]
 800a69a:	2001      	movs	r0, #1
 800a69c:	e7e7      	b.n	800a66e <_raise_r+0x12>
 800a69e:	2400      	movs	r4, #0
 800a6a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	4798      	blx	r3
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	e7e0      	b.n	800a66e <_raise_r+0x12>

0800a6ac <raise>:
 800a6ac:	4b02      	ldr	r3, [pc, #8]	; (800a6b8 <raise+0xc>)
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	6818      	ldr	r0, [r3, #0]
 800a6b2:	f7ff bfd3 	b.w	800a65c <_raise_r>
 800a6b6:	bf00      	nop
 800a6b8:	20000068 	.word	0x20000068

0800a6bc <_kill_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d07      	ldr	r5, [pc, #28]	; (800a6dc <_kill_r+0x20>)
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	602b      	str	r3, [r5, #0]
 800a6ca:	f7f7 fddf 	bl	800228c <_kill>
 800a6ce:	1c43      	adds	r3, r0, #1
 800a6d0:	d102      	bne.n	800a6d8 <_kill_r+0x1c>
 800a6d2:	682b      	ldr	r3, [r5, #0]
 800a6d4:	b103      	cbz	r3, 800a6d8 <_kill_r+0x1c>
 800a6d6:	6023      	str	r3, [r4, #0]
 800a6d8:	bd38      	pop	{r3, r4, r5, pc}
 800a6da:	bf00      	nop
 800a6dc:	20001a20 	.word	0x20001a20

0800a6e0 <_getpid_r>:
 800a6e0:	f7f7 bdcc 	b.w	800227c <_getpid>

0800a6e4 <round>:
 800a6e4:	ec53 2b10 	vmov	r2, r3, d0
 800a6e8:	b570      	push	{r4, r5, r6, lr}
 800a6ea:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a6ee:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800a6f2:	2813      	cmp	r0, #19
 800a6f4:	ee10 5a10 	vmov	r5, s0
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	dc18      	bgt.n	800a72e <round+0x4a>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	da09      	bge.n	800a714 <round+0x30>
 800a700:	3001      	adds	r0, #1
 800a702:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800a706:	d103      	bne.n	800a710 <round+0x2c>
 800a708:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a70c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a710:	2300      	movs	r3, #0
 800a712:	e02a      	b.n	800a76a <round+0x86>
 800a714:	4c16      	ldr	r4, [pc, #88]	; (800a770 <round+0x8c>)
 800a716:	4104      	asrs	r4, r0
 800a718:	ea03 0604 	and.w	r6, r3, r4
 800a71c:	4316      	orrs	r6, r2
 800a71e:	d011      	beq.n	800a744 <round+0x60>
 800a720:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a724:	4103      	asrs	r3, r0
 800a726:	440b      	add	r3, r1
 800a728:	ea23 0104 	bic.w	r1, r3, r4
 800a72c:	e7f0      	b.n	800a710 <round+0x2c>
 800a72e:	2833      	cmp	r0, #51	; 0x33
 800a730:	dd0b      	ble.n	800a74a <round+0x66>
 800a732:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a736:	d105      	bne.n	800a744 <round+0x60>
 800a738:	ee10 0a10 	vmov	r0, s0
 800a73c:	f7f5 fda6 	bl	800028c <__adddf3>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	ec43 2b10 	vmov	d0, r2, r3
 800a748:	bd70      	pop	{r4, r5, r6, pc}
 800a74a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a74e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a752:	40f4      	lsrs	r4, r6
 800a754:	4214      	tst	r4, r2
 800a756:	d0f5      	beq.n	800a744 <round+0x60>
 800a758:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800a75c:	2301      	movs	r3, #1
 800a75e:	4083      	lsls	r3, r0
 800a760:	195b      	adds	r3, r3, r5
 800a762:	bf28      	it	cs
 800a764:	3101      	addcs	r1, #1
 800a766:	ea23 0304 	bic.w	r3, r3, r4
 800a76a:	461a      	mov	r2, r3
 800a76c:	460b      	mov	r3, r1
 800a76e:	e7e9      	b.n	800a744 <round+0x60>
 800a770:	000fffff 	.word	0x000fffff

0800a774 <_init>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	bf00      	nop
 800a778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77a:	bc08      	pop	{r3}
 800a77c:	469e      	mov	lr, r3
 800a77e:	4770      	bx	lr

0800a780 <_fini>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	bf00      	nop
 800a784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a786:	bc08      	pop	{r3}
 800a788:	469e      	mov	lr, r3
 800a78a:	4770      	bx	lr
